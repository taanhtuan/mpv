// CuNNy 4x32 DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-4x32-DS-in
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5, r6, r7;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0); r6 = V4(0.0); r7 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(3.814e-02, -1.159e-02, -1.204e-01, -3.524e-02) * s0_0_0;
	r1 += V4(-1.274e-02, -2.062e-02, 1.924e-02, 2.719e-02) * s0_0_0;
	r2 += V4(5.042e-02, -7.477e-02, 2.646e-01, -3.381e-02) * s0_0_0;
	r3 += V4(3.092e-02, -1.178e-03, 4.221e-02, 3.305e-02) * s0_0_0;
	r4 += V4(-2.939e-01, -3.519e-02, -7.446e-02, 3.024e-02) * s0_0_0;
	r5 += V4(-2.995e-03, 3.292e-01, 2.460e-02, -8.609e-04) * s0_0_0;
	r6 += V4(-9.741e-02, -5.610e-02, 7.584e-03, -5.529e-02) * s0_0_0;
	r7 += V4(-1.105e-02, 1.097e-01, 6.385e-02, 1.890e-01) * s0_0_0;
	r0 += V4(-7.202e-02, 1.281e-02, -3.762e-01, -2.016e-01) * s0_0_1;
	r1 += V4(-8.713e-03, 6.649e-02, -2.822e-01, -2.212e-02) * s0_0_1;
	r2 += V4(1.704e-01, -4.267e-02, -1.087e-01, -1.793e-01) * s0_0_1;
	r3 += V4(-1.647e-01, -3.076e-01, 1.635e-02, 1.358e-01) * s0_0_1;
	r4 += V4(2.349e-01, -1.717e-02, -3.194e-01, 1.487e-02) * s0_0_1;
	r5 += V4(4.066e-01, -3.118e-01, -2.155e-02, -3.291e-01) * s0_0_1;
	r6 += V4(-2.915e-02, -7.021e-02, -6.443e-03, -2.789e-01) * s0_0_1;
	r7 += V4(2.539e-01, 3.496e-01, 5.833e-02, -2.014e-01) * s0_0_1;
	r0 += V4(-8.184e-03, 9.020e-04, -3.836e-02, 2.223e-01) * s0_0_2;
	r1 += V4(1.151e-02, 7.786e-02, -3.213e-02, -1.274e-02) * s0_0_2;
	r2 += V4(2.135e-01, -2.889e-02, 1.729e-02, 5.284e-02) * s0_0_2;
	r3 += V4(-1.294e-01, -2.588e-01, -5.580e-02, 1.847e-02) * s0_0_2;
	r4 += V4(6.770e-02, 1.410e-01, 1.571e-01, 2.387e-02) * s0_0_2;
	r5 += V4(-4.131e-01, -1.876e-02, -1.568e-02, 4.658e-01) * s0_0_2;
	r6 += V4(5.065e-02, -9.776e-02, 8.943e-04, -1.083e-01) * s0_0_2;
	r7 += V4(6.669e-02, -9.526e-03, 3.915e-02, 8.765e-03) * s0_0_2;
	r0 += V4(-1.119e-01, -4.749e-03, 1.995e-02, 2.620e-02) * s0_1_0;
	r1 += V4(9.335e-03, -3.318e-03, 1.236e-01, -3.564e-01) * s0_1_0;
	r2 += V4(-2.195e-01, -5.134e-02, 2.845e-04, 1.855e-01) * s0_1_0;
	r3 += V4(-5.847e-03, 2.804e-02, -1.643e-01, 8.600e-02) * s0_1_0;
	r4 += V4(3.522e-02, -2.979e-01, -1.692e-01, 6.752e-02) * s0_1_0;
	r5 += V4(-1.509e-02, 4.036e-02, -5.199e-01, 4.911e-02) * s0_1_0;
	r6 += V4(-9.164e-02, -1.265e-03, -1.221e-01, 1.743e-01) * s0_1_0;
	r7 += V4(3.134e-02, -3.705e-02, -1.453e-02, 4.463e-01) * s0_1_0;
	r0 += V4(2.591e-02, -2.437e-01, 6.872e-02, -2.627e-01) * s0_1_1;
	r1 += V4(3.384e-01, 1.708e-02, -2.539e-02, 3.682e-01) * s0_1_1;
	r2 += V4(-2.889e-01, -2.271e-01, 7.434e-02, 3.872e-02) * s0_1_1;
	r3 += V4(2.313e-02, 3.517e-01, 3.525e-01, 1.665e-01) * s0_1_1;
	r4 += V4(-3.018e-01, 2.237e-01, 2.549e-01, -1.523e+00) * s0_1_1;
	r5 += V4(-3.374e-01, -5.610e-02, -3.075e-02, 1.993e-01) * s0_1_1;
	r6 += V4(3.798e-01, 4.700e-01, 1.554e-01, 4.145e-01) * s0_1_1;
	r7 += V4(4.073e-02, -1.353e-01, -1.353e-01, -4.011e-01) * s0_1_1;
	r0 += V4(-4.282e-02, 4.140e-01, 4.676e-02, 2.481e-01) * s0_1_2;
	r1 += V4(6.860e-02, -9.322e-01, 1.626e-01, -1.008e-02) * s0_1_2;
	r2 += V4(8.374e-02, 1.274e-01, -1.480e-01, -6.515e-02) * s0_1_2;
	r3 += V4(2.551e-01, 7.784e-03, -1.687e-01, 1.086e-01) * s0_1_2;
	r4 += V4(8.813e-02, -1.599e-02, 1.440e-01, -9.585e-01) * s0_1_2;
	r5 += V4(3.556e-01, 2.386e-02, 3.706e-02, -3.838e-01) * s0_1_2;
	r6 += V4(-8.997e-02, 3.796e-02, -4.589e-02, -1.046e-01) * s0_1_2;
	r7 += V4(8.911e-02, -5.711e-02, 1.658e-02, -3.447e-02) * s0_1_2;
	r0 += V4(2.529e-02, 5.910e-03, 8.715e-02, 1.170e-02) * s0_2_0;
	r1 += V4(6.634e-03, -5.596e-03, 8.562e-02, 3.243e-01) * s0_2_0;
	r2 += V4(8.720e-03, 7.242e-02, -3.138e-02, -1.092e-02) * s0_2_0;
	r3 += V4(-6.665e-02, -1.825e-02, 6.626e-03, -2.543e-02) * s0_2_0;
	r4 += V4(2.686e-01, 3.369e-01, -8.342e-03, 2.624e-02) * s0_2_0;
	r5 += V4(1.258e-02, 4.706e-02, 2.349e-01, -2.483e-02) * s0_2_0;
	r6 += V4(-2.368e-01, -1.034e-01, -2.705e-01, -1.106e-01) * s0_2_0;
	r7 += V4(-3.186e-02, -7.154e-02, 3.520e-01, 2.556e-02) * s0_2_0;
	r0 += V4(-1.821e-02, -3.154e-01, 3.210e-01, -3.183e-02) * s0_2_1;
	r1 += V4(-1.618e-01, 3.769e-02, 6.953e-02, -3.369e-01) * s0_2_1;
	r2 += V4(-4.077e-03, 6.284e-02, 1.001e-01, 5.811e-02) * s0_2_1;
	r3 += V4(1.223e-01, -5.855e-02, -3.602e-02, 8.815e-02) * s0_2_1;
	r4 += V4(-5.269e-02, -2.189e-01, 5.655e-02, -6.485e-02) * s0_2_1;
	r5 += V4(-1.824e-02, -4.918e-02, 3.077e-01, 5.261e-02) * s0_2_1;
	r6 += V4(-1.343e-01, -7.049e-02, 1.325e-01, 1.137e-02) * s0_2_1;
	r7 += V4(-2.842e-01, -2.064e-01, -2.726e-01, -3.723e-02) * s0_2_1;
	r0 += V4(2.047e-02, 1.440e-01, -8.170e-03, 2.397e-02) * s0_2_2;
	r1 += V4(-2.427e-01, 3.728e-02, -1.591e-01, 1.708e-02) * s0_2_2;
	r2 += V4(-1.122e-02, 2.472e-01, -1.535e-01, 2.545e-02) * s0_2_2;
	r3 += V4(-5.227e-02, -5.951e-03, 9.752e-03, 3.712e-03) * s0_2_2;
	r4 += V4(-5.623e-02, -1.178e-01, -4.055e-02, 6.622e-02) * s0_2_2;
	r5 += V4(1.425e-02, 5.770e-03, -2.174e-02, -2.596e-02) * s0_2_2;
	r6 += V4(2.997e-02, -1.076e-01, 1.497e-01, 5.927e-02) * s0_2_2;
	r7 += V4(-1.566e-01, 5.931e-02, -8.185e-02, 4.379e-03) * s0_2_2;
	r0 += V4(6.620e-02, 1.440e-03, 1.144e-02, 2.076e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.365e-02, 5.638e-02, 2.188e-04, 9.718e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(5.397e-03, -1.055e-01, -2.310e-02, -2.632e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r2));
	r3 += V4(8.602e-03, -6.109e-03, 1.758e-02, -3.080e-01);
	r3 = max(r3, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r3));
	r4 += V4(-2.681e-02, -1.016e-02, -8.552e-04, 7.153e-02);
	r4 = max(r4, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r4));
	r5 += V4(-8.209e-03, 1.090e-02, -7.112e-03, -1.046e-02);
	r5 = max(r5, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), vec4(r5));
	r6 += V4(-3.921e-03, -1.376e-03, 3.701e-03, 9.137e-03);
	r6 = max(r6, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r6));
	r7 += V4(8.911e-03, 7.246e-03, -6.840e-02, 4.567e-03);
	r7 = max(r7, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), vec4(r7));
}

//!DESC CuNNy-4x32-DS-conv1
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF10F1302, 0x0C00F5ED, 0xE116E3FA, 0x2AF41E1C);
	r1 = D(r1, s0_0_0, 0x0C0F2E03, 0xE8079FE7, 0xF2FD10F0, 0x1628BEF6);
	r2 = D(r2, s0_0_0, 0xF3E91B01, 0xE71CF9EC, 0x0A0AF601, 0xF8EF030F);
	r3 = D(r3, s0_0_0, 0x172CD3FB, 0x12ECDAFE, 0x0602F9B7, 0xF90709EF);
	r4 = D(r4, s0_0_0, 0xECEA3B0E, 0xFBC80B08, 0x1F0B9112, 0x0CFBF010);
	r5 = D(r5, s0_0_0, 0xF9F8F706, 0x040421F2, 0x1339F2F6, 0xEDF2161C);
	r6 = D(r6, s0_0_0, 0x0CF4E800, 0xE90CF20A, 0xF2FEF9FB, 0xF8280AFA);
	r7 = D(r7, s0_0_0, 0x07D813EC, 0xF4F6BCF2, 0x2D11E418, 0xF6FDC501);
	r0 = D(r0, s0_0_1, 0x0AEF15F1, 0x14C01E09, 0xDEE309ED, 0x082BE82D);
	r1 = D(r1, s0_0_1, 0x02E4D606, 0x0BF3E6F5, 0x03EFEE12, 0x0A1A240F);
	r2 = D(r2, s0_0_1, 0xF50FDB0D, 0xF2F04603, 0xF100F3FB, 0xFB2AF900);
	r3 = D(r3, s0_0_1, 0x0B13230E, 0x02B0C4FA, 0xFF0EFFFF, 0xE249E7F5);
	r4 = D(r4, s0_0_1, 0xF51218ED, 0x0A3230FC, 0x0502D700, 0x05008707);
	r5 = D(r5, s0_0_1, 0xF6120911, 0xF90A110C, 0xEFC7FBEF, 0x3A28721B);
	r6 = D(r6, s0_0_1, 0x081DF407, 0xE71E1413, 0x07FDFBEF, 0xF8061FCE);
	r7 = D(r7, s0_0_1, 0x0D151A02, 0x1B13E5D1, 0xFD1306EB, 0xDFF6FA10);
	r0 = D(r0, s0_0_2, 0xEE04FFF7, 0x08F70704, 0x19EDE2F4, 0xFE122321);
	r1 = D(r1, s0_0_2, 0x04F807F9, 0x1701F6E8, 0x02B40203, 0x07371C0D);
	r2 = D(r2, s0_0_2, 0xE9F30BFC, 0x2209F70B, 0x0B160EFF, 0x05E91BEE);
	r3 = D(r3, s0_0_2, 0xEC1A2207, 0xF501D4EB, 0x06FF02DA, 0xCEF900FC);
	r4 = D(r4, s0_0_2, 0xF6F316FD, 0xE9FAC804, 0xF212F7F0, 0x1204050D);
	r5 = D(r5, s0_0_2, 0xFB04FEFD, 0xF006F9CC, 0x171C1416, 0x32011801);
	r6 = D(r6, s0_0_2, 0xF302EDF6, 0x07201004, 0x15F20703, 0x02060008);
	r7 = D(r7, s0_0_2, 0xF7030208, 0x0A060F17, 0xE21100EB, 0x23F5B00A);
	r0 = D(r0, s0_1_0, 0x0AF91BF1, 0x04F3F804, 0x24D11912, 0x06D8120E);
	r1 = D(r1, s0_1_0, 0x3AF34A0D, 0xE80BBB14, 0x150410EB, 0xF8FAC5ED);
	r2 = D(r2, s0_1_0, 0x0918E7EF, 0xFFFB0A17, 0xF40FEFFB, 0xE9EA0FE3);
	r3 = D(r3, s0_1_0, 0x0B13FEF8, 0x88BFB50B, 0x0B050BE6, 0x11E62A03);
	r4 = D(r4, s0_1_0, 0x0DEDF8EF, 0x14E3FA0D, 0xCDFD8105, 0xFFF2D1EE);
	r5 = D(r5, s0_1_0, 0x18F612FA, 0x01000D05, 0x163919BD, 0xEBD0C5E9);
	r6 = D(r6, s0_1_0, 0xDF09A3F4, 0x30FBF212, 0x0F360510, 0x1714D302);
	r7 = D(r7, s0_1_0, 0xBEE7EDF7, 0xEDD0AF06, 0x0E0EF718, 0x14F0D0E9);
	r0 = D(r0, s0_1_1, 0x15F8EA0E, 0xF9D1E801, 0x04FDEC02, 0xF2EFAF30);
	r1 = D(r1, s0_1_1, 0x0A081E11, 0x2DDE07CE, 0xDDF8331E, 0x0EFC1DED);
	r2 = D(r2, s0_1_1, 0xF7F39903, 0xCCEE2602, 0x2AF3F50D, 0xFB03F60D);
	r3 = D(r3, s0_1_1, 0x140EED02, 0xEFB2F41B, 0xDD07E22D, 0x06081614);
	r4 = D(r4, s0_1_1, 0x1B5612EF, 0x021EE2E9, 0x0DDEC616, 0x422281FD);
	r5 = D(r5, s0_1_1, 0x005E02FC, 0x090C1143, 0x07810D20, 0x8C15F6EF);
	r6 = D(r6, s0_1_1, 0x0535160B, 0xD1F3F4E1, 0x1FD3271D, 0xE5F5E908);
	r7 = D(r7, s0_1_1, 0xF3FD0007, 0x07EFDCF4, 0x290ADFFF, 0x0E20F107);
	r0 = D(r0, s0_1_2, 0xCC053808, 0x01DAFDFC, 0xB90C0424, 0xF5F02C25);
	r1 = D(r1, s0_1_2, 0xEC0611FC, 0x08E30E21, 0x12D2FEEA, 0x0FF51124);
	r2 = D(r2, s0_1_2, 0xF8050309, 0xE6F4EFE3, 0xDD0E130E, 0xE1FB04F3);
	r3 = D(r3, s0_1_2, 0xF0F419ED, 0xF4F7FA04, 0xFAFD0724, 0x0BF60AF8);
	r4 = D(r4, s0_1_2, 0xF1101B1B, 0x1B0AB4EE, 0x2013F309, 0x0423D216);
	r5 = D(r5, s0_1_2, 0xEE1709F9, 0x020209DB, 0xF61D08E9, 0xCC0D3412);
	r6 = D(r6, s0_1_2, 0xFF1B02FE, 0x0827ED03, 0xE1050C05, 0xF7E0F34B);
	r7 = D(r7, s0_1_2, 0x1CFDF200, 0xE6FF1830, 0xFAFDFF13, 0x34F60D17);
	r0 = D(r0, s0_2_0, 0xFC35FDFB, 0x030F01FD, 0x28F0F005, 0xB906EB0F);
	r1 = D(r1, s0_2_0, 0x02F2FEFC, 0xD10B0715, 0xDEFFFCFF, 0x13FACBF3);
	r2 = D(r2, s0_2_0, 0x0916D611, 0xF00514DC, 0xF20BF8F6, 0x1E08A909);
	r3 = D(r3, s0_2_0, 0xEA141302, 0xF5DEE804, 0x00F6FFC0, 0x01FEFAF0);
	r4 = D(r4, s0_2_0, 0xF71FE50D, 0x26DCF30E, 0xF9FC0FF5, 0x00F71602);
	r5 = D(r5, s0_2_0, 0x0301E2F7, 0x071C1DE0, 0xC528EF32, 0x3411F606);
	r6 = D(r6, s0_2_0, 0xBC04E016, 0x0FEF0AD8, 0xEBF526EC, 0xE61DF8FE);
	r7 = D(r7, s0_2_0, 0xD50E03EC, 0xF8F9F417, 0x0D04F7F4, 0xFFF511FB);
	r0 = D(r0, s0_2_1, 0x1FE1EDFB, 0xEFEEFEF6, 0x0C0BEDE0, 0xBBDD23DA);
	r1 = D(r1, s0_2_1, 0x0C22F4FF, 0xC312FD15, 0xD01EDFFE, 0x191E04FE);
	r2 = D(r2, s0_2_1, 0x0ADCD608, 0x0DF6E700, 0x1DDFD602, 0x32FFF6EA);
	r3 = D(r3, s0_2_1, 0xE4F2F109, 0x31E9EE02, 0x0DF7082F, 0xFB00F70C);
	r4 = D(r4, s0_2_1, 0x4C2FF80A, 0xF12AD8FB, 0xEFFAFE04, 0xAA03D8F5);
	r5 = D(r5, s0_2_1, 0xFF3F2015, 0x12F30218, 0x22C2F5EB, 0xCFF908C6);
	r6 = D(r6, s0_2_1, 0xF32B05FF, 0xD1FF0606, 0x16D62018, 0xEC0D0BF9);
	r7 = D(r7, s0_2_1, 0xEEE3FC10, 0x1AA1FCE5, 0xF5FEF100, 0xEB182314);
	r0 = D(r0, s0_2_2, 0xEAE13615, 0xF90B0513, 0x1FF205FE, 0xF9061A81);
	r1 = D(r1, s0_2_2, 0xFB0101F0, 0xD809FD0B, 0x19F91914, 0xF7181600);
	r2 = D(r2, s0_2_2, 0x0C0302E5, 0xF7FDF838, 0xDD1005E6, 0x0FFF0025);
	r3 = D(r3, s0_2_2, 0xE9F40A14, 0x3B3EF2FC, 0xF2F805BD, 0xFAFFF7F2);
	r4 = D(r4, s0_2_2, 0xEE150EFA, 0x3D1AF502, 0xF3FA01DD, 0x04F505F1);
	r5 = D(r5, s0_2_2, 0x0C0B00ED, 0x090104EF, 0xDAEE130B, 0xCA2B03FE);
	r6 = D(r6, s0_2_2, 0x1E13F7EE, 0x18F80108, 0xF00D13D6, 0xDCE811E4);
	r7 = D(r7, s0_2_2, 0x19FDF610, 0x19D2040F, 0xFAF408EB, 0x0FF700CE);
	r0 = D(r0, s1_0_0, 0xFEF4EEF7, 0x0009EA0D, 0x111FDDF7, 0x1AF214BD);
	r1 = D(r1, s1_0_0, 0xF40501E5, 0x5309E6D9, 0xF2FB01F4, 0x0DFD00D4);
	r2 = D(r2, s1_0_0, 0x0F040509, 0xFDDD2CED, 0xEBE9E40A, 0xDFF50E02);
	r3 = D(r3, s1_0_0, 0xDC02E5EC, 0x24291D29, 0x07F7FDD2, 0x07FA71DA);
	r4 = D(r4, s1_0_0, 0xFF0C0BFF, 0x02F31B04, 0x14F9F207, 0xF9FFE22B);
	r5 = D(r5, s1_0_0, 0xFD0A1216, 0x07F8D5DB, 0x06FE11E2, 0xF8003EBF);
	r6 = D(r6, s1_0_0, 0xFB160002, 0xFDF804C9, 0xEBFBF6EC, 0x16E634ED);
	r7 = D(r7, s1_0_0, 0x2802FAF4, 0xF8001C11, 0xEAF1FEEF, 0x0F070117);
	r0 = D(r0, s1_0_1, 0xEEF50305, 0x291CF942, 0xC5C91B00, 0xE3000614);
	r1 = D(r1, s1_0_1, 0xD100F1F7, 0x2B05E82A, 0xF30F0013, 0x0BC1DBC7);
	r2 = D(r2, s1_0_1, 0x22F1F9D4, 0xF110B700, 0x17E8FD0E, 0xED1105EB);
	r3 = D(r3, s1_0_1, 0xCA040822, 0x0E010401, 0xDFF619F4, 0x090CE0EA);
	r4 = D(r4, s1_0_1, 0x0CFBF012, 0x0C180ADC, 0x0313F7DE, 0xF50FFE0C);
	r5 = D(r5, s1_0_1, 0xF9FEFD0A, 0xF21FC802, 0x09001B1B, 0x080419BE);
	r6 = D(r6, s1_0_1, 0xF60DF60A, 0xE9E11CD1, 0xDBFA0DF9, 0xF5EBEB37);
	r7 = D(r7, s1_0_1, 0x1403F905, 0x1EF90221, 0x03F4F100, 0xEFC81406);
	r0 = D(r0, s1_0_2, 0xE108CC16, 0xD4FEEBF5, 0xCBFBFBC3, 0xF1F706F9);
	r1 = D(r1, s1_0_2, 0xF6060401, 0xEE17FA15, 0x2D1F0711, 0xE9FBF4F7);
	r2 = D(r2, s1_0_2, 0x0CF7FF0F, 0xF4E1F61A, 0xE7F9F10D, 0xF702FBD4);
	r3 = D(r3, s1_0_2, 0xFDFB0106, 0xE71903F3, 0xF7F40302, 0xE91820F4);
	r4 = D(r4, s1_0_2, 0xFF01EBF2, 0x07D0080D, 0x06FB03FB, 0xF203FAED);
	r5 = D(r5, s1_0_2, 0xFB00FD0A, 0xF8FB1801, 0x20FF0E03, 0xF008E5EA);
	r6 = D(r6, s1_0_2, 0x01F80307, 0xF90B05FB, 0x12FEF7FA, 0x230C0B07);
	r7 = D(r7, s1_0_2, 0x01FEFCFE, 0xFD07EFED, 0x0B1509FD, 0xD5CF03D2);
	r0 = D(r0, s1_1_0, 0x0607F7EA, 0x04F4FBF8, 0x5C3713E5, 0xFDE223FE);
	r1 = D(r1, s1_1_0, 0xFFF1F3CD, 0xC91BFC0A, 0xEE1DE00B, 0x01FB44FF);
	r2 = D(r2, s1_1_0, 0xF0EF22EC, 0xD929C82E, 0xF8F51BD9, 0xF1F2D9EF);
	r3 = D(r3, s1_1_0, 0x0B0BE427, 0x08161613, 0x0502F50F, 0x0C0F34E3);
	r4 = D(r4, s1_1_0, 0x27D502A9, 0x4D2E82B4, 0xD0F3AD37, 0x011506F6);
	r5 = D(r5, s1_1_0, 0x08F728BF, 0x1B061A11, 0xB4FFBEE6, 0xF8D61A20);
	r6 = D(r6, s1_1_0, 0xF7FD32D2, 0xF9DFBF0A, 0x11F80E0B, 0x1505090A);
	r7 = D(r7, s1_1_0, 0xEE100D1A, 0x06F0E2EB, 0x0712FCE9, 0x1A0824D5);
	r0 = D(r0, s1_1_1, 0x160DEEFE, 0x040218F6, 0x1314DED8, 0x0D19F02B);
	r1 = D(r1, s1_1_1, 0x3EE90112, 0x0ED706E4, 0xFFCD7FDD, 0x1729F90D);
	r2 = D(r2, s1_1_1, 0x140FFF2E, 0x28FC2CFA, 0xF02203E5, 0x3427EC05);
	r3 = D(r3, s1_1_1, 0x1D0B1E34, 0x09F2FBEA, 0x0707FE25, 0x11FADD06);
	r4 = D(r4, s1_1_1, 0x000A01F1, 0x1A1CF5C7, 0x0720F41D, 0xE8EBD6F2);
	r5 = D(r5, s1_1_1, 0xD0FDFD9F, 0x0BF22504, 0x370AE703, 0x13F8CF11);
	r6 = D(r6, s1_1_1, 0x28F0F6ED, 0x0602030E, 0xF8D9FB20, 0xAE0E11D0);
	r7 = D(r7, s1_1_1, 0xECFB1AF6, 0xDD201BF3, 0x05120628, 0xF8F4DD1F);
	r0 = D(r0, s1_1_2, 0xCEE717FF, 0xF20604E5, 0x1DF12D22, 0xF32112ED);
	r1 = D(r1, s1_1_2, 0x10120D00, 0xE51FFCE6, 0x040AE017, 0x1914FD07);
	r2 = D(r2, s1_1_2, 0xD6140306, 0xEDE7FA0A, 0x380A00FD, 0x393FEC23);
	r3 = D(r3, s1_1_2, 0xEFF20100, 0x1201F8EE, 0xFF05F905, 0x10FB0605);
	r4 = D(r4, s1_1_2, 0x240911C7, 0xED0D0D2F, 0x06E8FFF7, 0x4013EE07);
	r5 = D(r5, s1_1_2, 0x17F00419, 0x03EDF6FE, 0x09FBCDFA, 0x07F2F8CD);
	r6 = D(r6, s1_1_2, 0x08DEF4E8, 0x11FCF700, 0xEF18E2F1, 0xF410100F);
	r7 = D(r7, s1_1_2, 0xE3FB0006, 0x00EDEE0C, 0xF623040B, 0x12FE170E);
	r0 = D(r0, s1_2_0, 0xF4D81703, 0xFE0214FF, 0xEFE4B723, 0xE5000CFF);
	r1 = D(r1, s1_2_0, 0xFB05071B, 0xCE0EF61D, 0xFB0708FB, 0x07FB1715);
	r2 = D(r2, s1_2_0, 0xFCE40FF5, 0xFCFC2DD0, 0x1803F2FE, 0x0B04121F);
	r3 = D(r3, s1_2_0, 0x19F004DD, 0x0B06E2E0, 0x0505D8F8, 0xE603FAFD);
	r4 = D(r4, s1_2_0, 0xF7FEDD22, 0x38E81817, 0xDA24ED1F, 0x11FE2C0B);
	r5 = D(r5, s1_2_0, 0x011CE5FE, 0xFF1A20FB, 0xE2041212, 0x021C1C00);
	r6 = D(r6, s1_2_0, 0xCCE9E722, 0x04FA09F3, 0x18D605C8, 0x0EEA0501);
	r7 = D(r7, s1_2_0, 0x0BFEF3FB, 0x06FAD9FD, 0xF8080403, 0xFC06F517);
	r0 = D(r0, s1_2_1, 0x15FCE518, 0xF40DF6FC, 0xF3EF0D1C, 0x12184011);
	r1 = D(r1, s1_2_1, 0x0420030A, 0xF5041F0C, 0x1402E4EC, 0xF4FB0EF0);
	r2 = D(r2, s1_2_1, 0xDD19EB03, 0x2B15DEEE, 0xF20EFC1F, 0xDD1A07FE);
	r3 = D(r3, s1_2_1, 0x080816B0, 0xEDFA0028, 0x08DE0903, 0xFB111104);
	r4 = D(r4, s1_2_1, 0xA30D2728, 0xD8E3F539, 0x04FCFAF7, 0x0918FC08);
	r5 = D(r5, s1_2_1, 0x08EEFA20, 0xF40AF5F8, 0x04DF11FD, 0xFE13E206);
	r6 = D(r6, s1_2_1, 0xFCF10022, 0xE9060301, 0x220B25E7, 0x00F50402);
	r7 = D(r7, s1_2_1, 0xE7F4FEFE, 0x0FF104F8, 0xFF1AFBE8, 0x1B000F01);
	r0 = D(r0, s1_2_2, 0x36D505E9, 0xFF000209, 0x0232ED04, 0x29AE07E7);
	r1 = D(r1, s1_2_2, 0xF901FF01, 0x12FC0BF5, 0xEBFD03FB, 0x000F1EFF);
	r2 = D(r2, s1_2_2, 0xE3DD0304, 0x111EF8F9, 0xE8F7F60D, 0xDEFFF5FE);
	r3 = D(r3, s1_2_2, 0xF0F2FE00, 0xF3EBF91E, 0x07F8FAFF, 0x0BEBEF00);
	r4 = D(r4, s1_2_2, 0xF100F012, 0xE9DE2D28, 0x050B0103, 0xEBFF15F7);
	r5 = D(r5, s1_2_2, 0x0C08FB09, 0x0204FE06, 0xED2A0E12, 0xEF250A06);
	r6 = D(r6, s1_2_2, 0x07EFFE05, 0x01131502, 0x230DFC14, 0x0228EEE8);
	r7 = D(r7, s1_2_2, 0x0204FAFE, 0xF219F607, 0xF9F7F6F8, 0xFFEC0622);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0C06D403, 0xF9F400F2, 0x09F2FAD0, 0x3CF7FE1B);
	r1 = D(r1, s0_0_0, 0xF0F809FF, 0x09F41F24, 0x150301F6, 0xEE2DF3ED);
	r2 = D(r2, s0_0_0, 0xEA1B23FC, 0x0BEAF8EE, 0x06FD0E0D, 0x191DF40A);
	r3 = D(r3, s0_0_0, 0xE90DE71A, 0xF0150BEA, 0xFFFE05FC, 0xCF1EA1FF);
	r4 = D(r4, s0_0_0, 0xF8190BF5, 0x32E8FBE5, 0xD90D0A36, 0x0DF6FDF2);
	r5 = D(r5, s0_0_0, 0xF8F8FB01, 0x050CF0FD, 0x1316D506, 0xFDEE2213);
	r6 = D(r6, s0_0_0, 0x01F70AFD, 0xFAFCF21B, 0x09F3F0FE, 0x0103E112);
	r7 = D(r7, s0_0_0, 0xFF02FCED, 0xEC03FD0A, 0xE02A141D, 0xFC05EE07);
	r0 = D(r0, s0_0_1, 0x03F63109, 0xF3FD04F7, 0xDFFEC7F5, 0xAC0EB500);
	r1 = D(r1, s0_0_1, 0x1C00F8F7, 0xF72E1EF8, 0x04EF8107, 0x36FFDF2C);
	r2 = D(r2, s0_0_1, 0xDF04110C, 0xDFB1E71D, 0x1BFBFBF4, 0x052F23F5);
	r3 = D(r3, s0_0_1, 0x38EEFC0C, 0x0DFDF6E4, 0x030017FE, 0x8112C706);
	r4 = D(r4, s0_0_1, 0x0CF51505, 0x1FC80E0A, 0xEAF8FD08, 0x09F3F6F7);
	r5 = D(r5, s0_0_1, 0x0BFB0D0E, 0xF7E6F917, 0xF6F7FF1B, 0x1218FC2B);
	r6 = D(r6, s0_0_1, 0xF2060D15, 0x07EAF618, 0x0326F2FC, 0x11034900);
	r7 = D(r7, s0_0_1, 0xF7F40907, 0xF4120719, 0x06170F0E, 0xCCF611E5);
	r0 = D(r0, s0_0_2, 0x14090824, 0x19F6F8ED, 0xF4FF1E03, 0xB71FF0F1);
	r1 = D(r1, s0_0_2, 0xFD0600EC, 0x0C3AE601, 0x17EAF7E9, 0x0CD7DDEE);
	r2 = D(r2, s0_0_2, 0x0EFBF00A, 0x210819F5, 0xF10BF909, 0xD80E1004);
	r3 = D(r3, s0_0_2, 0xFB16090D, 0xF808180C, 0x0001FEFD, 0xAB17F614);
	r4 = D(r4, s0_0_2, 0xFA1D0506, 0xEF120926, 0xFBE601EA, 0xF4F50B03);
	r5 = D(r5, s0_0_2, 0x0E00020A, 0x03EC2106, 0x03E700FB, 0xD40F1D0A);
	r6 = D(r6, s0_0_2, 0x1C0F0216, 0xE10F1100, 0x030A0CF5, 0xEB2BEF14);
	r7 = D(r7, s0_0_2, 0x0801FEFA, 0xEBFD0910, 0xF8FDF80D, 0x1FEFF8FE);
	r0 = D(r0, s0_1_0, 0xE9EF1C03, 0xF7FC0212, 0x121A0221, 0xD709DE23);
	r1 = D(r1, s0_1_0, 0x07160012, 0x1218F5DF, 0xF3E308EF, 0xEF22CCDF);
	r2 = D(r2, s0_1_0, 0xEFE80BF8, 0x172FD7F8, 0x060AFEFD, 0xEEDAEB0C);
	r3 = D(r3, s0_1_0, 0xE417F825, 0xFFC537E4, 0xF6FFFC0B, 0xFA36F4FC);
	r4 = D(r4, s0_1_0, 0x0EF318F8, 0xF41D130A, 0xF12AF9F8, 0x00F6FE04);
	r5 = D(r5, s0_1_0, 0xFEF7FD01, 0x0B02D00B, 0xF31D2101, 0xE4261813);
	r6 = D(r6, s0_1_0, 0xF7FC11ED, 0x0D08FE10, 0x16061900, 0x102A0FF8);
	r7 = D(r7, s0_1_0, 0x2A1516DD, 0xF1C9EE11, 0xF9F5F03B, 0x060F10EF);
	r0 = D(r0, s0_1_1, 0x0420061A, 0xF7FA0425, 0xFAF1184C, 0xCC1A8121);
	r1 = D(r1, s0_1_1, 0xE40908FB, 0xDBEFE525, 0xF6E7FFE7, 0xFABB1CF7);
	r2 = D(r2, s0_1_1, 0xE50ACF0D, 0xE20BFE05, 0xFC001A03, 0xFA0AE6B2);
	r3 = D(r3, s0_1_1, 0x0BF31EFE, 0xE70E21F5, 0x111408F3, 0xC8E9410F);
	r4 = D(r4, s0_1_1, 0xF7FF0A0E, 0x1D2B1A09, 0x03F5F700, 0x0FF604CE);
	r5 = D(r5, s0_1_1, 0xFE25EE0C, 0x00EB002C, 0xE6E409F9, 0x1DEBC115);
	r6 = D(r6, s0_1_1, 0xE617FDDF, 0xFE0C060E, 0xE4051805, 0x00CAFBF5);
	r7 = D(r7, s0_1_1, 0x0009FAF2, 0x2CFE333B, 0x030CEEF7, 0x1F000BF5);
	r0 = D(r0, s0_1_2, 0xECDC07FF, 0xF40F1203, 0x31E90BFE, 0xF2BEE5E7);
	r1 = D(r1, s0_1_2, 0x0DF20904, 0xFAB8240B, 0x0AF4F801, 0xCD28F3FB);
	r2 = D(r2, s0_1_2, 0x20FD1711, 0xFAE81024, 0x14EB0407, 0xFFE7FFF9);
	r3 = D(r3, s0_1_2, 0xEAFAF8FE, 0xFEF9F21A, 0x120EFBFA, 0xED071A15);
	r4 = D(r4, s0_1_2, 0x09FE0A1A, 0xFBFBFEFF, 0x16030214, 0xFC092118);
	r5 = D(r5, s0_1_2, 0xEE0B030C, 0x05000AF2, 0x091DCE04, 0x06FF0108);
	r6 = D(r6, s0_1_2, 0xF1F6FB18, 0xF2FAF4DA, 0x010DF2E5, 0x11FB0E38);
	r7 = D(r7, s0_1_2, 0xF108FFE9, 0x27FFF0E2, 0x0D0B1418, 0xE4E8000C);
	r0 = D(r0, s0_2_0, 0xE5F7FF0A, 0xF801F910, 0x03EBE5FC, 0x15FD25FD);
	r1 = D(r1, s0_2_0, 0x1116FC10, 0x1603D7D1, 0xE8EB11F6, 0x1202D70F);
	r2 = D(r2, s0_2_0, 0x120EF907, 0x0EFF03EF, 0x03FE1410, 0x0908DDF9);
	r3 = D(r3, s0_2_0, 0xF81DF302, 0x07E1081C, 0xF9050805, 0x120517F8);
	r4 = D(r4, s0_2_0, 0x1A1B0206, 0xF026D8DF, 0xFDF707E3, 0x0516F9F9);
	r5 = D(r5, s0_2_0, 0xF50AFCFD, 0xF6F61403, 0x20DE18F3, 0xEE1BE30F);
	r6 = D(r6, s0_2_0, 0xF10FFAC7, 0x0CFE0C22, 0x12F9DCE2, 0x180DFA0E);
	r7 = D(r7, s0_2_0, 0xEEE6FAF4, 0x10E013C2, 0x0F060717, 0xF7FCFA1E);
	r0 = D(r0, s0_2_1, 0x0E0AFECE, 0x1103FD0D, 0xF5000DB5, 0x33CA32C2);
	r1 = D(r1, s0_2_1, 0xEDE00F06, 0xE1F42603, 0x07ED0DE7, 0x20EEF0FA);
	r2 = D(r2, s0_2_1, 0xF6020AF4, 0xC2CEEB2F, 0xF6F80512, 0x1E010FD5);
	r3 = D(r3, s0_2_1, 0x0A12070C, 0x151C10DD, 0xF3F5EEFD, 0x35DF1EF0);
	r4 = D(r4, s0_2_1, 0xE51F23F2, 0xEA1DF4FC, 0x061FD7CB, 0x0E041981);
	r5 = D(r5, s0_2_1, 0x0E0304CD, 0xE9F91F14, 0xEC4B2A10, 0x1FE7E803);
	r6 = D(r6, s0_2_1, 0x0A050CE5, 0x13050423, 0xE51E0FE6, 0xF2DCF5E7);
	r7 = D(r7, s0_2_1, 0xFF08F9FD, 0x00F4E8DD, 0xFEFAFE13, 0xF80BE5EC);
	r0 = D(r0, s0_2_2, 0x1906EBF6, 0x0202FDF7, 0xF21B0406, 0xDEF9ADE4);
	r1 = D(r1, s0_2_2, 0x0AFDFCFB, 0x2103FC26, 0xE7F1E7E8, 0x0CBEFCE9);
	r2 = D(r2, s0_2_2, 0x140B1DF0, 0x35FD0902, 0xEA00FCF8, 0xFA1E0603);
	r3 = D(r3, s0_2_2, 0x08F6F6EE, 0xFF1FEFED, 0xFD03FA01, 0x0CFB0EF3);
	r4 = D(r4, s0_2_2, 0xF51C0BE8, 0xECC737E7, 0x1AFC0FEA, 0x001E26D2);
	r5 = D(r5, s0_2_2, 0x00E703F1, 0x0EF1F4FF, 0xF3FA28ED, 0xF900EA02);
	r6 = D(r6, s0_2_2, 0x110CFFEF, 0xF20006EB, 0xF6F40807, 0xF1081A2C);
	r7 = D(r7, s0_2_2, 0xFD0802FC, 0xF80118E2, 0x04FF07F2, 0xFEF9F8BE);
	r0 = D(r0, s1_0_0, 0x11EDE5F5, 0x05030D0D, 0x00D404DB, 0xE80FD7E6);
	r1 = D(r1, s1_0_0, 0xFCF9FB0D, 0x05D4F7EC, 0x0011D507, 0xF21153F2);
	r2 = D(r2, s1_0_0, 0x01E60301, 0xFDE818E6, 0x0AE8F519, 0x0B0DF8B8);
	r3 = D(r3, s1_0_0, 0xF8E7EDE7, 0xFC220302, 0x13F00306, 0xE8F20C02);
	r4 = D(r4, s1_0_0, 0x01FF0BE3, 0xEE1609C4, 0x07F70BE5, 0xFFF50AEE);
	r5 = D(r5, s1_0_0, 0xF80AFCF1, 0x0EF8010E, 0xFA0121FA, 0xDE35FAF9);
	r6 = D(r6, s1_0_0, 0x03DE08FC, 0x070417E6, 0xFAFB2F23, 0x0EF9F40E);
	r7 = D(r7, s1_0_0, 0x06F70505, 0x06E70408, 0x0002E20F, 0xF8D40431);
	r0 = D(r0, s1_0_1, 0x05FAE1FB, 0xFC1F0CEB, 0x00181EF4, 0xF914E1CF);
	r1 = D(r1, s1_0_1, 0x01F00604, 0x021129E2, 0x000BEF14, 0x0BF82AE7);
	r2 = D(r2, s1_0_1, 0x07E4EBF9, 0xF0EE0915, 0xFEE4F6FF, 0x0D0DCC1C);
	r3 = D(r3, s1_0_1, 0x05F812F3, 0x07261F04, 0x1407FBFC, 0x81073BF3);
	r4 = D(r4, s1_0_1, 0x0D0AEE09, 0x15F21D0F, 0xFA16FDE7, 0x0434F90D);
	r5 = D(r5, s1_0_1, 0xFCEE000F, 0x1EDBE808, 0xFDFD15ED, 0x0C13FA0D);
	r6 = D(r6, s1_0_1, 0xFE1DFF08, 0x030735E5, 0xF4FD02F0, 0xF510F3F4);
	r7 = D(r7, s1_0_1, 0xFF08FC04, 0x020DF606, 0xFFEF01D9, 0xF8050DF1);
	r0 = D(r0, s1_0_2, 0xFB1A0B1E, 0x03F9F113, 0xFEB9FBE6, 0xEC160612);
	r1 = D(r1, s1_0_2, 0xFCFB0CF4, 0x0C0BFB15, 0xF5F017E3, 0xF7F04BEF);
	r2 = D(r2, s1_0_2, 0xFF0BEA0F, 0x07ECF000, 0x0FF1F504, 0x1019F50D);
	r3 = D(r3, s1_0_2, 0x091C1FF4, 0x0DF3FAEE, 0x07070005, 0xD526CBEC);
	r4 = D(r4, s1_0_2, 0x0206020D, 0xEFFAF8E7, 0x070EF7F3, 0x072CFBFB);
	r5 = D(r5, s1_0_2, 0x0712FFFF, 0x0504140C, 0xFAF10710, 0x00C801EC);
	r6 = D(r6, s1_0_2, 0x0222030B, 0x04EE1CE8, 0x02001DEC, 0xFCF602FF);
	r7 = D(r7, s1_0_2, 0x00FFFE00, 0x0317FE03, 0x0807E7FA, 0xEA0F1AEE);
	r0 = D(r0, s1_1_0, 0x00070913, 0x00E3F5D9, 0x12FD0E1D, 0xF1D71D04);
	r1 = D(r1, s1_1_0, 0x01F8E306, 0xF11213E2, 0xF42311D9, 0x0A311C1D);
	r2 = D(r2, s1_1_0, 0x0B0CFC03, 0xF6F2DBE5, 0xED0D0DBE, 0xEFFE3F04);
	r3 = D(r3, s1_1_0, 0xF8DD0511, 0x03F148B5, 0x26F50309, 0x1EDD32F7);
	r4 = D(r4, s1_1_0, 0x060AB1F1, 0x01FBE1DE, 0x05ED172B, 0xF60504FB);
	r5 = D(r5, s1_1_0, 0xFCEEF300, 0x13FAFDFF, 0x07E15306, 0x13FE0712);
	r6 = D(r6, s1_1_0, 0xFEEA0319, 0xF7E72008, 0xF8F02029, 0xFC07FC1E);
	r7 = D(r7, s1_1_0, 0xFE3610D6, 0xF5E01108, 0xF6E30DE4, 0x0FD9F313);
	r0 = D(r0, s1_1_1, 0xFAE035DC, 0x10F781DB, 0xFCE62520, 0x21162114);
	r1 = D(r1, s1_1_1, 0x02232210, 0x09861BEE, 0xE5ED3E09, 0x02EDEB02);
	r2 = D(r2, s1_1_1, 0x122DF2F3, 0xEFFF1101, 0xFFF1E3FC, 0xF0FF130B);
	r3 = D(r3, s1_1_1, 0xF422011A, 0xFC0A9D0C, 0x1A1BF20B, 0x810A04FD);
	r4 = D(r4, s1_1_1, 0xFDFBB803, 0x1024000E, 0xF3E01B04, 0x120BCC05);
	r5 = D(r5, s1_1_1, 0x01EBE206, 0x21E93F0B, 0xF9EE39D5, 0x0A2007EE);
	r6 = D(r6, s1_1_1, 0xF902DC0C, 0xED27C51A, 0xFC1212EF, 0x07E00ED7);
	r7 = D(r7, s1_1_1, 0x02DFF002, 0x0EE0F809, 0xFFEDDE17, 0x0DF8E3D4);
	r0 = D(r0, s1_1_2, 0xF91C56E5, 0xF40DFF0D, 0xF950001A, 0x06DB19F5);
	r1 = D(r1, s1_1_2, 0x05F702F3, 0xFF107FF7, 0xDAC68105, 0x00E3010F);
	r2 = D(r2, s1_1_2, 0xF813FFF2, 0x17F12B28, 0xF722FF05, 0xF10605F8);
	r3 = D(r3, s1_1_2, 0xF7D103FF, 0xFB3FCB19, 0x13F3F6F9, 0x1D2125FF);
	r4 = D(r4, s1_1_2, 0xF51A040E, 0x03FE1325, 0xF9DFF3E2, 0x02FBF40B);
	r5 = D(r5, s1_1_2, 0xFAFB00ED, 0x0B12F0FA, 0x0D12F61B, 0x1016FB11);
	r6 = D(r6, s1_1_2, 0xFC0CF2EE, 0x00E8F008, 0x0A1E1E03, 0xFDD0E907);
	r7 = D(r7, s1_1_2, 0xFCE305FD, 0x030716F5, 0xFFE80D0F, 0x0801FAF9);
	r0 = D(r0, s1_2_0, 0xFA02C417, 0x031EFC00, 0x030CDAF0, 0x082417BF);
	r1 = D(r1, s1_2_0, 0xFDE82E02, 0xFCFF2514, 0xF2FCD90D, 0xFF11C019);
	r2 = D(r2, s1_2_0, 0xF3F781F1, 0x191FAAC2, 0x0608240A, 0xFCFA010F);
	r3 = D(r3, s1_2_0, 0x10F0F0F5, 0xFCE1FBDC, 0x0EF618F6, 0x02F4EA03);
	r4 = D(r4, s1_2_0, 0xF1F600FD, 0x02E003EF, 0x0CF3FA20, 0x03F201D3);
	r5 = D(r5, s1_2_0, 0x06FC0C11, 0x18037FE0, 0xFA3CE01C, 0x05DBB8F0);
	r6 = D(r6, s1_2_0, 0xFA17D7F4, 0x19D9F1EC, 0x1326CBF7, 0xF3FCF0E5);
	r7 = D(r7, s1_2_0, 0x03FDFA01, 0xEC44EAF8, 0x001FF90C, 0x05101A0F);
	r0 = D(r0, s1_2_1, 0x0507D9E4, 0xF6EB070B, 0xF120C916, 0x1FD9E810);
	r1 = D(r1, s1_2_1, 0x0201F712, 0x041DE80C, 0xF9F6401B, 0xEEEFF5EA);
	r2 = D(r2, s1_2_1, 0xFB08810F, 0xF72A961D, 0x01140F0E, 0x00F943E1);
	r3 = D(r3, s1_2_1, 0x0AE61018, 0x05F81C3E, 0x2E0B09F5, 0xCBE9FD0D);
	r4 = D(r4, s1_2_1, 0x00DFE8DB, 0xF817D430, 0xFAFC08F5, 0xFCE7F131);
	r5 = D(r5, s1_2_1, 0x022EED18, 0x13F541F4, 0x11E929E6, 0xF906E1F2);
	r6 = D(r6, s1_2_1, 0x0CE60E0D, 0xF80317F1, 0xF9E7AC0B, 0x02370AF3);
	r7 = D(r7, s1_2_1, 0x00130BF9, 0x03048101, 0x0AFAF6FF, 0x00F4EE1C);
	r0 = D(r0, s1_2_2, 0xFC161729, 0x00080906, 0x09EC1FEE, 0xE0D4CC00);
	r1 = D(r1, s1_2_2, 0xFEF7FB06, 0xF91CE12B, 0xE9100323, 0xEFFD010B);
	r2 = D(r2, s1_2_2, 0xFB0628FC, 0xFD331A4A, 0x0803FC04, 0x0DF20503);
	r3 = D(r3, s1_2_2, 0xFCF3F4F4, 0xF7E9DB17, 0x110706FF, 0xF7EC10E4);
	r4 = D(r4, s1_2_2, 0x0A090704, 0x01082907, 0x091FF613, 0xEE0C0C0C);
	r5 = D(r5, s1_2_2, 0x08F412F3, 0x08041B04, 0xF9180C08, 0xEF0600ED);
	r6 = D(r6, s1_2_2, 0x04F0F400, 0x09EF08FD, 0x0709DF0C, 0x08022E2E);
	r7 = D(r7, s1_2_2, 0xFD0704FB, 0x03FBEFD6, 0xFD0FED08, 0x0010F300);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xD1FA071A, 0xF402F5F9, 0x120D31D9, 0xF1DF0105);
	r1 = D(r1, s0_0_0, 0xF3F11002, 0x2DF609F2, 0x1AF813EA, 0x19D81BEB);
	r2 = D(r2, s0_0_0, 0xECFFEDFE, 0x9A07FAD5, 0x06090006, 0x0E0FFA13);
	r3 = D(r3, s0_0_0, 0x16F627F4, 0x1A11E9E7, 0x1B04FB07, 0x1EF20307);
	r4 = D(r4, s0_0_0, 0xD9FF22FD, 0x0F22FE0D, 0xC909DCFD, 0xFF11120E);
	r5 = D(r5, s0_0_0, 0xF10FF905, 0xEFFD03FB, 0x15F4FFFE, 0xFCF0F719);
	r6 = D(r6, s0_0_0, 0xF9F90CFA, 0xF60508FF, 0xF0111010, 0xE3F609F0);
	r7 = D(r7, s0_0_0, 0xF203F203, 0x0C2AE926, 0xF5FF0308, 0xED0A0D02);
	r0 = D(r0, s0_0_1, 0x19EA141A, 0xF3FB1AFF, 0x14F728EE, 0x06EA1EF2);
	r1 = D(r1, s0_0_1, 0xF505FBFD, 0xFD08F6FC, 0x0CE9F5FE, 0x1DF50FE1);
	r2 = D(r2, s0_0_1, 0x0017ED13, 0x8FDEF10F, 0x1404F7F9, 0xF613F9FE);
	r3 = D(r3, s0_0_1, 0xE4110B05, 0xF9480124, 0xD2050CF6, 0x27FBF405);
	r4 = D(r4, s0_0_1, 0x210F0012, 0x0C29FBFB, 0x130FE515, 0xF712EE10);
	r5 = D(r5, s0_0_1, 0xFE06FD00, 0x1EF50BCD, 0xC5FBD9D0, 0x21E2E5F1);
	r6 = D(r6, s0_0_1, 0x070BDBF6, 0xFC02F803, 0xF9FA160E, 0x0EE60202);
	r7 = D(r7, s0_0_1, 0x17F5230B, 0x12ECEA2E, 0xE5F028D6, 0x1D2522FB);
	r0 = D(r0, s0_0_2, 0xB8F9D609, 0x1CF50101, 0x26EFE7F5, 0xF0EFECD3);
	r1 = D(r1, s0_0_2, 0x03031300, 0xFFD81AF2, 0xED02F5F9, 0xF1CF0AC2);
	r2 = D(r2, s0_0_2, 0x210EEFF2, 0x81F8DE18, 0x03EA0E06, 0xF90D09B7);
	r3 = D(r3, s0_0_2, 0xFC190AE7, 0x121EE8DB, 0xF3FC07FB, 0x0B0705FB);
	r4 = D(r4, s0_0_2, 0xEAF5E80A, 0x0C2803D1, 0x1A12FAF7, 0xE8FC00FF);
	r5 = D(r5, s0_0_2, 0xFF04EF09, 0x16FB1AEB, 0x15FF16F0, 0x17EEEAFE);
	r6 = D(r6, s0_0_2, 0xF4F9DA05, 0x0BF1FB05, 0x0BF4EE23, 0xC4EACB1B);
	r7 = D(r7, s0_0_2, 0x050AE6FA, 0xEFFFFEF7, 0xFE0EE40C, 0xD8ED0113);
	r0 = D(r0, s0_1_0, 0x45E7F110, 0x1400F10C, 0xFEC4F0D7, 0x2BFB1EE2);
	r1 = D(r1, s0_1_0, 0x081FFE17, 0xFB32FFF6, 0x0C021803, 0x30DB0512);
	r2 = D(r2, s0_1_0, 0xDD000B01, 0xD6270B08, 0xE2050405, 0x8109FB04);
	r3 = D(r3, s0_1_0, 0xE1F8F80C, 0xF62DD2FA, 0x0500FF09, 0xEF0EE6CD);
	r4 = D(r4, s0_1_0, 0x18E0F314, 0x2EDDBEE4, 0x810216F2, 0x00FA18F3);
	r5 = D(r5, s0_1_0, 0x21090802, 0x9D19EE04, 0xE9FFC215, 0xA1EA1722);
	r6 = D(r6, s0_1_0, 0x050123E6, 0xEE0313F8, 0xF80FEA12, 0xE7D5050F);
	r7 = D(r7, s0_1_0, 0xF0ED20F3, 0xDFFCF715, 0x07AFFDE8, 0x3B170008);
	r0 = D(r0, s0_1_1, 0x47F2DEF9, 0x04ECF9FC, 0xECB4E616, 0xB90CC523);
	r1 = D(r1, s0_1_1, 0xF61301F8, 0x1E1D9504, 0x52F9F7F5, 0x29F3FAE7);
	r2 = D(r2, s0_1_1, 0x0A08F6C0, 0x81FA0A35, 0x00080DEB, 0x0338E408);
	r3 = D(r3, s0_1_1, 0xE3E91311, 0x24FAD8F0, 0x0003FF08, 0x110BF5F6);
	r4 = D(r4, s0_1_1, 0x27EDFCF0, 0x1116C6D2, 0x81B1001A, 0x8126F7FF);
	r5 = D(r5, s0_1_1, 0xF1EF1805, 0xDB04F300, 0xE80BEA03, 0x81D31548);
	r6 = D(r6, s0_1_1, 0x1AFA01FB, 0xF2E71027, 0xE31111DC, 0x20E61EF9);
	r7 = D(r7, s0_1_1, 0xF9EDF70B, 0x10C4055B, 0xD7E2FEF7, 0x6020180A);
	r0 = D(r0, s0_1_2, 0x15FAD1F2, 0xED051700, 0xAC31FA44, 0x1E0DE018);
	r1 = D(r1, s0_1_2, 0x1209EA0A, 0xEBED1FC8, 0x492FC902, 0xD30DFF03);
	r2 = D(r2, s0_1_2, 0xF5E5EC19, 0x0200E2E6, 0xFDFCFC17, 0x1915D801);
	r3 = D(r3, s0_1_2, 0x38FE0BDF, 0xFA00FA45, 0xF4F7F80D, 0xF52CEA20);
	r4 = D(r4, s0_1_2, 0xF4EB0B08, 0x010044CF, 0xE115E40A, 0xA4D7F708);
	r5 = D(r5, s0_1_2, 0xFCF60AF8, 0x1EEA13E6, 0xEF06001C, 0x09E4B9F7);
	r6 = D(r6, s0_1_2, 0xF3FAFDF5, 0xDDF60A1C, 0x0909192B, 0x14D5DF06);
	r7 = D(r7, s0_1_2, 0x0E0307F6, 0xC60BE7D2, 0xEF1FF9EB, 0xD7130FCD);
	r0 = D(r0, s0_2_0, 0x84172100, 0xFE0101FB, 0x062525C4, 0xFFD7140A);
	r1 = D(r1, s0_2_0, 0x0A170400, 0xFCD92F3D, 0x1DFBF10F, 0x1AF7E8E5);
	r2 = D(r2, s0_2_0, 0xE2DD100E, 0x02ED02FE, 0x0AE7F50D, 0x03EBF9F5);
	r3 = D(r3, s0_2_0, 0xEF07F0ED, 0x1B17F010, 0xFE0902FC, 0xF5091DFF);
	r4 = D(r4, s0_2_0, 0xF9FA120C, 0xE745DBD9, 0xDC0A2004, 0x7F0106F5);
	r5 = D(r5, s0_2_0, 0xFC0007FF, 0x27FD04F9, 0x4134FE24, 0xD9DA010C);
	r6 = D(r6, s0_2_0, 0x130E4803, 0x2608FBF9, 0x12F00EFF, 0xDDE40012);
	r7 = D(r7, s0_2_0, 0x051FF903, 0x06A20E08, 0xFAD70AFF, 0xE320F3E3);
	r0 = D(r0, s0_2_1, 0x81E1FFF0, 0x0EF209FD, 0x2D01FD22, 0x32D3F62D);
	r1 = D(r1, s0_2_1, 0xE0E9FCF9, 0xFA01DE28, 0x03E9FBEC, 0xE117EE0A);
	r2 = D(r2, s0_2_1, 0xD8F4120A, 0xFB14E913, 0x160302F5, 0x4500E8F3);
	r3 = D(r3, s0_2_1, 0x1CD01DF5, 0xD9E01603, 0x18FB0517, 0x30FDF932);
	r4 = D(r4, s0_2_1, 0xF4E81703, 0xEAD73BD6, 0x321117E8, 0x16FB20E0);
	r5 = D(r5, s0_2_1, 0xFFF70EF2, 0xE61304EE, 0x09E8B9D1, 0x0DD90AF6);
	r6 = D(r6, s0_2_1, 0xD8F706F1, 0xEA2E1D08, 0xFFF0EFFE, 0x14C6FDD8);
	r7 = D(r7, s0_2_1, 0xFD2D0308, 0x39E12C20, 0x2A2A0E00, 0x1E0B0CF7);
	r0 = D(r0, s0_2_2, 0xBF3D07DC, 0xFAFBFD08, 0x3505DED1, 0x11C012B2);
	r1 = D(r1, s0_2_2, 0x060A010B, 0x05000005, 0x111B13C3, 0xA6F1F4DB);
	r2 = D(r2, s0_2_2, 0x10F916F6, 0x0AF5F21A, 0x05012204, 0x0FF215DF);
	r3 = D(r3, s0_2_2, 0xF90207EA, 0xEED40C19, 0xF2170201, 0x0BFBBD3B);
	r4 = D(r4, s0_2_2, 0xEFF2FA01, 0xE3F4A2DE, 0xEFFC0F15, 0x03F20FE8);
	r5 = D(r5, s0_2_2, 0x1F0FF4FF, 0x35EDEEF0, 0x200B1017, 0xFAC814DE);
	r6 = D(r6, s0_2_2, 0x17050903, 0x12ECFDF1, 0x3318160E, 0x06E90419);
	r7 = D(r7, s0_2_2, 0xFAFAFB09, 0xE7213BFE, 0x12F514F3, 0xE4151CEA);
	r0 = D(r0, s1_0_0, 0x0520F4E0, 0xE8080E18, 0xB02526F8, 0x211007FE);
	r1 = D(r1, s1_0_0, 0x04F201FE, 0x12E8F6FD, 0xF5000A17, 0xE800ECCF);
	r2 = D(r2, s1_0_0, 0x110F001C, 0xC5E4EFEE, 0xF4020501, 0x3E2C0E03);
	r3 = D(r3, s1_0_0, 0xEBEF20FA, 0xDB2EF024, 0xFF040104, 0x0CF61DD4);
	r4 = D(r4, s1_0_0, 0x17FFEBF7, 0x1E1717F0, 0x0706171D, 0xFD070E01);
	r5 = D(r5, s1_0_0, 0x01FFFE01, 0x12020004, 0x0501FA1E, 0x42F2F3E5);
	r6 = D(r6, s1_0_0, 0x040FF805, 0x09F803EE, 0xEFF6F4F2, 0xECF5010E);
	r7 = D(r7, s1_0_0, 0x0D0AFCF9, 0xF90BF820, 0xF0091E1E, 0xF8F30EEC);
	r0 = D(r0, s1_0_1, 0xD11D02E6, 0x150BFBE9, 0xF73FFD04, 0x3B0F1CF6);
	r1 = D(r1, s1_0_1, 0x0DFC0AF0, 0xFEF6F3CB, 0x17D8E105, 0x08122C00);
	r2 = D(r2, s1_0_1, 0x0907EC22, 0xF9DA18DA, 0xF80012FC, 0x4404F727);
	r3 = D(r3, s1_0_1, 0xF6F8F126, 0xDCC2F40D, 0xF81E0603, 0x151BD32F);
	r4 = D(r4, s1_0_1, 0xF3EF0710, 0xFAFF0933, 0x29F4E308, 0xFE12020F);
	r5 = D(r5, s1_0_1, 0xF3F3FD06, 0x1700F004, 0x2F1FFCC2, 0x06E50E3A);
	r6 = D(r6, s1_0_1, 0xEAD5F921, 0x09020FF6, 0xDCD3F8FE, 0xF4F90AEF);
	r7 = D(r7, s1_0_1, 0xFA11EF0A, 0x0AD2CF17, 0x16D91FF7, 0xECDA36D4);
	r0 = D(r0, s1_0_2, 0x0FCC03F0, 0x06E709EF, 0xFAA7EC13, 0xFE0604EE);
	r1 = D(r1, s1_0_2, 0x07190600, 0xFC154CE9, 0x1AC3ECFD, 0x1404F4F6);
	r2 = D(r2, s1_0_2, 0x12FAF50A, 0xECEA0CFF, 0x00EF0B0A, 0x1A14F30B);
	r3 = D(r3, s1_0_2, 0x0DE3EA0F, 0x0425FAFE, 0x00F50806, 0x1AFCD2F8);
	r4 = D(r4, s1_0_2, 0x10B9F004, 0xF0E7EF19, 0x0A24F915, 0x06F3020E);
	r5 = D(r5, s1_0_2, 0xFFE50503, 0x0802FC03, 0xF5160DFD, 0xECF4EC0B);
	r6 = D(r6, s1_0_2, 0xFEF5F1F9, 0x03E9FAFD, 0x05ED0A03, 0x13B51207);
	r7 = D(r7, s1_0_2, 0x05F2FB02, 0x00E1F60D, 0x17F41807, 0xE2EE16F7);
	r0 = D(r0, s1_1_0, 0x2B14E809, 0x16F5FEB4, 0xFC3EF139, 0xFC04FB01);
	r1 = D(r1, s1_1_0, 0xEDF41240, 0xFF06F159, 0xFA1CF102, 0x110AF0E2);
	r2 = D(r2, s1_1_0, 0x2DF90713, 0xF702F5E9, 0xD8FEED12, 0x52FF0CC5);
	r3 = D(r3, s1_1_0, 0x15EA05EF, 0x191A1003, 0xEC03F41E, 0x050A1727);
	r4 = D(r4, s1_1_0, 0x29E6F1D6, 0x7225FFDC, 0x17F90523, 0xEC07EF06);
	r5 = D(r5, s1_1_0, 0x1EF6F0E0, 0x04F80CF4, 0xFFDA0E24, 0x21FBE3D8);
	r6 = D(r6, s1_1_0, 0x43F8F8D6, 0x0606FBF1, 0xDEEBEA02, 0xDEF2ED1A);
	r7 = D(r7, s1_1_0, 0x060CE1D5, 0xD41036D6, 0x01FC190D, 0x011017EF);
	r0 = D(r0, s1_1_1, 0x0A1DFF19, 0xEE1B0E45, 0x641708FF, 0x6B30D9F4);
	r1 = D(r1, s1_1_1, 0x2404C8F3, 0xD9BBDE44, 0x31F2E7CC, 0x20CF0C39);
	r2 = D(r2, s1_1_1, 0xF8F9021F, 0x2BF7013B, 0x0CFFF516, 0x470212F6);
	r3 = D(r3, s1_1_1, 0x010C150A, 0x1C1F110F, 0x0DFDFAE8, 0x55F319DC);
	r4 = D(r4, s1_1_1, 0x0AEBF009, 0xC135234B, 0xFDE80BFD, 0xF53125DD);
	r5 = D(r5, s1_1_1, 0xE4F70711, 0x1BFF0618, 0x1901BB9D, 0x3BDC1401);
	r6 = D(r6, s1_1_1, 0xE30101EA, 0x33F2E7E2, 0xF4CE2BF8, 0xE0180702);
	r7 = D(r7, s1_1_1, 0xF9E80324, 0x25C51DD1, 0x0EE48CD9, 0x0D1E14B8);
	r0 = D(r0, s1_1_2, 0x12E512D2, 0xF5370101, 0x05DD3FC4, 0x1FF109E7);
	r1 = D(r1, s1_1_2, 0x05DC11FD, 0x050614F2, 0x16FC23FD, 0x07F6F82D);
	r2 = D(r2, s1_1_2, 0x04810403, 0x27CAE407, 0x07D70C08, 0x01261A13);
	r3 = D(r3, s1_1_2, 0xFA0CD915, 0x0E023603, 0x00CC0901, 0x2A07CFD1);
	r4 = D(r4, s1_1_2, 0x0FCBEB0A, 0xF013EEED, 0x04430C0A, 0xF4902CFD);
	r5 = D(r5, s1_1_2, 0x05F81503, 0x05280C00, 0xDD07FF14, 0xF581FD21);
	r6 = D(r6, s1_1_2, 0x0AFC1EFD, 0x0EDF1FF6, 0x169114E2, 0x08B702FD);
	r7 = D(r7, s1_1_2, 0x002801FA, 0x02081DFA, 0x03FD19FF, 0x002CE6C7);
	r0 = D(r0, s1_2_0, 0xF7D41232, 0xE3FD041A, 0xFA190615, 0xD2E0053C);
	r1 = D(r1, s1_2_0, 0x0107F6CC, 0xEFF7E00D, 0x040B031A, 0x97190424);
	r2 = D(r2, s1_2_0, 0xEBF3130A, 0xED17F6CC, 0xFE04D918, 0xE90204F1);
	r3 = D(r3, s1_2_0, 0xE8FA12ED, 0x4705FED0, 0x01FE03DD, 0xF50A000B);
	r4 = D(r4, s1_2_0, 0xCFF11F04, 0xD70D1831, 0xBDF22DFA, 0x0A15D70A);
	r5 = D(r5, s1_2_0, 0xE305F335, 0xF519FEED, 0xE5FC42C6, 0x13FF13B1);
	r6 = D(r6, s1_2_0, 0xFC07FCFD, 0x0D13F1D9, 0xED03C51E, 0x03050006);
	r7 = D(r7, s1_2_0, 0xDEFB050C, 0x08110C26, 0x0B0426D5, 0xE707ED24);
	r0 = D(r0, s1_2_1, 0xFCFFFAF7, 0x1703D6E9, 0xF1F210F3, 0xD8140E07);
	r1 = D(r1, s1_2_1, 0xF9EED90C, 0x3EFD25EA, 0x1BEEEF3D, 0x06090822);
	r2 = D(r2, s1_2_1, 0x0DECF32E, 0x08FE13E3, 0xE8FE0EFA, 0xC7F4CA06);
	r3 = D(r3, s1_2_1, 0x000EE715, 0x210EFC81, 0xF605EB11, 0x0AF0073F);
	r4 = D(r4, s1_2_1, 0xEDC41CD2, 0xEAF8EA9C, 0x1A1AECD4, 0xEB0701EE);
	r5 = D(r5, s1_2_1, 0x13FE17C6, 0xFFFA1110, 0x2CF5E7EB, 0x6BFA1404);
	r6 = D(r6, s1_2_1, 0x2EF220C6, 0xFD05F6DF, 0x232E0711, 0xF70814EF);
	r7 = D(r7, s1_2_1, 0x1E1135FA, 0xEA03C71F, 0xE5E7B11C, 0xFF10A7CF);
	r0 = D(r0, s1_2_2, 0x14D60BCD, 0xFE020BFC, 0xFF1081F6, 0xF72094D6);
	r1 = D(r1, s1_2_2, 0x01FBF4F9, 0x1FE7030A, 0x14FC21E6, 0x0A0EE2EF);
	r2 = D(r2, s1_2_2, 0x0CFAF8F2, 0x3F144713, 0xFE07F6EC, 0xE0120C15);
	r3 = D(r3, s1_2_2, 0xF70EEA04, 0xFDD110EE, 0x02060008, 0xF8DB1B20);
	r4 = D(r4, s1_2_2, 0x08DE1BEC, 0xF1C29E09, 0x032806EF, 0xF30DCB0E);
	r5 = D(r5, s1_2_2, 0x14CCFB01, 0x140B09F7, 0x01E8D10C, 0x1DDA01EF);
	r6 = D(r6, s1_2_2, 0x1BDB05F1, 0x0D1610E8, 0xFCE3EDF2, 0x0BF0FAE9);
	r7 = D(r7, s1_2_2, 0xF8050408, 0xFB3EEC06, 0xEC25FC03, 0xE827F9FD);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x1DEB0903, 0x07030A0A, 0x3106E5F1, 0x17F73B11);
	r1 = D(r1, s0_0_0, 0xE71BFDF5, 0x0203DFF5, 0x07CA31DC, 0xE922F749);
	r2 = D(r2, s0_0_0, 0x26F40D0D, 0xF01B0DF5, 0xF7F6F5F0, 0x261AEFFF);
	r3 = D(r3, s0_0_0, 0xDB12F10E, 0x129F4F19, 0xFE0407FF, 0xD5E71DF1);
	r4 = D(r4, s0_0_0, 0x1A0D0411, 0x1D03C016, 0xE5DCF346, 0xE8020AE1);
	r5 = D(r5, s0_0_0, 0xF90207F8, 0x0AFAE7F4, 0xD0010301, 0x0E03D610);
	r6 = D(r6, s0_0_0, 0x0016010A, 0xFAF6FCF5, 0xD5F8E4F6, 0xEF08F9F1);
	r7 = D(r7, s0_0_0, 0x14E10D15, 0xFA00DF0E, 0xF21AE9F3, 0xF4F32A1E);
	r0 = D(r0, s0_0_1, 0xF7000822, 0x04FC220D, 0x0AF4070F, 0xDC522DCD);
	r1 = D(r1, s0_0_1, 0x0F24F8DB, 0xF30BE912, 0xF9CB230E, 0x9916EC15);
	r2 = D(r2, s0_0_1, 0x18EECA0B, 0x052803E0, 0x0BF3FDFD, 0x0B1F04DA);
	r3 = D(r3, s0_0_1, 0xE410DB15, 0xF5D9C2F2, 0x041503F0, 0x0DD51B09);
	r4 = D(r4, s0_0_1, 0x0635E3F9, 0xF8EBC7E8, 0x179907AE, 0x1306EEE8);
	r5 = D(r5, s0_0_1, 0xF2F1EC1B, 0xFCF3FBFB, 0xEC140A1B, 0x1919DBF9);
	r6 = D(r6, s0_0_1, 0xEEC9F004, 0xAFF105F3, 0x0228F3FB, 0x09AD0118);
	r7 = D(r7, s0_0_1, 0xF3E20427, 0x1AF4F139, 0x0CFC0A18, 0x20FFED1D);
	r0 = D(r0, s0_0_2, 0x0BAB0CF1, 0x19FD050F, 0x40F3F43B, 0x074235A5);
	r1 = D(r1, s0_0_2, 0x100F0A01, 0x1E0C1419, 0x16001213, 0xE9101010);
	r2 = D(r2, s0_0_2, 0x12EDFD4A, 0x01050AC4, 0x0F0D0746, 0xEFFC26F9);
	r3 = D(r3, s0_0_2, 0xD8152421, 0x0700E52E, 0x02EEFD25, 0xDF08285D);
	r4 = D(r4, s0_0_2, 0x09E7FB02, 0xFC0912BF, 0xFDEB180A, 0xFCD3FE81);
	r5 = D(r5, s0_0_2, 0xF3F8021B, 0xFADFF5F1, 0x04F3EC02, 0xF0D014BA);
	r6 = D(r6, s0_0_2, 0xD7F90AF3, 0x0C2906DD, 0x2BF4E4FE, 0x0FB1F5DB);
	r7 = D(r7, s0_0_2, 0xF9F9090A, 0x05FEECDD, 0x1302F913, 0x130AEA04);
	r0 = D(r0, s0_1_0, 0xF9FFF602, 0xF0F5F4F8, 0xFFECF503, 0x10020BE2);
	r1 = D(r1, s0_1_0, 0xE500EADA, 0xF91E1C12, 0x2A1300F3, 0xEBD501EF);
	r2 = D(r2, s0_1_0, 0xED0E17E4, 0x0DFEF8FD, 0x0F0CF106, 0xBFDA13D1);
	r3 = D(r3, s0_1_0, 0xEAEFCE2D, 0xD5E8EE0C, 0xF201FF02, 0xEDE6180D);
	r4 = D(r4, s0_1_0, 0x0C0F1DF5, 0xFFC70211, 0xDFFD051A, 0x00FEE8F3);
	r5 = D(r5, s0_1_0, 0xF508F5EE, 0xFF050910, 0xFCED021E, 0x2808040E);
	r6 = D(r6, s0_1_0, 0x08E9FA08, 0x17F9E5F9, 0xD20CEDDF, 0x150F2309);
	r7 = D(r7, s0_1_0, 0x1EE9122E, 0xDDF316E6, 0xEC10FCEF, 0xE2E034D9);
	r0 = D(r0, s0_1_1, 0xFAFA1037, 0xD806D2F4, 0xA7112FC2, 0x27E20EFB);
	r1 = D(r1, s0_1_1, 0x01FD1706, 0x4ECEDA6A, 0xF7120A10, 0x03E10181);
	r2 = D(r2, s0_1_1, 0x17F826E8, 0x0ACCFDF6, 0xF0F72BF8, 0xE2EEFED0);
	r3 = D(r3, s0_1_1, 0x1CFEDFFB, 0xD93D0FFC, 0x1F021B13, 0xFCF6FCFA);
	r4 = D(r4, s0_1_1, 0x1F1012AD, 0xDAE6CDFD, 0x1DC5F00D, 0xF7EB341E);
	r5 = D(r5, s0_1_1, 0xEEFCE4D8, 0x03DDF4FB, 0xECEEE7E5, 0xF8062405);
	r6 = D(r6, s0_1_1, 0xF7F8DD53, 0xF1F3DE1A, 0xC20B08E7, 0xFF250959);
	r7 = D(r7, s0_1_1, 0x1EF2D6ED, 0x192B3425, 0xFEEE0229, 0x01FCD61F);
	r0 = D(r0, s0_1_2, 0x03FCFCB7, 0xFC0100F8, 0x0AEEFC13, 0x0219DEF3);
	r1 = D(r1, s0_1_2, 0xF9F402F5, 0x9EF0FAD9, 0x07B98319, 0xF020E51E);
	r2 = D(r2, s0_1_2, 0x0900DF00, 0xECDEFA0C, 0x0A1BE504, 0xE5F70000);
	r3 = D(r3, s0_1_2, 0x0EEBD80E, 0xC33206E8, 0x1600FC13, 0xE91D0E2E);
	r4 = D(r4, s0_1_2, 0xEAF9FF36, 0xF826F2F7, 0x1D10F7F0, 0xECD5CD81);
	r5 = D(r5, s0_1_2, 0xF80BFDE6, 0x12FD03F5, 0x21F0D119, 0x2B4502FC);
	r6 = D(r6, s0_1_2, 0xF817F6F3, 0x211BED07, 0x08EBF7E8, 0x1DF6F9A1);
	r7 = D(r7, s0_1_2, 0x12F2F30C, 0x1CE11113, 0x09F0FE04, 0xDDF32314);
	r0 = D(r0, s0_2_0, 0x23060FFD, 0x0BFD0106, 0x1F0CDEFE, 0x082921E3);
	r1 = D(r1, s0_2_0, 0xE0FFF203, 0xEDF8F230, 0x0CF71BEC, 0x1BF40FE9);
	r2 = D(r2, s0_2_0, 0xD41A0404, 0xFC0313E7, 0x0B18EEFA, 0x1320F1F2);
	r3 = D(r3, s0_2_0, 0xE7001BFB, 0xDD19D3F3, 0x050003FE, 0xF9E7FFFC);
	r4 = D(r4, s0_2_0, 0x150B020F, 0xFE0510F0, 0xDF06C410, 0x03150BFA);
	r5 = D(r5, s0_2_0, 0x0AF7FF0C, 0xDF000400, 0x0DFF0EF2, 0x090CF10C);
	r6 = D(r6, s0_2_0, 0x07FE2F04, 0x0708FC16, 0xE5300AFE, 0x3715FE09);
	r7 = D(r7, s0_2_0, 0x2201F90F, 0xD9190715, 0x0E07FE01, 0xF1EDFAFD);
	r0 = D(r0, s0_2_1, 0x1A15F1D6, 0xE1FFFFF7, 0xFC07F005, 0x1108DFED);
	r1 = D(r1, s0_2_1, 0x04FE03FB, 0x21001B0C, 0xFD1520EA, 0xDFEC32EA);
	r2 = D(r2, s0_2_1, 0xB01E1AF6, 0xF91922ED, 0x1B030BF5, 0xC900F642);
	r3 = D(r3, s0_2_1, 0xEA020DFA, 0xF4020CE6, 0xEA0E01FB, 0x1A1B17FA);
	r4 = D(r4, s0_2_1, 0xB6111D4D, 0x98FD131C, 0x15E104F9, 0xDAEB1302);
	r5 = D(r5, s0_2_1, 0x4B1F3824, 0xDFFAEDFB, 0xD6F539EE, 0x091C1A0A);
	r6 = D(r6, s0_2_1, 0x1A261609, 0x01F4E106, 0xC013000D, 0x06190A13);
	r7 = D(r7, s0_2_1, 0xE20400FC, 0xF31BDAF3, 0x17FB0F0D, 0x0F13A606);
	r0 = D(r0, s0_2_2, 0xF42CE11C, 0x0709F5FF, 0xD60DFBFB, 0x19C2085F);
	r1 = D(r1, s0_2_2, 0x0F020105, 0x1A100D08, 0xF10B1457, 0x20F728E7);
	r2 = D(r2, s0_2_2, 0xD005E042, 0x28062400, 0x04130118, 0x0BEBFBD8);
	r3 = D(r3, s0_2_2, 0x100AF91B, 0x10000830, 0xFF01F3FB, 0xF4F7F808);
	r4 = D(r4, s0_2_2, 0xEAFCE722, 0xC507F5F2, 0xFB0FFFEE, 0x1017D818);
	r5 = D(r5, s0_2_2, 0x0B14FC0A, 0xFBFC020A, 0x20F6E704, 0x36E8EC14);
	r6 = D(r6, s0_2_2, 0x1AEEF821, 0x0E120BF7, 0x140DE319, 0x05FEEEC5);
	r7 = D(r7, s0_2_2, 0xF50D05FA, 0xF8F4FDBB, 0xF4070609, 0x1107F4F9);
	r0 = D(r0, s1_0_0, 0x1BF90D05, 0xF60BFEFC, 0xD113FA02, 0xE9EA19D0);
	r1 = D(r1, s1_0_0, 0xFF1302F2, 0xF6FEFDFC, 0x0007000D, 0xF00FFC17);
	r2 = D(r2, s1_0_0, 0x01F90D09, 0xFB10DF0C, 0x14120BF2, 0xE7DE1CD2);
	r3 = D(r3, s1_0_0, 0xDDEB0305, 0xEACCF6FB, 0x07FC0DEA, 0xCF0211DA);
	r4 = D(r4, s1_0_0, 0x02E7081B, 0xE4DD331A, 0xEAEEFB1A, 0x01F51217);
	r5 = D(r5, s1_0_0, 0x0C040406, 0x041B08F4, 0xF6E3F0F0, 0x1C0BF7EB);
	r6 = D(r6, s1_0_0, 0x0B0A11F8, 0x03E6EFFA, 0x1FDEE43B, 0x06E5FFE0);
	r7 = D(r7, s1_0_0, 0xFCEA2701, 0x05A51016, 0xC63006DE, 0xECEA0015);
	r0 = D(r0, s1_0_1, 0x1502F6EB, 0x06F92921, 0xF018221E, 0x16E709CD);
	r1 = D(r1, s1_0_1, 0xF789051C, 0xE7D8ECFD, 0x0D041C07, 0xC9F00CEE);
	r2 = D(r2, s1_0_1, 0xFD11F214, 0x031D2BE1, 0xF30D10F6, 0x4C140EBE);
	r3 = D(r3, s1_0_1, 0xFAEB180F, 0x01DC2C12, 0xFE160207, 0x061D0429);
	r4 = D(r4, s1_0_1, 0x1CFBDFEF, 0x031AD5CD, 0xEE1210EA, 0xF22B01FB);
	r5 = D(r5, s1_0_1, 0x000CFBF7, 0x1EE9FCF5, 0x2013220E, 0xFCE1D6AF);
	r6 = D(r6, s1_0_1, 0x0C11D7EC, 0x17241FDD, 0xF709D804, 0xFE08FF14);
	r7 = D(r7, s1_0_1, 0x0707F2FE, 0x0BCDEBF6, 0x81B0F5F7, 0xEED80836);
	r0 = D(r0, s1_0_2, 0xE816F700, 0xE0F8F400, 0xD9FF18FB, 0x062205F8);
	r1 = D(r1, s1_0_2, 0xF105FDFF, 0x81E703E7, 0x063D20E8, 0xF3F4EF09);
	r2 = D(r2, s1_0_2, 0xFA32E10E, 0x0B0C03F9, 0xED1B09F5, 0x2ECEF112);
	r3 = D(r3, s1_0_2, 0x1EF10B03, 0xEA1910F9, 0xFCECFF00, 0xF4DF15C9);
	r4 = D(r4, s1_0_2, 0x040C0101, 0x0C7FD011, 0x07E8F316, 0xFAF7FE08);
	r5 = D(r5, s1_0_2, 0x0006F809, 0x270BFE14, 0x1D00DFFC, 0x120FF30A);
	r6 = D(r6, s1_0_2, 0xFE10060A, 0x2AD0FAEB, 0xD6D508FB, 0xE4EDEC02);
	r7 = D(r7, s1_0_2, 0x00F9F808, 0xFB18DFF7, 0xE831D508, 0x01810E0B);
	r0 = D(r0, s1_1_0, 0x19F5F514, 0xF9FF1105, 0x0401020B, 0x2BF20020);
	r1 = D(r1, s1_1_0, 0xE8E60104, 0xEC2EF8EE, 0x180CF605, 0xFC16FE1A);
	r2 = D(r2, s1_1_0, 0x060F0005, 0x06FDDFF8, 0x00F8E827, 0xFC23041F);
	r3 = D(r3, s1_1_0, 0x0C1CF1F9, 0x3EEB0723, 0x080FFFF8, 0xE95016FB);
	r4 = D(r4, s1_1_0, 0x0F051C00, 0xEC041AFF, 0xE7FFEB2E, 0x10FC0EE8);
	r5 = D(r5, s1_1_0, 0x070B1ADD, 0xFD14FD0F, 0x0202E10E, 0xF5E012FE);
	r6 = D(r6, s1_1_0, 0x03F4111D, 0x20F22005, 0x28EFDE26, 0x2408FC08);
	r7 = D(r7, s1_1_0, 0x18120CF4, 0x81F91DFD, 0x9D16F514, 0x18E109E5);
	r0 = D(r0, s1_1_1, 0xE600E315, 0x01FC282A, 0xFAE0E31A, 0x01D7FA27);
	r1 = D(r1, s1_1_1, 0xAF05F709, 0x300F0825, 0x11F30D07, 0xF40928D1);
	r2 = D(r2, s1_1_1, 0xDB032AFB, 0x16EA0BF7, 0x2B1C042E, 0xDA0CF9E2);
	r3 = D(r3, s1_1_1, 0x2CE207F4, 0x1D310317, 0xD511E905, 0x03F7D80F);
	r4 = D(r4, s1_1_1, 0xD614C48A, 0xBE2CFC81, 0xEC1D02F4, 0xEEEEEC81);
	r5 = D(r5, s1_1_1, 0xF8F6D6E8, 0x31E81203, 0x29EB3E30, 0xE1ED11C7);
	r6 = D(r6, s1_1_1, 0x0EF5EB9D, 0xD41DFE07, 0xDE0F14EC, 0x230FDD06);
	r7 = D(r7, s1_1_1, 0x6AEC03FE, 0x8181F7E6, 0x811AEAFD, 0xFE13001B);
	r0 = D(r0, s1_1_2, 0x200C11EA, 0xF30D1308, 0x81D8F50C, 0x39DFE40A);
	r1 = D(r1, s1_1_2, 0xEA10F4FE, 0xE62C210D, 0x310E01F8, 0x4E2C17FE);
	r2 = D(r2, s1_1_2, 0x1BF3EEF9, 0x0B40FD00, 0xE1E1DF02, 0xEAF6F506);
	r3 = D(r3, s1_1_2, 0x3E0CD8F2, 0xE4F102FD, 0x17FAF808, 0x2D03D0F6);
	r4 = D(r4, s1_1_2, 0x13040108, 0x81398104, 0x15FE07FE, 0xD7371DFF);
	r5 = D(r5, s1_1_2, 0xFF0FF2EC, 0x2116EB07, 0xFAFCD9E6, 0x0EEF0108);
	r6 = D(r6, s1_1_2, 0xFF0D1D0C, 0x0CE7FE0E, 0xFCF306F6, 0x062B1E1A);
	r7 = D(r7, s1_1_2, 0x100505F8, 0xD8041107, 0x9E0E09F6, 0xC3ED0F01);
	r0 = D(r0, s1_2_0, 0xF707E6F2, 0x0C01F6FF, 0xF31D070A, 0xFE130209);
	r1 = D(r1, s1_2_0, 0x05FF1CF7, 0xF6F10B01, 0xECFBE206, 0xE2140F02);
	r2 = D(r2, s1_2_0, 0xF7FBF309, 0xF3FD12ED, 0x0DFEF801, 0xE4DEF524);
	r3 = D(r3, s1_2_0, 0xE600F6FE, 0x07FFE641, 0xF50007FF, 0xF3F71105);
	r4 = D(r4, s1_2_0, 0xF8030605, 0x081256F7, 0x09D8090D, 0x0504F821);
	r5 = D(r5, s1_2_0, 0x00F50EF6, 0xF4F3F100, 0xE6FEB0CD, 0x06F3F216);
	r6 = D(r6, s1_2_0, 0x1802DDE6, 0x10161217, 0x39FD07FA, 0xEC10F1FF);
	r7 = D(r7, s1_2_0, 0xFFF9EEF5, 0xA4D8F919, 0x03FAF20A, 0x1D0120F3);
	r0 = D(r0, s1_2_1, 0xE419E021, 0x01060612, 0xE719E0EF, 0x1B011C14);
	r1 = D(r1, s1_2_1, 0xF004E9F0, 0x22E7C808, 0x1CE5E410, 0xE3F9FEEE);
	r2 = D(r2, s1_2_1, 0xC0122D0B, 0xE7D41E13, 0x08080DFE, 0xD612F4F7);
	r3 = D(r3, s1_2_1, 0x11DE153C, 0x01150B0C, 0x01F20606, 0x18DBF00B);
	r4 = D(r4, s1_2_1, 0xD10697C3, 0xF4DFA1D0, 0x1DF71FDF, 0x0D04D8F1);
	r5 = D(r5, s1_2_1, 0xFA17C6D6, 0x25F911FC, 0xED0F3F1B, 0xFCE7E1F7);
	r6 = D(r6, s1_2_1, 0x2003E4DD, 0x0EF9DDF3, 0x2FF21B2D, 0xE400DA0C);
	r7 = D(r7, s1_2_1, 0x2401170F, 0x82F01222, 0xF7F60DFD, 0x2C080D00);
	r0 = D(r0, s1_2_2, 0x1D0C0E05, 0x0A02EDFC, 0xDE050EFF, 0xF20D13F2);
	r1 = D(r1, s1_2_2, 0x00000601, 0x02EDCFE3, 0xF0F5BBC4, 0x81290EFA);
	r2 = D(r2, s1_2_2, 0xFC0709F5, 0xE5F90403, 0xF7F8FBF5, 0xE5F70A07);
	r3 = D(r3, s1_2_2, 0x0D1EDF17, 0xEAFBEBC9, 0x0AFA0209, 0xDE03D519);
	r4 = D(r4, s1_2_2, 0xE1051AEE, 0xBF1AD4FD, 0x16F11E04, 0xF306F303);
	r5 = D(r5, s1_2_2, 0xEC01E907, 0x1312080A, 0xF6FBF9E7, 0xF608E8FA);
	r6 = D(r6, s1_2_2, 0xF00BFBF6, 0x0BF6FF11, 0x2EFDEFEF, 0x04FF051E);
	r7 = D(r7, s1_2_2, 0x06F10900, 0x14FF13EB, 0x21070501, 0x0EFA1AEC);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.034e-02, -6.849e-04, 1.434e-02, -9.209e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.016e-02, 2.338e-02, -7.698e-02, -2.817e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(2.542e-02, -6.933e-03, 2.555e-02, 2.410e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(6.938e-03, -6.006e-03, -4.707e-01, 1.104e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(4.616e-02, 7.484e-04, 2.640e-02, 3.041e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(8.345e-03, -3.256e-01, 2.399e-02, 5.597e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(1.096e-02, 3.887e-02, 9.736e-03, 1.574e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(7.523e-03, 6.238e-02, 3.342e-02, -2.069e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-DS-conv2
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xED00F8FB, 0x1403FAF1, 0x18FF08FB, 0xF107F3E8);
	r1 = D(r1, s0_0_0, 0x2B240512, 0xD202F003, 0x070601FE, 0x1713F903);
	r2 = D(r2, s0_0_0, 0xFFFEFC03, 0xECDFFAEF, 0x3908F033, 0x15DCEC09);
	r3 = D(r3, s0_0_0, 0xF1FDFF00, 0x1E0AED0E, 0x51EDFA08, 0x51130ED1);
	r4 = D(r4, s0_0_0, 0x500BFA81, 0xF11AFBE4, 0xF40B12FE, 0x3DFED80F);
	r5 = D(r5, s0_0_0, 0x2AFEE407, 0xBF0909F7, 0xF106FDE4, 0x0B0DFE0D);
	r6 = D(r6, s0_0_0, 0x2607F70F, 0x0A00FD0C, 0xD2FF0307, 0xE62FFFFC);
	r7 = D(r7, s0_0_0, 0x0AFAED09, 0xF813F719, 0x1B08F718, 0xE8F2FBE5);
	r0 = D(r0, s0_0_1, 0x0803050F, 0xFE211913, 0x0E0603F5, 0xCCF61EDE);
	r1 = D(r1, s0_0_1, 0xD7140DC3, 0xF4E610F7, 0x0701FF03, 0xD00D0DE4);
	r2 = D(r2, s0_0_1, 0x01010302, 0x10070A06, 0x1EFC00F7, 0x0204FFF1);
	r3 = D(r3, s0_0_1, 0xFB050509, 0x1005F1ED, 0xF200EEFB, 0x22FB04FF);
	r4 = D(r4, s0_0_1, 0x2E3A2503, 0xF90D0DF1, 0xF502FB05, 0x1E25E2F4);
	r5 = D(r5, s0_0_1, 0x190DDBF4, 0x1700BF29, 0xE203FF0D, 0xEBF902F5);
	r6 = D(r6, s0_0_1, 0x260EFD00, 0x1007FCFA, 0x00F90803, 0xE10811E4);
	r7 = D(r7, s0_0_1, 0x1AE3BF04, 0x35FBFF07, 0xFF0EEAF8, 0x0E0B09FB);
	r0 = D(r0, s0_0_2, 0x00FBFFFA, 0xFF1509F7, 0x07140A02, 0xE6F21AF4);
	r1 = D(r1, s0_0_2, 0x27F91310, 0x0AF3FF10, 0xF907FFFF, 0xE50A0C03);
	r2 = D(r2, s0_0_2, 0xF9010107, 0x08FB0803, 0x2513FB0D, 0x0B11FD0B);
	r3 = D(r3, s0_0_2, 0xF6F60703, 0xF10FF6F7, 0x03050C41, 0xF51201FC);
	r4 = D(r4, s0_0_2, 0x04EAFCF5, 0x1BE70018, 0xFB070304, 0x1E21EA1D);
	r5 = D(r5, s0_0_2, 0xF81B0409, 0xEB0FF0F9, 0xEE070CEA, 0x0A000803);
	r6 = D(r6, s0_0_2, 0x15070809, 0xF7030100, 0xF5F10206, 0x0EF5F611);
	r7 = D(r7, s0_0_2, 0xF30CFC02, 0x0F0A1116, 0x18EDFB14, 0xE8FEFC08);
	r0 = D(r0, s0_1_0, 0xE8120C0D, 0xFF1600F9, 0x14EFD803, 0x3048191B);
	r1 = D(r1, s0_1_0, 0xD60DF7F6, 0x15F8B60B, 0x0EFC0200, 0xF2E7F90F);
	r2 = D(r2, s0_1_0, 0x140AF600, 0x0CF0FFF4, 0xFE20F41A, 0x23FBD6F2);
	r3 = D(r3, s0_1_0, 0x06190006, 0xFCE4DD0D, 0x180DBD03, 0x03FBFB06);
	r4 = D(r4, s0_1_0, 0x2F020C81, 0x270EE402, 0x05290014, 0x01FAF9F6);
	r5 = D(r5, s0_1_0, 0xFF160708, 0xE6FFFCF4, 0x0D0AFD15, 0x1C141515);
	r6 = D(r6, s0_1_0, 0x180F03F8, 0xFE05FFF7, 0x0DF71A07, 0x05F512F3);
	r7 = D(r7, s0_1_0, 0xF0CCA206, 0x1B1E1E14, 0x1308F3FD, 0x3601FF13);
	r0 = D(r0, s0_1_1, 0xDDFA26FB, 0x23390114, 0x102402F1, 0x2907C0F0);
	r1 = D(r1, s0_1_1, 0xF33FE726, 0x0F3EFF04, 0xF9080E04, 0x21F9CF20);
	r2 = D(r2, s0_1_1, 0xF90BF9FF, 0x0EFF0FFC, 0xC3FF030D, 0x05190618);
	r3 = D(r3, s0_1_1, 0x0F0CFE09, 0x0B1F32F1, 0x11DCFCEA, 0xFCF22E0C);
	r4 = D(r4, s0_1_1, 0xF633D5DD, 0x2D190810, 0x061BF10A, 0xCA1905EB);
	r5 = D(r5, s0_1_1, 0x080E2C05, 0xDC13CDFF, 0xFD110217, 0xFD0B0C12);
	r6 = D(r6, s0_1_1, 0x10F901FB, 0x1D0D08FA, 0x0EFDD609, 0x2BFEFC0A);
	r7 = D(r7, s0_1_1, 0x1DE5D500, 0xF0231BD2, 0x09FF810B, 0x0C13050F);
	r0 = D(r0, s0_1_2, 0xFE030FF8, 0xF421FFED, 0xFB16FD02, 0x1B051AF5);
	r1 = D(r1, s0_1_2, 0xE122C7F3, 0x0508F50E, 0xFC040800, 0xF901FD0F);
	r2 = D(r2, s0_1_2, 0x170D0005, 0x06F703F7, 0xE003E700, 0xFD1A18F9);
	r3 = D(r3, s0_1_2, 0xFEF60904, 0x0E03E801, 0x10E40C17, 0x04080CFE);
	r4 = D(r4, s0_1_2, 0xE522F306, 0x0D081E19, 0x0309F301, 0xF8EBE9FB);
	r5 = D(r5, s0_1_2, 0x08021800, 0x16068A0C, 0x05FDF305, 0x06FAF60B);
	r6 = D(r6, s0_1_2, 0x0D0B05FD, 0x0DFF09FC, 0xFBF50505, 0xE607010B);
	r7 = D(r7, s0_1_2, 0x070EFC15, 0x0AFF05FF, 0xF5F8CC0C, 0x10F7FDF5);
	r0 = D(r0, s0_2_0, 0x06D8F9E5, 0xFE1FF635, 0x093AFF18, 0x213D16F5);
	r1 = D(r1, s0_2_0, 0x25FFF501, 0x0A11EC06, 0xFB0F0806, 0x0B0DECF9);
	r2 = D(r2, s0_2_0, 0x03E002F4, 0x05F710FA, 0x1F23CE1D, 0x1CF0F3FE);
	r3 = D(r3, s0_2_0, 0x0D0C1B08, 0x012CFF09, 0x0AB9D834, 0x06DFECD1);
	r4 = D(r4, s0_2_0, 0x1C2EDAFA, 0xF119100F, 0xF705F505, 0x0819F802);
	r5 = D(r5, s0_2_0, 0x121AEF11, 0x07181130, 0xF80304FA, 0xF71B1DFA);
	r6 = D(r6, s0_2_0, 0x020FFC00, 0x02F8F7FE, 0x001002FE, 0xF9F113E2);
	r7 = D(r7, s0_2_0, 0xFD06F716, 0xFB0F1F12, 0x0716FF0A, 0xED0003FE);
	r0 = D(r0, s0_2_1, 0xFEF2DFFB, 0xF4290BB7, 0x041F24ED, 0x011505F9);
	r1 = D(r1, s0_2_1, 0x081B0E02, 0x010716F0, 0x050AF400, 0x0431E3E6);
	r2 = D(r2, s0_2_1, 0x0108FB03, 0xFDE4E8FE, 0x062EBA25, 0x0C141703);
	r3 = D(r3, s0_2_1, 0x06033FFA, 0xFAFDE007, 0x000A0008, 0xEA08FC13);
	r4 = D(r4, s0_2_1, 0x0B35EB12, 0x0F1119F8, 0xEE110609, 0x08F90FFC);
	r5 = D(r5, s0_2_1, 0x030218FA, 0x06E2F329, 0xFFFDEEFD, 0x01E7FE06);
	r6 = D(r6, s0_2_1, 0x100E0505, 0x000017FB, 0x09010505, 0xFF0E16E0);
	r7 = D(r7, s0_2_1, 0x0F12F000, 0x0DE90613, 0x09F1A803, 0xE1140509);
	r0 = D(r0, s0_2_2, 0xFC0AF7F3, 0x0BE8DADE, 0x16E7F203, 0xF31BFF01);
	r1 = D(r1, s0_2_2, 0x05F1F404, 0xFD0D0301, 0xFC000401, 0x00F6D9FC);
	r2 = D(r2, s0_2_2, 0xFA04F7FC, 0xFC08FD04, 0xFA02B81C, 0xFE1209F4);
	r3 = D(r3, s0_2_2, 0x09F20BFD, 0x0709F302, 0xE2C6E007, 0xF1F90DEF);
	r4 = D(r4, s0_2_2, 0x12160D0B, 0xF5FF0E05, 0xF605FF01, 0x0BFEFA00);
	r5 = D(r5, s0_2_2, 0x02EEED0E, 0x10FFF708, 0x02F404FB, 0xFEF7E406);
	r6 = D(r6, s0_2_2, 0x070007FC, 0xFE08F604, 0x05F6FB01, 0xF513F306);
	r7 = D(r7, s0_2_2, 0xFA13FA0A, 0x0C1407FF, 0x09F5D808, 0xEC050900);
	r0 = D(r0, s1_0_0, 0x0AFD0400, 0xF107FB00, 0xF3F4FF0B, 0xEBCA04ED);
	r1 = D(r1, s1_0_0, 0xEF042005, 0xD42D02FB, 0xFCFB02FE, 0xF3FC09FE);
	r2 = D(r2, s1_0_0, 0xF2FC0302, 0xFC01EE00, 0x18FE00FD, 0xFEE7FAF9);
	r3 = D(r3, s1_0_0, 0xE9F60103, 0xF0E7FA01, 0x0BD8D103, 0x000610E9);
	r4 = D(r4, s1_0_0, 0x07C515F9, 0xE81C1A02, 0xF5F40809, 0x32DC03FA);
	r5 = D(r5, s1_0_0, 0x2684ECFF, 0xF5B40004, 0x0206FF08, 0xFE0EF903);
	r6 = D(r6, s1_0_0, 0xFF0104FE, 0x03F3FEFF, 0xF80905FB, 0xDF0417FA);
	r7 = D(r7, s1_0_0, 0x3ADEEA10, 0x01081609, 0xF2FC02FF, 0xFC08FEFC);
	r0 = D(r0, s1_0_1, 0xFFE3FC2B, 0x0617FD11, 0x040E0806, 0x39FBF40B);
	r1 = D(r1, s1_0_1, 0x132A25FE, 0x1405F9F6, 0x04FF06FA, 0x1D26FAF6);
	r2 = D(r2, s1_0_1, 0x060AFB08, 0xF60AE709, 0x0F1D18F4, 0xFC0FF1F4);
	r3 = D(r3, s1_0_1, 0x0500FF0D, 0xF9F3070D, 0x0A07DD0B, 0x09E2F4FC);
	r4 = D(r4, s1_0_1, 0xE8171C05, 0xF90102E3, 0x01FF0413, 0x340DFF23);
	r5 = D(r5, s1_0_1, 0xD5EEDF06, 0xDF352108, 0xEEF9EAF9, 0xFDF3FC07);
	r6 = D(r6, s1_0_1, 0xE00A0C06, 0x0109F502, 0x0DFDF7FF, 0x091D0807);
	r7 = D(r7, s1_0_1, 0x1E05FFD7, 0xF30712F9, 0xF7060407, 0xF001FB01);
	r0 = D(r0, s1_0_2, 0xF2F60903, 0xF5FE040E, 0x1FF90201, 0xE402FD02);
	r1 = D(r1, s1_0_2, 0xFA0D04F9, 0x07090901, 0x03010300, 0xFDFF08F0);
	r2 = D(r2, s1_0_2, 0x04FD0105, 0xFE07FFFA, 0xF7F71EF9, 0x0721EDEF);
	r3 = D(r3, s1_0_2, 0xFD01FCFC, 0x0200FBE9, 0xE7FD0801, 0x18FE02FE);
	r4 = D(r4, s1_0_2, 0x04020205, 0x000000F0, 0x00010400, 0xF5FA03F0);
	r5 = D(r5, s1_0_2, 0xF4FD06CE, 0xF3F1E900, 0x04F9F309, 0xFF03FE07);
	r6 = D(r6, s1_0_2, 0xF9010FF2, 0x000203FC, 0x0700FB0C, 0xECFB0D04);
	r7 = D(r7, s1_0_2, 0xEF08FCED, 0x0702F9FE, 0xFFFBFDFC, 0x0704F907);
	r0 = D(r0, s1_1_0, 0x053D0302, 0xEEDDFD09, 0x12DCF2EE, 0xF9C21911);
	r1 = D(r1, s1_1_0, 0x0A07090D, 0xEFA40D01, 0xFE100208, 0xFBF5FE08);
	r2 = D(r2, s1_1_0, 0x0BEE03F6, 0x0822F9FF, 0xFAD21DF9, 0xA919E31B);
	r3 = D(r3, s1_1_0, 0x09FA0400, 0xF132FBFD, 0x1D9CE4FA, 0x3A0F15B4);
	r4 = D(r4, s1_1_0, 0x1A2DF7E5, 0xE5E305E3, 0x0AFB03EF, 0xE3D0F909);
	r5 = D(r5, s1_1_0, 0xFA02EFF9, 0x2219110D, 0x01BAF2F0, 0xFD03F4E6);
	r6 = D(r6, s1_1_0, 0x1981F505, 0x12DC09FB, 0xF4E00401, 0x15CF0F05);
	r7 = D(r7, s1_1_0, 0xB7E9D3FE, 0x0F8112EE, 0xFBF30AFB, 0x0402F4F0);
	r0 = D(r0, s1_1_1, 0x160713A8, 0xFCE0FC02, 0xFBF2F2E2, 0x81FC1618);
	r1 = D(r1, s1_1_1, 0xDF1FF125, 0xF3F50140, 0x010306F6, 0xEEE31619);
	r2 = D(r2, s1_1_1, 0xFC0900E7, 0xFDF0FBF5, 0x1A1427CC, 0x0DEC1089);
	r3 = D(r3, s1_1_1, 0x00FB1110, 0x06F102FA, 0xF814EDF0, 0xFDED0804);
	r4 = D(r4, s1_1_1, 0x5FEA160C, 0xFA0709A0, 0x06F70107, 0x1740F6EE);
	r5 = D(r5, s1_1_1, 0x0F0FF4D9, 0x1CC4F4FA, 0xF9EDE42B, 0xFF0CF6F3);
	r6 = D(r6, s1_1_1, 0xE2FBEF0E, 0xE1F4EF2A, 0xFF08F743, 0x1B07F90E);
	r7 = D(r7, s1_1_1, 0xF3FBFBAD, 0xB6D20619, 0x14EF1421, 0x140811E3);
	r0 = D(r0, s1_1_2, 0x02FF0103, 0x2213E918, 0xEE11C20C, 0x04080AC1);
	r1 = D(r1, s1_1_2, 0xDE3B2D81, 0x04F915FF, 0x01060412, 0x100F2B03);
	r2 = D(r2, s1_1_2, 0x01FEFA03, 0x1DF6081A, 0xF10817CE, 0x04F1160F);
	r3 = D(r3, s1_1_2, 0xFE06FFD5, 0x11FEE31B, 0xFE170DFF, 0x0F06061C);
	r4 = D(r4, s1_1_2, 0x191AE6C5, 0xF8040FE0, 0xF5F702F3, 0xE2F5F2BC);
	r5 = D(r5, s1_1_2, 0xFEFFFA09, 0xF109FED9, 0xFC02F5F7, 0x0B0C0D20);
	r6 = D(r6, s1_1_2, 0xF91009F7, 0xFB09ED27, 0x02FC0EE5, 0x06FE2CF8);
	r7 = D(r7, s1_1_2, 0xF003FDFA, 0xF60C1D23, 0x0004EFD9, 0x0AEF1000);
	r0 = D(r0, s1_2_0, 0x00FBF611, 0x248B26FB, 0xEEDA0A06, 0x111323FA);
	r1 = D(r1, s1_2_0, 0x0005FDFE, 0x16EFF2FB, 0x04FFFF01, 0xF10402FD);
	r2 = D(r2, s1_2_0, 0xFBF1F40B, 0xF2F9F302, 0xF2B2110A, 0xFEF7FCEF);
	r3 = D(r3, s1_2_0, 0x01D3FE01, 0xF60DF600, 0xBEF2F9F6, 0x17F2E80B);
	r4 = D(r4, s1_2_0, 0xFDE3FBF1, 0x05F1FC03, 0xF4DD0002, 0xF0DD02FB);
	r5 = D(r5, s1_2_0, 0xFE04F9F8, 0x13D1FF0B, 0x07E30006, 0x08F3F206);
	r6 = D(r6, s1_2_0, 0xFE0005F9, 0x06FEF906, 0x11F90AF5, 0xF3F01A0B);
	r7 = D(r7, s1_2_0, 0xFC0FEAF8, 0xFD271303, 0x13FA0804, 0xE3080A07);
	r0 = D(r0, s1_2_1, 0xFCFBF210, 0xE2BC27D8, 0x00E9EA07, 0xE1FE370F);
	r1 = D(r1, s1_2_1, 0x540A12F5, 0x15EDFDFD, 0xFFFB06FA, 0xCF1C2309);
	r2 = D(r2, s1_2_1, 0x05F2FC14, 0xF50CF914, 0xDFBA38CF, 0xEEFF2502);
	r3 = D(r3, s1_2_1, 0x03F90D05, 0x0107FE05, 0x05CD04EF, 0x0CFDDCD7);
	r4 = D(r4, s1_2_1, 0x19F50F05, 0x0DF913DE, 0xFEFAFB15, 0x10F4F205);
	r5 = D(r5, s1_2_1, 0x010D030C, 0x0F09F5ED, 0xFDFCF916, 0xE607DA05);
	r6 = D(r6, s1_2_1, 0xFFFB0EFA, 0x0005FF05, 0x0203FA17, 0xF2051D05);
	r7 = D(r7, s1_2_1, 0x0FFD0CFA, 0xE6F01AEB, 0xE2E70614, 0x0EFD121D);
	r0 = D(r0, s1_2_2, 0x01F6F105, 0xE435C8DB, 0x25EBE705, 0xFEF80401);
	r1 = D(r1, s1_2_2, 0x221903E7, 0x03F520FE, 0x00030406, 0xF70D1ADE);
	r2 = D(r2, s1_2_2, 0x06FFEAEC, 0x00011306, 0x1CFCFDB4, 0x040302FD);
	r3 = D(r3, s1_2_2, 0x0306F508, 0x0901FF01, 0x03FA2CFA, 0x14F9EDFD);
	r4 = D(r4, s1_2_2, 0xFD1319FC, 0x13F631F4, 0x0AFBFB08, 0x04EAEE18);
	r5 = D(r5, s1_2_2, 0x0510FFFD, 0x0B07F116, 0x1108E806, 0xFB07FFE9);
	r6 = D(r6, s1_2_2, 0xFDFF00F7, 0x0204F7FA, 0xFB000500, 0xF5FF18EB);
	r7 = D(r7, s1_2_2, 0x020EFFF6, 0x1B163F0E, 0x040AF015, 0x0BEAFFF4);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x000C05FF, 0x0912F9FB, 0xF7FCDB08, 0xE611CBDB);
	r1 = D(r1, s0_0_0, 0x29E9C2EB, 0xF6E7FAE8, 0x03FDFF05, 0x09FFFCF3);
	r2 = D(r2, s0_0_0, 0x04FF0203, 0xF906F10D, 0x2918EDFB, 0xE718FDFD);
	r3 = D(r3, s0_0_0, 0x06FDFCF9, 0xF60B0303, 0xEE13081D, 0xE3F622F1);
	r4 = D(r4, s0_0_0, 0xF819DEEF, 0xFE03EFFB, 0x0C0E01FD, 0x03E4FBFA);
	r5 = D(r5, s0_0_0, 0xEFECF40F, 0x32EBECE7, 0x001909F5, 0xFDFBF1F9);
	r6 = D(r6, s0_0_0, 0x07FFFAF4, 0xFF0CFF06, 0xF5F5F506, 0x10E90BFB);
	r7 = D(r7, s0_0_0, 0xF40B041A, 0x10D9E715, 0x0908ED02, 0xF3090FF2);
	r0 = D(r0, s0_0_1, 0x07000608, 0x20FEEF19, 0x18FA0709, 0x021B3613);
	r1 = D(r1, s0_0_1, 0x130A01F1, 0x0602FDF8, 0xFFF901FE, 0x0109FEF3);
	r2 = D(r2, s0_0_1, 0x0AFFFE05, 0x0CF302FD, 0x1AEF09F6, 0x18F6F8FA);
	r3 = D(r3, s0_0_1, 0x05120509, 0xF6F6E60C, 0x06D64132, 0xECECD7E2);
	r4 = D(r4, s0_0_1, 0x2AC0E306, 0x18F7F515, 0x030EFD03, 0x0D18163B);
	r5 = D(r5, s0_0_1, 0xFD00FA09, 0xED23EA09, 0xF315FC01, 0x0B0CE9F7);
	r6 = D(r6, s0_0_1, 0x00FCF5ED, 0x10EEFF04, 0x08080E10, 0x0511FBE9);
	r7 = D(r7, s0_0_1, 0xF2F60805, 0x08E8F71B, 0xF4171E07, 0xFF0DFA02);
	r0 = D(r0, s0_0_2, 0x0E02080C, 0x0BFD210A, 0x1607050E, 0xF4F4FAFA);
	r1 = D(r1, s0_0_2, 0x0B181201, 0xFE02FEF7, 0x04F9FFFF, 0xFF0106F6);
	r2 = D(r2, s0_0_2, 0x060803FD, 0xF705FEFA, 0x06151611, 0xF0DDFEF0);
	r3 = D(r3, s0_0_2, 0xFC0AF6F8, 0x0507010B, 0xF902F0C9, 0x02F2040B);
	r4 = D(r4, s0_0_2, 0x36F32823, 0x0E0E01EF, 0x09000002, 0x09F414FD);
	r5 = D(r5, s0_0_2, 0x09F8FC04, 0x31FE1908, 0x0E010000, 0x090CF8FB);
	r6 = D(r6, s0_0_2, 0x12F6F5F3, 0x0AFF020C, 0xEB02FAFD, 0xE202F2E9);
	r7 = D(r7, s0_0_2, 0x0DFA07FA, 0x151CFAF2, 0x040205EE, 0xF9F701F8);
	r0 = D(r0, s0_1_0, 0x00FB11F4, 0x031411D3, 0x1BFC110D, 0x03F106DB);
	r1 = D(r1, s0_1_0, 0x04FB06FE, 0x0B0CFEE4, 0x05EEF406, 0xE903F6EE);
	r2 = D(r2, s0_1_0, 0x02F20303, 0xF9FE0513, 0xF500C0F6, 0xDCD705FC);
	r3 = D(r3, s0_1_0, 0x0AFB0500, 0x0CEBFE10, 0xEBB71F08, 0xEB16F104);
	r4 = D(r4, s0_1_0, 0xF71FD014, 0xF134FEFA, 0x1520FCE0, 0x14FF03F5);
	r5 = D(r5, s0_1_0, 0x0C090808, 0x211110D9, 0x0C1908DE, 0x0C020ADF);
	r6 = D(r6, s0_1_0, 0x050D0BFA, 0x061EFDF3, 0xFA07F914, 0xE8D2D71D);
	r7 = D(r7, s0_1_0, 0xF004041E, 0x0E06EDC4, 0x03F503E2, 0xFDFEF9E2);
	r0 = D(r0, s0_1_1, 0x011A0203, 0x02F42ACD, 0x0F12F0FF, 0xB2ECF821);
	r1 = D(r1, s0_1_1, 0x07D5EADC, 0xFEFC0EDE, 0x0517FDFC, 0xE0E2F612);
	r2 = D(r2, s0_1_1, 0x031613F5, 0x070D1215, 0x07E11822, 0xEF181404);
	r3 = D(r3, s0_1_1, 0xFD040D20, 0x062102FD, 0xE210EF04, 0x0A17E805);
	r4 = D(r4, s0_1_1, 0xE81FB20A, 0x0DE5DDF3, 0x04DEFA19, 0x26FE0C22);
	r5 = D(r5, s0_1_1, 0xFD06FEF7, 0x0D000820, 0x19D505EF, 0x08EC06BB);
	r6 = D(r6, s0_1_1, 0x07E41420, 0x02FC1209, 0xECEAF603, 0x0AFE13D8);
	r7 = D(r7, s0_1_1, 0x0AEF0400, 0x1EEE0BEF, 0x150311FB, 0x09F2E3E3);
	r0 = D(r0, s0_1_2, 0xFC0AF802, 0x2CC7FF1A, 0xE1F4DE0A, 0xFAE0FCFB);
	r1 = D(r1, s0_1_2, 0xF716FCFA, 0x11060811, 0x04FA0009, 0x00DEE806);
	r2 = D(r2, s0_1_2, 0x06F50AF8, 0x02E806F9, 0xED03250F, 0x36F21000);
	r3 = D(r3, s0_1_2, 0xFC0800F2, 0x02E302F4, 0x264106E6, 0x0EF5F7FC);
	r4 = D(r4, s0_1_2, 0xD7E22605, 0x0AF91BF6, 0xFD040701, 0xE7140C08);
	r5 = D(r5, s0_1_2, 0x1FF81208, 0xF4F102F2, 0xF8F0FD11, 0x08F008FB);
	r6 = D(r6, s0_1_2, 0x0EEB0406, 0x06E60F0A, 0xFC09F600, 0x1B1EEFF0);
	r7 = D(r7, s0_1_2, 0x1F0A23FD, 0xF9DC07E6, 0xF20113F6, 0xFCFCFAEE);
	r0 = D(r0, s0_2_0, 0xFCF508FC, 0xF9DEE6E2, 0x10021202, 0xFBE30C10);
	r1 = D(r1, s0_2_0, 0x0AED10EB, 0xF7E8F212, 0x030105FF, 0x04052804);
	r2 = D(r2, s0_2_0, 0xF5FEFB0F, 0xF8F9FA1D, 0x04EB2013, 0x18130C02);
	r3 = D(r3, s0_2_0, 0xFEFDFDFD, 0x13070D07, 0xEE050C10, 0xF3CEEB04);
	r4 = D(r4, s0_2_0, 0x0C1AE1F0, 0x07121AEF, 0x0B00FD10, 0x07F80EFE);
	r5 = D(r5, s0_2_0, 0x02050E05, 0xFC13F1F4, 0x060201F6, 0xF9F8EB0F);
	r6 = D(r6, s0_2_0, 0x0409FBF2, 0xFD040CF7, 0xF9F501F3, 0xF90F0116);
	r7 = D(r7, s0_2_0, 0x18240DFE, 0xF5F8E007, 0x0604FFFF, 0x10040309);
	r0 = D(r0, s0_2_1, 0xF6F8020A, 0x0511331C, 0x06160EFB, 0x040A1706);
	r1 = D(r1, s0_2_1, 0x05F7EE04, 0x0A13F904, 0x08020701, 0x13D51F06);
	r2 = D(r2, s0_2_1, 0x13FA0107, 0xFCF606F6, 0xF214FE0C, 0x122910FD);
	r3 = D(r3, s0_2_1, 0xFD0E05F8, 0xEF0D1800, 0xDCFE03F3, 0xF1F4FB18);
	r4 = D(r4, s0_2_1, 0xB834D096, 0x0E020304, 0x030AFFFB, 0xFF00FDF6);
	r5 = D(r5, s0_2_1, 0xFF0D10FA, 0xFD0A1920, 0xFBEF0312, 0xFAF21208);
	r6 = D(r6, s0_2_1, 0x05090501, 0xFD020CFC, 0x02F00200, 0xE7E60D17);
	r7 = D(r7, s0_2_1, 0x180A0106, 0xE91C08FE, 0x08121617, 0x13E40B1A);
	r0 = D(r0, s0_2_2, 0xFC04FDF6, 0xEFF3E406, 0x14F70DED, 0x1105FDFB);
	r1 = D(r1, s0_2_2, 0xFB31DF06, 0x02FEFEFC, 0x08050903, 0xDA0BFE0F);
	r2 = D(r2, s0_2_2, 0xFC05FF04, 0xFEF5ECFC, 0xFA0AFD19, 0x03F10902);
	r3 = D(r3, s0_2_2, 0x0002FEFD, 0x02FC0D0C, 0x06F91006, 0xF7FAEB0A);
	r4 = D(r4, s0_2_2, 0xF0E51503, 0x17EE080B, 0x0204FFFD, 0x071405EC);
	r5 = D(r5, s0_2_2, 0x080909FB, 0xF5FB050D, 0xF204F905, 0xF2F701FD);
	r6 = D(r6, s0_2_2, 0xFB00FC05, 0x080812FE, 0xF905F9FA, 0x01FD09F6);
	r7 = D(r7, s0_2_2, 0x0B0316FA, 0x231704FE, 0x00F30D00, 0xFD0AF514);
	r0 = D(r0, s1_0_0, 0xF6090004, 0xFE23EAEE, 0xF2D8F5E7, 0x14B00B1F);
	r1 = D(r1, s1_0_0, 0x0F170401, 0xFBC90A13, 0xFDFC0505, 0xF7B8030A);
	r2 = D(r2, s1_0_0, 0xFE0100FE, 0x081702FE, 0xF1CDFDF2, 0xF9FB0FF3);
	r3 = D(r3, s1_0_0, 0xF9050005, 0xEC1F0A14, 0xFFF7100A, 0x1918F8E3);
	r4 = D(r4, s1_0_0, 0xF5050BF4, 0x00D0F30D, 0xF4F3FCFE, 0xFD020D04);
	r5 = D(r5, s1_0_0, 0xF1EA1F08, 0x04FBF1DD, 0xF9F700FC, 0x0344FB09);
	r6 = D(r6, s1_0_0, 0xFB27F9FF, 0xFDED0501, 0x00F8FE00, 0x0AF6E6F9);
	r7 = D(r7, s1_0_0, 0x08DC08F3, 0x0A13F507, 0xF7050300, 0xFDEB08FC);
	r0 = D(r0, s1_0_1, 0x06FD0401, 0x0A20F1F0, 0xFE20F20F, 0xFACFFCF3);
	r1 = D(r1, s1_0_1, 0xEF3E0702, 0x0EB81EFE, 0xFCEF000C, 0x08E4FCE1);
	r2 = D(r2, s1_0_1, 0xFCE3FF03, 0x00FDECF7, 0xF2011114, 0xFA31071D);
	r3 = D(r3, s1_0_1, 0xFBF500FE, 0xF03D060E, 0xFD301725, 0x0F0203FD);
	r4 = D(r4, s1_0_1, 0x2581F80D, 0xF90CEA09, 0xFDEB0807, 0xF3131B13);
	r5 = D(r5, s1_0_1, 0xD84B081C, 0xE40EFE0F, 0xF5D8FC00, 0x0020FB07);
	r6 = D(r6, s1_0_1, 0xF6520002, 0xFDF60404, 0xFFFEF9FB, 0xFAC6F5FE);
	r7 = D(r7, s1_0_1, 0xF6CC160B, 0xF53AF9F4, 0xF8A8FE03, 0xF12412F7);
	r0 = D(r0, s1_0_2, 0xF714F705, 0xFB0BE8F4, 0x06FCFD04, 0x0BB8BEFB);
	r1 = D(r1, s1_0_2, 0x13EAD8F0, 0xF9080BFA, 0xFC120604, 0x08D8F3F5);
	r2 = D(r2, s1_0_2, 0x00FD02FE, 0x1517ED01, 0x0FF400FD, 0x100811F2);
	r3 = D(r3, s1_0_2, 0x03FCFFFF, 0xF705F30E, 0xF89115DF, 0xFC180508);
	r4 = D(r4, s1_0_2, 0x083ACBFE, 0x0D360803, 0x0102F601, 0x0C01FA04);
	r5 = D(r5, s1_0_2, 0xF3E90802, 0xFD00C014, 0x060503FE, 0x0701FD03);
	r6 = D(r6, s1_0_2, 0x0A39F700, 0x06110FFE, 0xFDF6F6FF, 0x001B1605);
	r7 = D(r7, s1_0_2, 0xFFF700FC, 0xF6FAD40E, 0xFCE2F8FF, 0xFDF00AFB);
	r0 = D(r0, s1_1_0, 0x11ED0605, 0xFAFDF2F9, 0x0C0BF6E0, 0xD7F0EE03);
	r1 = D(r1, s1_1_0, 0x0509100E, 0x0BF7FC15, 0xFEF7F718, 0xE51CF7FA);
	r2 = D(r2, s1_1_0, 0x021A07FA, 0xFC3EFEF7, 0x0438051D, 0xE734F907);
	r3 = D(r3, s1_1_0, 0xEF01FEF4, 0x16220B20, 0x12211BEA, 0x2481F8E5);
	r4 = D(r4, s1_1_0, 0xDE232B02, 0xDCC00C1C, 0xFDF313F2, 0xF717FD2B);
	r5 = D(r5, s1_1_0, 0xF6FD1606, 0x10CFEAF7, 0x04A10702, 0x0EDEF0F7);
	r6 = D(r6, s1_1_0, 0x0451FFF5, 0xFDCA0A0C, 0x03E7FE01, 0xF83A01F8);
	r7 = D(r7, s1_1_0, 0xC2440333, 0x21F9D5EF, 0xF8E8FF1B, 0x00C91005);
	r0 = D(r0, s1_1_1, 0x188104FD, 0xD2EC1B09, 0xEDECF229, 0xE6E52EEB);
	r1 = D(r1, s1_1_1, 0xD314B20B, 0x0A19070A, 0x02810E11, 0xEC37FF06);
	r2 = D(r2, s1_1_1, 0x08F30700, 0x0BFAD9E4, 0xE5164F26, 0x08F630FA);
	r3 = D(r3, s1_1_1, 0x02120E04, 0x0F8FEF0E, 0x2CAAE6FD, 0x1CC8CA08);
	r4 = D(r4, s1_1_1, 0x26810EEF, 0xEB18F207, 0x0532010D, 0x23F90013);
	r5 = D(r5, s1_1_1, 0x1B3314F2, 0x02EDCE47, 0x050D0CFB, 0xFDADFEF9);
	r6 = D(r6, s1_1_1, 0xE37FE4F6, 0x1AB50516, 0xF647E8F7, 0xF9B1D2FB);
	r7 = D(r7, s1_1_1, 0x1AE3210D, 0xE08AB217, 0x10D10029, 0xF9FF0EFD);
	r0 = D(r0, s1_1_2, 0x1001FDF7, 0xF61A25F0, 0xF9FFDEF3, 0x02D8CAD2);
	r1 = D(r1, s1_1_2, 0xFEEE0DFF, 0x0600EFF1, 0x00060905, 0xFB0BE4F4);
	r2 = D(r2, s1_1_2, 0xFAEF09FD, 0x0404F1FA, 0xF4B3B60B, 0xF1230A03);
	r3 = D(r3, s1_1_2, 0xF9DFF2F3, 0x0C230707, 0x0D81F1E4, 0x10F3EF06);
	r4 = D(r4, s1_1_2, 0x0381B913, 0xFFE2E705, 0xFC00F805, 0xF7AFD50B);
	r5 = D(r5, s1_1_2, 0x07EE0EFC, 0x0715C02C, 0x061FFBF2, 0x07F7F8FE);
	r6 = D(r6, s1_1_2, 0xF4640CE6, 0x04FF110C, 0xF5E606FA, 0x06E6EB0B);
	r7 = D(r7, s1_1_2, 0x041B211B, 0x1E65F3F9, 0xFCF2DE1D, 0xFDECFBFF);
	r0 = D(r0, s1_2_0, 0xF7F303FB, 0x07F4C0E9, 0x0523EFFE, 0x1628CBF2);
	r1 = D(r1, s1_2_0, 0xD9ACF604, 0x110B1105, 0xFFF3060A, 0xEEE6F9E2);
	r2 = D(r2, s1_2_0, 0x0807F504, 0xF525F411, 0xE12D13E9, 0xDD08E301);
	r3 = D(r3, s1_2_0, 0xFEFA00FF, 0xFCF81CFB, 0x3612EA24, 0x1C13FFEB);
	r4 = D(r4, s1_2_0, 0xE610100F, 0xFCD2E8E8, 0x07FEF90C, 0xEE06FDF8);
	r5 = D(r5, s1_2_0, 0x02F50801, 0x01DEF9EE, 0x09E20809, 0xFE0DFEFE);
	r6 = D(r6, s1_2_0, 0xEE3105FC, 0x02F60807, 0x00F801F6, 0x04E5E105);
	r7 = D(r7, s1_2_0, 0x039A0D0F, 0x08F5F0F1, 0x0702F5EC, 0x10330620);
	r0 = D(r0, s1_2_1, 0x050AF509, 0xF3DF0A0A, 0x19EEE01D, 0x9E04DB0D);
	r1 = D(r1, s1_2_1, 0x81EADE21, 0xFEF4FEF0, 0x0BF1020A, 0xEF043504);
	r2 = D(r2, s1_2_1, 0xF3FFEC0F, 0xE900E3F1, 0x06FBB3FA, 0xEE2DD518);
	r3 = D(r3, s1_2_1, 0xF6ECF4FC, 0xF0FA080C, 0xE081F403, 0x03082EF3);
	r4 = D(r4, s1_2_1, 0x24814220, 0x1B271204, 0x06040310, 0x01C4F10F);
	r5 = D(r5, s1_2_1, 0x0327F3F6, 0xE4C8EAFA, 0xF81B2915, 0xF316EE01);
	r6 = D(r6, s1_2_1, 0xA8520DE8, 0xF4D8F7FD, 0x01FF0EF6, 0xE01BCC00);
	r7 = D(r7, s1_2_1, 0x04F908FC, 0xA9A8F0DC, 0xF7DB070E, 0x0B460E19);
	r0 = D(r0, s1_2_2, 0x06F9F309, 0x093414EB, 0x01CBF513, 0x1B1CD101);
	r1 = D(r1, s1_2_2, 0x8281D60F, 0xF2060506, 0xF8020506, 0x12FEEAF9);
	r2 = D(r2, s1_2_2, 0x09FA0400, 0x1013EDFF, 0xFDD1810A, 0xF823F8F9);
	r3 = D(r3, s1_2_2, 0xF8F7F504, 0x12041102, 0x1C1C1718, 0xDE131B11);
	r4 = D(r4, s1_2_2, 0x0D2F2900, 0x07200704, 0x00010504, 0xF324E908);
	r5 = D(r5, s1_2_2, 0x03FD0BFA, 0xEFDDDD06, 0x09DD1EFE, 0x06D736E6);
	r6 = D(r6, s1_2_2, 0x044300E7, 0x01F70901, 0x03F50C07, 0x07F0DF06);
	r7 = D(r7, s1_2_2, 0x0D160309, 0xDF34D7E7, 0x0217FF01, 0x06091902);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0FFCEC19, 0xF4EFC616, 0xF90EFBF5, 0xE5F215F9);
	r1 = D(r1, s0_0_0, 0x170BF709, 0xF8FCF90C, 0xFFF90302, 0xFBF51FFC);
	r2 = D(r2, s0_0_0, 0xFBFE03F9, 0xF112F3E1, 0x1409FDE2, 0x28035FE0);
	r3 = D(r3, s0_0_0, 0x04FCF7F6, 0x221111ED, 0xFBFFF201, 0xCBE9810C);
	r4 = D(r4, s0_0_0, 0xA800E222, 0xEE080504, 0xF2FD0007, 0x11FF080B);
	r5 = D(r5, s0_0_0, 0xF01B26E3, 0x2AFFE40E, 0xEF0BFF0E, 0xF9F705E5);
	r6 = D(r6, s0_0_0, 0x040C04FB, 0xF3051506, 0xF5F000FB, 0xDFF6E114);
	r7 = D(r7, s0_0_0, 0x0E1B5FEB, 0x09E7F60F, 0x0C05FEF8, 0xE8090011);
	r0 = D(r0, s0_0_1, 0xB4F5F7D3, 0xE9F2E9FC, 0x06090BE0, 0x1EF1F4F8);
	r1 = D(r1, s0_0_1, 0xEAED00E6, 0x030EE106, 0x0DFDF50B, 0xEF0BF502);
	r2 = D(r2, s0_0_1, 0xFB0604FF, 0x0BF40419, 0x33F8ECFC, 0x011181CE);
	r3 = D(r3, s0_0_1, 0xED050008, 0xC3F8F3F0, 0xE00BE2CF, 0xA7ED01DE);
	r4 = D(r4, s0_0_1, 0x819A81FE, 0xF5F3DFF1, 0xFE05FEFC, 0xE8F835AD);
	r5 = D(r5, s0_0_1, 0xBF0622C7, 0xE41F2EE0, 0xED062012, 0xF6FDD2F2);
	r6 = D(r6, s0_0_1, 0xFD02FD04, 0xFFFA09EF, 0xF1FAF6FA, 0x0602DA26);
	r7 = D(r7, s0_0_1, 0x1B0AF01F, 0xF91525DA, 0x07000E02, 0x02160815);
	r0 = D(r0, s0_0_2, 0x0B00DB11, 0x0D12EF03, 0xF4120509, 0x0F1631EE);
	r1 = D(r1, s0_0_2, 0xEA1EFADA, 0xFFFBFCFC, 0x00FAFB01, 0xFD141905);
	r2 = D(r2, s0_0_2, 0xFA0804FB, 0xF40AEF02, 0xDCFBCFF7, 0xED0EEE13);
	r3 = D(r3, s0_0_2, 0x0A0709FE, 0x0F0CD906, 0x15252020, 0xEFE8F5F4);
	r4 = D(r4, s0_0_2, 0xF024FE07, 0xE5EAE709, 0x1406FDFF, 0x11ED2916);
	r5 = D(r5, s0_0_2, 0xE8F41EEF, 0x08E6B8EE, 0xF3FE02EB, 0xFA03F1F5);
	r6 = D(r6, s0_0_2, 0xEBF10001, 0xF7040A07, 0x280F060E, 0xFB0404FC);
	r7 = D(r7, s0_0_2, 0x0B0B1507, 0x01EFECF7, 0xFB0B0501, 0x1408FD09);
	r0 = D(r0, s0_1_0, 0xFA04F00F, 0x1FDE0B15, 0x0D12F7E5, 0xE6ECEC00);
	r1 = D(r1, s0_1_0, 0xEAF5D9FF, 0xFC01EEE7, 0xF500EFF4, 0x1612010A);
	r2 = D(r2, s0_1_0, 0x0AFC0BF8, 0x0810FFE8, 0xE9F9A50E, 0x17161DEE);
	r3 = D(r3, s0_1_0, 0x02FEFFFF, 0xF8130FF3, 0x290105F9, 0xD8DBE52E);
	r4 = D(r4, s0_1_0, 0x81CEFA03, 0x0422B525, 0xD0EA0A11, 0xF8D8190B);
	r5 = D(r5, s0_1_0, 0xFBF619FD, 0xE00EEF1F, 0x05EFFB13, 0x17FA01FE);
	r6 = D(r6, s0_1_0, 0xFE03F8FB, 0x04FBF80D, 0xE2EB0011, 0x2F15F1DF);
	r7 = D(r7, s0_1_0, 0xC7221103, 0xF3F3CA19, 0x06E31300, 0x1AE8DA24);
	r0 = D(r0, s0_1_1, 0xE9EE06FA, 0xED0C24F6, 0x0707ADFE, 0x04C8FCE8);
	r1 = D(r1, s0_1_1, 0x2C0A810E, 0xFEEFCFF1, 0xEBFE0BE0, 0x112AF817);
	r2 = D(r2, s0_1_1, 0x0C090310, 0x00F1FCF9, 0xD4BF81B9, 0xFD1ED6DB);
	r3 = D(r3, s0_1_1, 0xF90E060D, 0x06F028FF, 0xFE0CF20E, 0xFA1327EB);
	r4 = D(r4, s0_1_1, 0x81818119, 0xEF17D0D6, 0x0EE7F505, 0x0427E5EB);
	r5 = D(r5, s0_1_1, 0x0105220F, 0xD9FEE7F9, 0x01D5E61F, 0x0DFFED14);
	r6 = D(r6, s0_1_1, 0x16030907, 0xF1F107E3, 0xF0E4EBF9, 0xE705EE12);
	r7 = D(r7, s0_1_1, 0xE70A120B, 0x08EBCFE5, 0x0F091B06, 0xFFF50BFF);
	r0 = D(r0, s0_1_2, 0x02FA02F0, 0x16E10113, 0xFBF2C015, 0xFD07EB01);
	r1 = D(r1, s0_1_2, 0x1EECD22E, 0x0CFF010B, 0x03080505, 0xE9F31C00);
	r2 = D(r2, s0_1_2, 0xFA0E0A09, 0xEDEFEF02, 0x0E0AB939, 0xF4FAF606);
	r3 = D(r3, s0_1_2, 0x090C0E0A, 0x0022F011, 0x05F32AF5, 0xE7F3D41C);
	r4 = D(r4, s0_1_2, 0x0419061A, 0xF6F5F5E8, 0x120804FB, 0xFB3FF212);
	r5 = D(r5, s0_1_2, 0x0D060AF5, 0xF7F5CF19, 0xFFF2F6F4, 0xF00AF5FC);
	r6 = D(r6, s0_1_2, 0xE1FAFF0B, 0xF5F10607, 0x200511FE, 0x02FC17DF);
	r7 = D(r7, s0_1_2, 0xE8FE12F9, 0xDFD0CBE2, 0xFD05F91E, 0x09180115);
	r0 = D(r0, s0_2_0, 0x11070F08, 0xEF14D23B, 0x0EF7E4F6, 0x09F7E61A);
	r1 = D(r1, s0_2_0, 0xF6E714FA, 0x1513FDFE, 0xFDF6F404, 0xF812F002);
	r2 = D(r2, s0_2_0, 0x0C02F7FB, 0x1305F90F, 0xFCD3CCE7, 0xFAFDCB1A);
	r3 = D(r3, s0_2_0, 0x02F3F80E, 0xFCFA1EFB, 0x100B17DC, 0x100402ED);
	r4 = D(r4, s0_2_0, 0xD4DDAFEA, 0xE707C510, 0xF803EFF2, 0xF3041407);
	r5 = D(r5, s0_2_0, 0x06F70D10, 0x17F609F7, 0x11F608F1, 0x1F0C15F2);
	r6 = D(r6, s0_2_0, 0x01FF0002, 0x04FFF2FD, 0xECF40AFA, 0x010CD227);
	r7 = D(r7, s0_2_0, 0xF80709FF, 0xFA0CEEFD, 0xF2E30606, 0xFB05E5E2);
	r0 = D(r0, s0_2_1, 0x0711F80B, 0x08311AAE, 0x10DFC9EA, 0x1DEE02DD);
	r1 = D(r1, s0_2_1, 0xD5DFD40F, 0xEDDEF90F, 0x020101FF, 0x20F6F321);
	r2 = D(r2, s0_2_1, 0x0A11060A, 0xF0F1EFFE, 0xF9358124, 0xF6EFCC03);
	r3 = D(r3, s0_2_1, 0xFEFB0306, 0x09081D06, 0xD4BF43D1, 0xF9E8FBFE);
	r4 = D(r4, s0_2_1, 0xFBC4FB02, 0xFFF0EEF3, 0x040501FD, 0x08090801);
	r5 = D(r5, s0_2_1, 0xFC030008, 0xD4001D02, 0x0DFF060C, 0xFD30020D);
	r6 = D(r6, s0_2_1, 0x14141A0B, 0x0F100A0A, 0x01E807FC, 0x1003CB0B);
	r7 = D(r7, s0_2_1, 0xFEF70504, 0x0B1520FD, 0x0E0FFC11, 0x05FFFCD3);
	r0 = D(r0, s0_2_2, 0x08F1F9F3, 0x0406B73B, 0xFC1600EC, 0xF4DFF201);
	r1 = D(r1, s0_2_2, 0x1429F40B, 0x05ECF0EC, 0x0001FD05, 0xF1FF35ED);
	r2 = D(r2, s0_2_2, 0xFF0009F5, 0x010900F3, 0x13FC813B, 0xFBF5FD08);
	r3 = D(r3, s0_2_2, 0x00050AF8, 0xF0FEFCF3, 0x021AF51F, 0xF6ECFE06);
	r4 = D(r4, s0_2_2, 0x0AF60FD0, 0xF9F6FFF4, 0xFF0E0AFC, 0x000DF52C);
	r5 = D(r5, s0_2_2, 0x020C0713, 0xFCF3D41F, 0x030428E8, 0xF0F401F7);
	r6 = D(r6, s0_2_2, 0xFAF20512, 0x0309FFFE, 0x080306F7, 0x07FEF8D9);
	r7 = D(r7, s0_2_2, 0xFE07FC01, 0xE716E114, 0xF5FEF7F3, 0xEDEE02DF);
	r0 = D(r0, s1_0_0, 0x1CFA0DDA, 0xF3F004F1, 0x1910F1EF, 0x3C1E07F8);
	r1 = D(r1, s1_0_0, 0x1402F6FB, 0x0DE8200D, 0x06FFF800, 0x1704FE04);
	r2 = D(r2, s1_0_0, 0xFF05FEF5, 0xEC1108F5, 0x0B091116, 0x1EF5FFB4);
	r3 = D(r3, s1_0_0, 0xFC080809, 0xF10DFE09, 0xFEFCF516, 0xC926F5FE);
	r4 = D(r4, s1_0_0, 0xEBCFC2F7, 0x0803EAFC, 0x0108090B, 0x21FFFAC9);
	r5 = D(r5, s1_0_0, 0xF7F8E104, 0xF50BEE09, 0xDFF5F501, 0x0AFE07F0);
	r6 = D(r6, s1_0_0, 0xFD060FFC, 0xF7F5F7F3, 0x041906FD, 0x1718E7E7);
	r7 = D(r7, s1_0_0, 0xFFF419ED, 0xFDEE1B0C, 0xDA100412, 0xFAF9FE03);
	r0 = D(r0, s1_0_1, 0x18FCFA05, 0xEF10F1EF, 0xF4EAEEE9, 0xF9EDF2D6);
	r1 = D(r1, s1_0_1, 0xF335FF0A, 0x00F2EF29, 0xFF0209FF, 0xFB00FF25);
	r2 = D(r2, s1_0_1, 0xFA0A0713, 0xFBF8FCE9, 0x0C1B0922, 0x07EEEE81);
	r3 = D(r3, s1_0_1, 0xFC0C060D, 0x1607F39E, 0xC820260E, 0x0F1D1EFF);
	r4 = D(r4, s1_0_1, 0xDD006EFF, 0x19F90408, 0xFC0FFF17, 0x0E2FF88B);
	r5 = D(r5, s1_0_1, 0xEAF003D6, 0x2831EB8C, 0x111E08F9, 0xFF05EFF9);
	r6 = D(r6, s1_0_1, 0xFD0707FC, 0x0000FFFB, 0xF50FFB03, 0xF7251B19);
	r7 = D(r7, s1_0_1, 0xF4FCF0F8, 0xE5DCFEE4, 0x17FBEACC, 0xEDF00423);
	r0 = D(r0, s1_0_2, 0xF603F90F, 0xFA2CF7E6, 0xFE1414FF, 0x02E21C06);
	r1 = D(r1, s1_0_2, 0xF7EAE208, 0x08FE00F8, 0x02010304, 0x14FCE1F4);
	r2 = D(r2, s1_0_2, 0x05010000, 0x091906EB, 0x080F1FF9, 0x0CEF0100);
	r3 = D(r3, s1_0_2, 0x0703F5FF, 0xFA160DF0, 0x34FD1C13, 0x0012D705);
	r4 = D(r4, s1_0_2, 0xBF12F2EC, 0x07070C0B, 0x04010A03, 0xFA0519D3);
	r5 = D(r5, s1_0_2, 0x15D9F801, 0xE61A20EC, 0xF3FE0B07, 0x0AF007FB);
	r6 = D(r6, s1_0_2, 0xF40F10F8, 0xFEFA0001, 0x080FFFF1, 0x330CFAF0);
	r7 = D(r7, s1_0_2, 0x0C14EC14, 0xFAE7FDFE, 0x050FFA0A, 0x03F9ED02);
	r0 = D(r0, s1_1_0, 0x04FDFDE9, 0x28FBE9FA, 0x2AF719FD, 0xFD1F131E);
	r1 = D(r1, s1_1_0, 0x10020901, 0xF116FAE6, 0xEB03FD07, 0x02F4EEFD);
	r2 = D(r2, s1_1_0, 0x17020300, 0x0417FEFE, 0xCF070E10, 0xE1F0FFD5);
	r3 = D(r3, s1_1_0, 0xFB120608, 0xF20C040B, 0xFBFEE7FA, 0x0F13150A);
	r4 = D(r4, s1_1_0, 0xF6FF2DEF, 0x0FEA07E3, 0x1AF1000D, 0x04050A07);
	r5 = D(r5, s1_1_0, 0xF003F510, 0x35FAFDEF, 0xFDF01914, 0xEC09FD28);
	r6 = D(r6, s1_1_0, 0xFF031D06, 0xFAF60DF1, 0xE00301F8, 0x110512E3);
	r7 = D(r7, s1_1_0, 0xE1EAF9E5, 0xE9FD1E07, 0xEF0A0400, 0x1DE0000D);
	r0 = D(r0, s1_1_1, 0xEAFD0DF3, 0xF308191A, 0xF509DEEE, 0x43DAFCEF);
	r1 = D(r1, s1_1_1, 0x09190BBB, 0x091FF62E, 0x0B02ED0A, 0x1803E41C);
	r2 = D(r2, s1_1_1, 0xF108F959, 0xD60E1312, 0xEA1FDEB9, 0xF320FC14);
	r3 = D(r3, s1_1_1, 0x130311FD, 0x0917F322, 0xA12ED4E2, 0xD8ED6DF7);
	r4 = D(r4, s1_1_1, 0x9D151F07, 0xF4E7F718, 0x1B01F100, 0xFD11F2DC);
	r5 = D(r5, s1_1_1, 0xFA0017FD, 0xF40B0895, 0xE7F7F51B, 0xFC121624);
	r6 = D(r6, s1_1_1, 0xFB1B27EA, 0xE104E7F6, 0xF9F9F0F1, 0xC9E7F327);
	r7 = D(r7, s1_1_1, 0x071000F4, 0xD2F5E306, 0x25FA10BA, 0x05F6FF24);
	r0 = D(r0, s1_1_2, 0x101407F5, 0xD1190109, 0x1A0F1CFB, 0xFBF50EF9);
	r1 = D(r1, s1_1_2, 0x211DFBE2, 0x04211400, 0x05F80008, 0x0CFE0805);
	r2 = D(r2, s1_1_2, 0x070E0311, 0xFD0DEB02, 0x0B4AE802, 0xE3FFFB09);
	r3 = D(r3, s1_1_2, 0x02F403F2, 0xF9F9FDF4, 0xEDE42CFB, 0xE605E6FF);
	r4 = D(r4, s1_1_2, 0x41D481E9, 0x07F5EE22, 0x0600FBF5, 0x0DF515F3);
	r5 = D(r5, s1_1_2, 0xDDE4F809, 0x140700B9, 0x0713F402, 0xFAF8EA1B);
	r6 = D(r6, s1_1_2, 0xF00B2906, 0x06F1061D, 0x0A0810F3, 0x2AF4FA1A);
	r7 = D(r7, s1_1_2, 0xFAF91217, 0x21CDF1E8, 0xF81710EF, 0x10F80BFA);
	r0 = D(r0, s1_2_0, 0x02050DFA, 0xE9E8EAE0, 0x030A0801, 0x0520F8FF);
	r1 = D(r1, s1_2_0, 0x2A0116FF, 0xE2FC0300, 0x07F8FD03, 0x15131C07);
	r2 = D(r2, s1_2_0, 0xF608FEFE, 0xFDFFF0FA, 0xDC08F5FB, 0x03EDFAE7);
	r3 = D(r3, s1_2_0, 0xFA01FDFB, 0x08040703, 0xD00CE1FA, 0x1128FA00);
	r4 = D(r4, s1_2_0, 0x0023E400, 0x04ECEF04, 0x06FB01FB, 0x05041008);
	r5 = D(r5, s1_2_0, 0xFAF20305, 0x19062205, 0x1307FC10, 0xF4070207);
	r6 = D(r6, s1_2_0, 0x1A0A0700, 0xFE0F0206, 0x240E0CFE, 0xF80805FF);
	r7 = D(r7, s1_2_0, 0x05F7FB03, 0xEBFC17F2, 0x27151505, 0x060CF804);
	r0 = D(r0, s1_2_1, 0x250BFBF4, 0xE33B1DE9, 0x01F61E1F, 0xF61AF1E5);
	r1 = D(r1, s1_2_1, 0xF8EDFA00, 0xE708F111, 0xF8000B00, 0xD906F8F1);
	r2 = D(r2, s1_2_1, 0xFBF5F905, 0xEEF5FD08, 0xCE00FDF8, 0x230B0D11);
	r3 = D(r3, s1_2_1, 0xFFFC0A0B, 0x06080C0E, 0xEF3E2711, 0x0B07F3F7);
	r4 = D(r4, s1_2_1, 0xF810EF11, 0xDFEF2215, 0x04F60BFB, 0xD2F0E704);
	r5 = D(r5, s1_2_1, 0x0BF8FC0A, 0xEBEFFB0D, 0x14F81FFA, 0xEFEB10FC);
	r6 = D(r6, s1_2_1, 0x04091902, 0xFB0B00FE, 0x0C00F8FB, 0x060CEDFC);
	r7 = D(r7, s1_2_1, 0x01011106, 0xF9FBEBF3, 0xD80505FC, 0xE4FA04FF);
	r0 = D(r0, s1_2_2, 0x191C03FF, 0x02E5DDF3, 0x00FF0B0E, 0x030DF4F2);
	r1 = D(r1, s1_2_2, 0x01DC12D0, 0xFB18170E, 0xF7F1FA07, 0x1C3405ED);
	r2 = D(r2, s1_2_2, 0x00F908FF, 0x051110FB, 0xBC05F5FB, 0xF8041606);
	r3 = D(r3, s1_2_2, 0xF7F90802, 0x0114FE08, 0xCAC5E5FC, 0x15F31908);
	r4 = D(r4, s1_2_2, 0x98FC1401, 0xD1DF100C, 0x0AF502FE, 0xE8F7FFF8);
	r5 = D(r5, s1_2_2, 0xE9F506F4, 0x1909EAFB, 0x1AF605F9, 0x04FF0FFB);
	r6 = D(r6, s1_2_2, 0xFC0F1002, 0xF2FB0908, 0x0CF60A02, 0x09191F06);
	r7 = D(r7, s1_2_2, 0xFB130B07, 0xFEE3FAFE, 0xFEFFFF0D, 0xFBE604F6);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0200F813, 0xE5F4FAFF, 0x19040420, 0xCE09F5F9);
	r1 = D(r1, s0_0_0, 0x09DA1408, 0xE1F5F300, 0xFD03FD04, 0xE30BEF02);
	r2 = D(r2, s0_0_0, 0xFA0B05FD, 0x07EF0BFD, 0x02E8F8EA, 0x06FE0706);
	r3 = D(r3, s0_0_0, 0xFB02FF02, 0xF803FEFA, 0xF02E02EB, 0xE4030711);
	r4 = D(r4, s0_0_0, 0xCFF72711, 0xE81FF604, 0x00F2FBFE, 0x260519F4);
	r5 = D(r5, s0_0_0, 0x1D011607, 0x0C0007F8, 0x05F0FCF4, 0xFB080EF9);
	r6 = D(r6, s0_0_0, 0xF0F4FF08, 0xF7F50700, 0xFEED0BFE, 0xCDF1E815);
	r7 = D(r7, s0_0_0, 0x190525EE, 0x25E21DE9, 0x1104FEEA, 0xF6FFF503);
	r0 = D(r0, s0_0_1, 0x06FD0DE4, 0x0AE01310, 0x12052802, 0xDDFC0D1F);
	r1 = D(r1, s0_0_1, 0xD4F70D27, 0xF4BE0307, 0xF6EBF601, 0xECFF0EFC);
	r2 = D(r2, s0_0_1, 0xFEFFFFF6, 0x06F50E1A, 0xC9D2FBEA, 0x1D26F3F5);
	r3 = D(r3, s0_0_1, 0xF4FCFCF7, 0x0D0CFED9, 0x01ECF3D8, 0x150AF5F0);
	r4 = D(r4, s0_0_1, 0xD103F722, 0xFDFFEA02, 0xFC0705EC, 0x27001705);
	r5 = D(r5, s0_0_1, 0xFB09EB9F, 0x260D00DA, 0xE5DEE20D, 0x101FF904);
	r6 = D(r6, s0_0_1, 0xFDFBED05, 0x04EC05FA, 0x0A060910, 0xF2FCE11A);
	r7 = D(r7, s0_0_1, 0x1637C981, 0xDFD21E2C, 0xEE01F2DB, 0xFEDBF9F7);
	r0 = D(r0, s0_0_2, 0xF4F701EC, 0x1301E74C, 0x05F70205, 0xFF0FEF04);
	r1 = D(r1, s0_0_2, 0xFA01FC1D, 0xFBEAF715, 0xFF04FEF9, 0xF2FBF3FB);
	r2 = D(r2, s0_0_2, 0x030CFEF7, 0x0006030A, 0x04ED0D00, 0x03FCFE07);
	r3 = D(r3, s0_0_2, 0x080003FC, 0x04F5F4F2, 0xCFC7DC25, 0x12F710FE);
	r4 = D(r4, s0_0_2, 0x10F003E2, 0xEAE6220C, 0xFD0CFA01, 0xF81820F1);
	r5 = D(r5, s0_0_2, 0xF01A032B, 0xE71E1AF0, 0xFB070E06, 0x0117FB10);
	r6 = D(r6, s0_0_2, 0xEB01FF0A, 0xFE0CFD0C, 0xFEFBF712, 0xF1FAE202);
	r7 = D(r7, s0_0_2, 0xE701F1EB, 0x12EF0B1B, 0x0615FDC2, 0x04EFFB00);
	r0 = D(r0, s0_1_0, 0x09ED060E, 0xE517FAFF, 0x00110920, 0xF8EC1101);
	r1 = D(r1, s0_1_0, 0x20260FF4, 0xDB26FC0A, 0x17FA0303, 0xF90BF4F8);
	r2 = D(r2, s0_1_0, 0x0509FB05, 0x07F50504, 0xF51A0AF9, 0x2AFF1605);
	r3 = D(r3, s0_1_0, 0x0BFC0002, 0x290FFBF3, 0x0FC332C7, 0xDD44FC0A);
	r4 = D(r4, s0_1_0, 0x10F20EF0, 0xFCF60816, 0xE41FEA0B, 0xF40FE1FA);
	r5 = D(r5, s0_1_0, 0x0D10F2F5, 0xE4FFBFFE, 0xD6FDFCF1, 0xF2FDEB02);
	r6 = D(r6, s0_1_0, 0xFF02E6F5, 0x03F8F504, 0xE9FFFE02, 0x1EED3204);
	r7 = D(r7, s0_1_0, 0x12FEEA0C, 0xD925C30A, 0x22F8F8E3, 0xF9FEFB12);
	r0 = D(r0, s0_1_1, 0x030DD401, 0xDE30F915, 0x1001FC1B, 0xEE00F9FE);
	r1 = D(r1, s0_1_1, 0xA8040A17, 0x05FF2C07, 0x1718FC11, 0x1BC910EF);
	r2 = D(r2, s0_1_1, 0x08DEFE04, 0xF9EE1016, 0x0105D7BF, 0x1FF1FC12);
	r3 = D(r3, s0_1_1, 0xF7200FF7, 0x07FFEBEC, 0xFF39F3D4, 0x01FDF907);
	r4 = D(r4, s0_1_1, 0xF2F71831, 0x0C14E52B, 0xFBF90100, 0x18F2F829);
	r5 = D(r5, s0_1_1, 0x0B0301F4, 0xF30214C9, 0xD8F91EEC, 0xF0E20B0D);
	r6 = D(r6, s0_1_1, 0xF20CF3F1, 0xF7130411, 0x010E1C11, 0x16B6F806);
	r7 = D(r7, s0_1_1, 0x01F320ED, 0xF5FCE40B, 0x00EFF3DE, 0x0D06F709);
	r0 = D(r0, s0_1_2, 0xFF0803FC, 0xFFFA23F9, 0x1E01FD15, 0x02F90F26);
	r1 = D(r1, s0_1_2, 0x40BADC0A, 0x151AE2FE, 0x0504FF08, 0xF234F2EE);
	r2 = D(r2, s0_1_2, 0x0204F9EC, 0x0AFB1205, 0xF2DB0D94, 0x11060A0C);
	r3 = D(r3, s0_1_2, 0x0103F207, 0xD8FF14E7, 0x0C0CDF16, 0xE8F8171C);
	r4 = D(r4, s0_1_2, 0x0EF6F6ED, 0x1C070015, 0x05FEF1FF, 0x0FF6EE13);
	r5 = D(r5, s0_1_2, 0x19F8FF09, 0xE0051481, 0x02EA08E5, 0x01E205F8);
	r6 = D(r6, s0_1_2, 0xFBF700EB, 0xFB0C17F8, 0xEE01EF02, 0x131CDDF4);
	r7 = D(r7, s0_1_2, 0xF8F3F808, 0x061630F6, 0xFB0900D0, 0x08ECF3EF);
	r0 = D(r0, s0_2_0, 0x08EEFB03, 0x0513FF12, 0xF8130805, 0x052C1709);
	r1 = D(r1, s0_2_0, 0x0C07F80A, 0x0D011C05, 0x03040402, 0xD8FE0E04);
	r2 = D(r2, s0_2_0, 0xFE07FC04, 0x00FA0609, 0x2C073CF7, 0xFB040C07);
	r3 = D(r3, s0_2_0, 0xF8020008, 0xFF08FDFF, 0x070919E6, 0x02F1CFF5);
	r4 = D(r4, s0_2_0, 0x160AED0E, 0x0611F10D, 0x0108F206, 0x020BF7F9);
	r5 = D(r5, s0_2_0, 0xF7FDFAF9, 0x1F0D0C01, 0xEF0CEFF8, 0xE1071305);
	r6 = D(r6, s0_2_0, 0x020C0CFB, 0x0C02E500, 0xF1080109, 0xF50002FE);
	r7 = D(r7, s0_2_0, 0x0A06EF04, 0x1EFD0800, 0x010B1A04, 0xFE030900);
	r0 = D(r0, s0_2_1, 0xFD001401, 0xE126050D, 0x1002FD01, 0xFE27E407);
	r1 = D(r1, s0_2_1, 0xDC070B01, 0x0E090510, 0x07FFECF9, 0xF900F1E7);
	r2 = D(r2, s0_2_1, 0x00F51700, 0xFE0D090C, 0xE7E60BED, 0xF3001815);
	r3 = D(r3, s0_2_1, 0x01FFF400, 0xF5DA07F0, 0x0D002D08, 0xFDDCFE0F);
	r4 = D(r4, s0_2_1, 0x001B1302, 0xFF120B01, 0x11F0040D, 0x1408F8F2);
	r5 = D(r5, s0_2_1, 0xEF030AF0, 0x01F010E2, 0xFAF210E7, 0xF6F015FD);
	r6 = D(r6, s0_2_1, 0x060A0301, 0x0504ECF6, 0xFCF81111, 0xF612150B);
	r7 = D(r7, s0_2_1, 0x101705F1, 0xFFEB101A, 0x02F814F6, 0x030924EF);
	r0 = D(r0, s0_2_2, 0x030DEE0A, 0xE5DD1EFE, 0xEC00F4DC, 0xE10D0411);
	r1 = D(r1, s0_2_2, 0xFFFCEC23, 0xFB07FAF7, 0x02FE0506, 0x0B040105);
	r2 = D(r2, s0_2_2, 0x03FB04FA, 0xFE0B05F7, 0xEEE1D797, 0xEA0C02F3);
	r3 = D(r3, s0_2_2, 0xF70110FE, 0x030C06EF, 0xDBFBECF4, 0x0FF30E04);
	r4 = D(r4, s0_2_2, 0x0C1DD90C, 0xFB0409EF, 0x0DEEFC04, 0xF50E02FD);
	r5 = D(r5, s0_2_2, 0xF3F600FE, 0xECF813DE, 0x1DF9FD10, 0xFBEE07F7);
	r6 = D(r6, s0_2_2, 0x00F8FA12, 0x090BFCF6, 0x00080BFE, 0x0513EFFD);
	r7 = D(r7, s0_2_2, 0x11090FFB, 0x0ED2E803, 0xFAFD12FB, 0x040609FB);
	r0 = D(r0, s1_0_0, 0xF6FAF1FD, 0x05E1FE03, 0xE7FD05E4, 0xF9EEF50B);
	r1 = D(r1, s1_0_0, 0x1119D218, 0xFD081314, 0xFC080208, 0x1400FC1B);
	r2 = D(r2, s1_0_0, 0x02FC00FF, 0x09F807FF, 0x19F0E41E, 0x0F193A03);
	r3 = D(r3, s1_0_0, 0x05010004, 0xF503FAFD, 0xEB0A0C08, 0x040EF621);
	r4 = D(r4, s1_0_0, 0x2012FCF6, 0xF2ED1DF2, 0xFBF3F9F2, 0x051F0FF4);
	r5 = D(r5, s1_0_0, 0xEB0D06E9, 0x1E02F71B, 0xF5D6FFE7, 0xF3FA1700);
	r6 = D(r6, s1_0_0, 0x0302FDFE, 0xFAF7F9FA, 0xFAF5FE00, 0x0F00E917);
	r7 = D(r7, s1_0_0, 0x01FA24FF, 0x00E9F114, 0xF0F6FA07, 0xFFEE10EA);
	r0 = D(r0, s1_0_1, 0xE3F909F4, 0x12E8B01A, 0x180015DD, 0x21F825E1);
	r1 = D(r1, s1_0_1, 0xE30404F2, 0xFEEB08B2, 0x07080102, 0xE1062414);
	r2 = D(r2, s1_0_1, 0x06F90100, 0x0F06F010, 0x0A10E904, 0xEBE718E4);
	r3 = D(r3, s1_0_1, 0x0CFDF80B, 0x05FB08E4, 0xFF05FF09, 0xF01E2331);
	r4 = D(r4, s1_0_1, 0xD318DC23, 0x13F7FAF7, 0x01F60CE6, 0x08EBF3D6);
	r5 = D(r5, s1_0_1, 0x04F9E6AE, 0x08FE1DF4, 0x22FDE818, 0x0DFD01EC);
	r6 = D(r6, s1_0_1, 0xECFA0BF7, 0x07F00EFB, 0xF0FCFD01, 0x1216DD02);
	r7 = D(r7, s1_0_1, 0x1EC701F2, 0xEEEF1901, 0x1BF8071C, 0xFEEE08EC);
	r0 = D(r0, s1_0_2, 0xE6FE0AFA, 0xF3FF16DE, 0x02EF0112, 0x07042409);
	r1 = D(r1, s1_0_2, 0xE4F51FD9, 0xFBFEFDE6, 0x0603FB07, 0xE4F1D31F);
	r2 = D(r2, s1_0_2, 0x06FF09F7, 0xF010FD04, 0xF2051603, 0xEA19F4EF);
	r3 = D(r3, s1_0_2, 0xF6FFFEFA, 0xFCFBED01, 0xD6F286E6, 0x02F8F91A);
	r4 = D(r4, s1_0_2, 0x28038724, 0xEF0A0DF4, 0x05F405FA, 0x060B110B);
	r5 = D(r5, s1_0_2, 0xD7120902, 0x060F24F6, 0xEE000EEC, 0x00F90205);
	r6 = D(r6, s1_0_2, 0xE6FC06FF, 0x0605FFFD, 0x11E40AFA, 0xE720500E);
	r7 = D(r7, s1_0_2, 0x020D07F7, 0xECE00CF9, 0xF8060516, 0xFD0E1AFD);
	r0 = D(r0, s1_1_0, 0x200909FF, 0x38EBE723, 0xC9E10CFD, 0x1830ED1B);
	r1 = D(r1, s1_1_0, 0x14EB0FFB, 0xEE200200, 0xF002FEFB, 0xF0F821EB);
	r2 = D(r2, s1_1_0, 0x06110506, 0xFFEAFDF0, 0x05F01CF6, 0xECF1FFDB);
	r3 = D(r3, s1_1_0, 0xF503FD01, 0xEB0002EF, 0xD4290A13, 0x001E1F19);
	r4 = D(r4, s1_1_0, 0x18D854FA, 0xEE121B96, 0x0A180A0F, 0x12F9040C);
	r5 = D(r5, s1_1_0, 0x06E90200, 0x25F1E3FA, 0x18F9F91C, 0x0700EA05);
	r6 = D(r6, s1_1_0, 0xFCF5EBF0, 0x140D0EF3, 0x0B0EFC11, 0x05ED0DF3);
	r7 = D(r7, s1_1_0, 0xF70B19D3, 0x1BE1171C, 0x0400F40F, 0xF323F908);
	r0 = D(r0, s1_1_1, 0x121C1512, 0xFA03C038, 0x09FBFB0C, 0x351CE8DD);
	r1 = D(r1, s1_1_1, 0xE90DB884, 0xC506E1FE, 0x04090A38, 0xDF00ECEA);
	r2 = D(r2, s1_1_1, 0xFF07EB0C, 0xF9F3FC31, 0xBF0F0FE3, 0x2CA3F21F);
	r3 = D(r3, s1_1_1, 0x0405F50E, 0x07E90C0A, 0xC6FBDE15, 0xEF060CCE);
	r4 = D(r4, s1_1_1, 0x1B07291B, 0xDFE10D86, 0xFE230BF2, 0x19D010D9);
	r5 = D(r5, s1_1_1, 0x0CF70E1F, 0x30080001, 0xDA0F0509, 0xF923FD15);
	r6 = D(r6, s1_1_1, 0x04E708F1, 0x030811ED, 0xD7010DE5, 0xC4EBD512);
	r7 = D(r7, s1_1_1, 0x10D5F7EB, 0x02CC1F1C, 0x0209FC00, 0xF4FDF204);
	r0 = D(r0, s1_1_2, 0x131AEFFC, 0xC80EF500, 0xE431EFF9, 0xEAFE48F9);
	r1 = D(r1, s1_1_2, 0x32EE45B6, 0xFDF6FC22, 0x1007F4F6, 0x07C9D312);
	r2 = D(r2, s1_1_2, 0xFC04FC05, 0x01FA03FE, 0x3EF1E3CC, 0xFDE5F201);
	r3 = D(r3, s1_1_2, 0xEDFAF520, 0xED0C1BF7, 0x08EC8C01, 0x0CFF1AD6);
	r4 = D(r4, s1_1_2, 0x00F92E2C, 0xE2F6D6FA, 0x00FB0703, 0xEEBA01FA);
	r5 = D(r5, s1_1_2, 0xF1E1EAF2, 0x371B2BF3, 0xE2040C24, 0xE7F605DC);
	r6 = D(r6, s1_1_2, 0xF11EFDFE, 0xFD17F3FD, 0x0304F011, 0x07BEB812);
	r7 = D(r7, s1_1_2, 0xF7F70C04, 0xF94A223E, 0x14030EFC, 0x0FED1AF5);
	r0 = D(r0, s1_2_0, 0x00EDF4F5, 0xF02702DE, 0x13E30A01, 0xF00509FD);
	r1 = D(r1, s1_2_0, 0x11FCFF0C, 0xF70004FE, 0x020108FF, 0x000A070E);
	r2 = D(r2, s1_2_0, 0xF9FA0804, 0xF306FA06, 0x03381106, 0x030F1AFE);
	r3 = D(r3, s1_2_0, 0x070A0708, 0x0AEFF814, 0xD3FFEB13, 0x1508F6FF);
	r4 = D(r4, s1_2_0, 0x0212E9F7, 0xFFFE03F7, 0x04FDFDFA, 0xF80C060F);
	r5 = D(r5, s1_2_0, 0xF6FB0408, 0x0E03EDF4, 0xFC0AF808, 0xFDEDF700);
	r6 = D(r6, s1_2_0, 0xFDFDFF05, 0x0707ED07, 0x1013FB07, 0xF3F93DFB);
	r7 = D(r7, s1_2_0, 0x060705FC, 0x0B3DECF3, 0x0604F30B, 0x0707FAF4);
	r0 = D(r0, s1_2_1, 0xFAFCF203, 0x3E080FD1, 0x0EE612DC, 0x1C0201CC);
	r1 = D(r1, s1_2_1, 0x04DFFDF3, 0xE1061707, 0x04F211FB, 0x32D00AD2);
	r2 = D(r2, s1_2_1, 0xFBEB02FA, 0x0F040503, 0x68BACC94, 0x0CCFF108);
	r3 = D(r3, s1_2_1, 0x03F00F09, 0xF8E10B00, 0x24B7D90D, 0xF923C40D);
	r4 = D(r4, s1_2_1, 0xF1180406, 0xF2EFF8F2, 0x060000E4, 0x000AF2E3);
	r5 = D(r5, s1_2_1, 0x0C05FDF7, 0x1DF81517, 0x0D01FE10, 0xF70208FB);
	r6 = D(r6, s1_2_1, 0xF60AFEF9, 0xF0FF0007, 0xF4F61103, 0xF8ECF9F0);
	r7 = D(r7, s1_2_1, 0x09E0011B, 0x231110DE, 0x08E61A0B, 0x1CE2F0E8);
	r0 = D(r0, s1_2_2, 0x06050301, 0xF747F2F2, 0x04ED0B07, 0x1826FE13);
	r1 = D(r1, s1_2_2, 0x31F81DCC, 0xFE081300, 0xFBF4FFF8, 0x0536F415);
	r2 = D(r2, s1_2_2, 0xFDF609FD, 0x021CF90B, 0x30AE25E3, 0xE81A2314);
	r3 = D(r3, s1_2_2, 0xED04F3EF, 0x0501F003, 0xFE16FF0A, 0xFA1A24FB);
	r4 = D(r4, s1_2_2, 0xF5ACDADA, 0xF9011DEF, 0xFFF007E7, 0x0BD414F2);
	r5 = D(r5, s1_2_2, 0xFDFBF606, 0x00FA1205, 0x0B0B1CF1, 0x17110E0B);
	r6 = D(r6, s1_2_2, 0x000F0407, 0xFFEEF803, 0xFA11F5F9, 0x0CF0FEEC);
	r7 = D(r7, s1_2_2, 0xF8EBF209, 0xE1B621DC, 0x0EF8F906, 0x07001307);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.229e-02, -7.202e-02, 6.060e-03, -3.309e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(6.130e-03, -4.064e-02, 1.425e-02, -4.912e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-3.851e-03, 1.943e-02, 3.837e-02, -5.156e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.523e-02, 1.737e-02, -2.254e-02, -4.944e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-4.213e-02, 8.423e-03, 1.958e-02, 6.151e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.775e-02, 1.353e-03, -1.368e-02, -1.727e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.548e-01, 2.130e-02, 3.903e-04, -1.659e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(4.619e-03, -5.134e-02, 2.105e-02, -1.602e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-DS-conv3
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFFFE02FD, 0xF5F605FA, 0x14050A0A, 0xF2F30C05);
	r1 = D(r1, s0_0_0, 0x03FF06FE, 0x00FE0B07, 0x05FA1505, 0x15FA04F5);
	r2 = D(r2, s0_0_0, 0xD7132106, 0xF211E00F, 0x0BEDE9F2, 0xFFFAF000);
	r3 = D(r3, s0_0_0, 0x18FAF1E6, 0xF8010BFF, 0xF203F4FF, 0x07F605F8);
	r4 = D(r4, s0_0_0, 0xF80BF806, 0x19FD0BFD, 0xF9FF03F9, 0xFD0BF804);
	r5 = D(r5, s0_0_0, 0x01F8DB19, 0x0D000FF8, 0xED07E50D, 0x0206ED02);
	r6 = D(r6, s0_0_0, 0xF714050A, 0x0005F90A, 0xF928DDDE, 0xFEF109E8);
	r7 = D(r7, s0_0_0, 0xFEFBFDFC, 0x1005F410, 0xFDFDF411, 0x11FB0101);
	r0 = D(r0, s0_0_1, 0xFD060CFA, 0xFEFDEFFB, 0x0809070B, 0xFEF7FEFC);
	r1 = D(r1, s0_0_1, 0x0405FA04, 0xFC0309FC, 0xFDFF0409, 0x0EF50B0A);
	r2 = D(r2, s0_0_1, 0xEC00FD02, 0xE0FCDCFA, 0xE6FBEAED, 0xFB01F0F8);
	r3 = D(r3, s0_0_1, 0x071A070B, 0x01171215, 0x09FD06F3, 0xFFFF0F02);
	r4 = D(r4, s0_0_1, 0x0AF6FBFB, 0xD0110E02, 0xF307FB08, 0x0F06E701);
	r5 = D(r5, s0_0_1, 0xEA071DFE, 0xFE050204, 0x091223F7, 0x05FE1101);
	r6 = D(r6, s0_0_1, 0x04081309, 0xFFFDF0EE, 0xE7D310E8, 0xEDFD0B13);
	r7 = D(r7, s0_0_1, 0xFC0300F5, 0x0DF902FB, 0x040216F8, 0xF8FD1AFA);
	r0 = D(r0, s0_0_2, 0xFC081A05, 0xFE03DE07, 0x0EEE12FE, 0x0407FD08);
	r1 = D(r1, s0_0_2, 0x01020300, 0x01040E04, 0xF00CFE07, 0xFF0F170D);
	r2 = D(r2, s0_0_2, 0x04F001F9, 0xEFECEB0D, 0x0DE02A0F, 0xFE03E9FA);
	r3 = D(r3, s0_0_2, 0x020505FC, 0xFF120705, 0xFC0AFE0F, 0x0305FC0A);
	r4 = D(r4, s0_0_2, 0xF9EFFDF6, 0x39FC11F9, 0x10FF02FC, 0x0809F9FE);
	r5 = D(r5, s0_0_2, 0xFF09CF09, 0x10010700, 0xFA04190A, 0xF804F80B);
	r6 = D(r6, s0_0_2, 0xFD0AF20E, 0x0406D214, 0x030FDE16, 0xF1EAFD04);
	r7 = D(r7, s0_0_2, 0xFF0402FB, 0x0A16E208, 0x0BF4F207, 0x02F6110A);
	r0 = D(r0, s0_1_0, 0x0BF417F6, 0xF5FDEB08, 0x16F81CFF, 0xF50909EE);
	r1 = D(r1, s0_1_0, 0xFFFF01F9, 0x0EE91AFB, 0xFFFFF9E3, 0x0F0D07EF);
	r2 = D(r2, s0_1_0, 0x0F10FEF2, 0x0513F3F6, 0xDE06FA09, 0x0617EAE4);
	r3 = D(r3, s0_1_0, 0xF80DEA13, 0xFF07FEBD, 0x01FF1207, 0x14FB01F7);
	r4 = D(r4, s0_1_0, 0x090603F6, 0xFAF12DF5, 0xFF0504E0, 0xF6FD02F2);
	r5 = D(r5, s0_1_0, 0xFCF1C7FE, 0x030314EB, 0xEBFC09ED, 0xFDFBF606);
	r6 = D(r6, s0_1_0, 0x0306FAFB, 0x0101FF01, 0xFC1E0FDF, 0xE10617D0);
	r7 = D(r7, s0_1_0, 0x0000FEFC, 0xEC01F312, 0x1403F908, 0xF3021603);
	r0 = D(r0, s0_1_1, 0x02FDF8F4, 0xEBF8F52C, 0x01F41004, 0xEAFE0F0B);
	r1 = D(r1, s0_1_1, 0x0702FFF5, 0x040703D4, 0x0C0901F2, 0x1CFE18FE);
	r2 = D(r2, s0_1_1, 0x19F514D7, 0xEDD90DB4, 0xF2FD1F0D, 0x02FC0D01);
	r3 = D(r3, s0_1_1, 0xEF1B13FD, 0xFD10EFE3, 0x0207F8E2, 0x030C1D07);
	r4 = D(r4, s0_1_1, 0x16DCFFDE, 0xC21F2CE0, 0xFAF8F90E, 0xED061206);
	r5 = D(r5, s0_1_1, 0xFDF30FF6, 0x0804FBD9, 0xFB2519E8, 0xF00014EC);
	r6 = D(r6, s0_1_1, 0x0800EDFA, 0xFD0FF109, 0xF2C9E8BF, 0xC2130FF6);
	r7 = D(r7, s0_1_1, 0xF8000307, 0xE3130818, 0x0A0305F1, 0xF90B0B0D);
	r0 = D(r0, s0_1_2, 0xEA030E0E, 0xEC0D00F4, 0x05002617, 0x0903F601);
	r1 = D(r1, s0_1_2, 0x03FE08F8, 0x0404EBF6, 0xEB00FAF3, 0xEA030513);
	r2 = D(r2, s0_1_2, 0x03C91CF6, 0xF514C6E3, 0x8130320D, 0xFAF9F5FB);
	r3 = D(r3, s0_1_2, 0xFC04DE09, 0xFC080310, 0xF108DE0A, 0x140CFAFB);
	r4 = D(r4, s0_1_2, 0xFE04F20F, 0xF3FCF6E0, 0x040406FC, 0x030D0C05);
	r5 = D(r5, s0_1_2, 0x05FADF06, 0x13FE0FFE, 0xFFEFF71C, 0x04FBF601);
	r6 = D(r6, s0_1_2, 0x09FBEFFF, 0xF91507F3, 0xE500DDFC, 0xF90528FE);
	r7 = D(r7, s0_1_2, 0xFDFD000A, 0xF410FF0C, 0x25FEEEFA, 0xF00A0C0B);
	r0 = D(r0, s0_2_0, 0x07FFFBDC, 0xFDFEF6FD, 0xFD02FD03, 0x01F90C02);
	r1 = D(r1, s0_2_0, 0xFFFF02FC, 0x07F9FEDA, 0x0502FFEF, 0x03031607);
	r2 = D(r2, s0_2_0, 0xF6FDFEF6, 0x06040CE6, 0x0A0523FF, 0x01FCFAF6);
	r3 = D(r3, s0_2_0, 0xFF0D061C, 0x0107F9E3, 0xFD0E0701, 0x0402020C);
	r4 = D(r4, s0_2_0, 0x050E08EC, 0xDC04F590, 0xFDFF0100, 0x01FEF60B);
	r5 = D(r5, s0_2_0, 0x0BFEE3FF, 0x09FF140B, 0x0F030FF2, 0x0405FF03);
	r6 = D(r6, s0_2_0, 0x040804FA, 0x01F70000, 0x021703F8, 0x09FC143C);
	r7 = D(r7, s0_2_0, 0x000300FF, 0xFB0AFB04, 0x0D0BF603, 0xFF04FC16);
	r0 = D(r0, s0_2_1, 0x1105EEC4, 0xE5FCF3FE, 0x14F9EAD0, 0xEF080306);
	r1 = D(r1, s0_2_1, 0xFF02F8FD, 0x160501E5, 0xFF0602EF, 0xFEFFFBF6);
	r2 = D(r2, s0_2_1, 0xFC0E14E9, 0xD2F9FFEA, 0xDFF70521, 0xF1F3F1E5);
	r3 = D(r3, s0_2_1, 0xF9FC271F, 0x0D0DDAD0, 0xF9FB0511, 0x0AF500F3);
	r4 = D(r4, s0_2_1, 0x06F2F0F9, 0xC63613EE, 0xFC0A06FC, 0xFFFEF8F5);
	r5 = D(r5, s0_2_1, 0x0A00E720, 0x08FE0500, 0xFC081C1E, 0x01FC0E21);
	r6 = D(r6, s0_2_1, 0x0B00F3FB, 0x0DFF01F4, 0x24123206, 0xF7130A05);
	r7 = D(r7, s0_2_1, 0x000206FD, 0xF3FAFBF4, 0x03FBD7CC, 0xFDFFFBFC);
	r0 = D(r0, s0_2_2, 0xFB06FCE1, 0xF403F70B, 0x0D052301, 0x16FFEFFB);
	r1 = D(r1, s0_2_2, 0x04FD02FD, 0xFE000DE8, 0x00FB0307, 0x27FBF8F0);
	r2 = D(r2, s0_2_2, 0x071016FF, 0x0202E6E2, 0xEFEF0F00, 0x0E020AF9);
	r3 = D(r3, s0_2_2, 0x06FBF708, 0xF91317FA, 0x0610F8ED, 0x060307FF);
	r4 = D(r4, s0_2_2, 0x10F9F9E5, 0xE6FE2981, 0xF8FC0A00, 0xF5FFFDFB);
	r5 = D(r5, s0_2_2, 0xE81E0006, 0x0FFF00FB, 0x05020909, 0x03F60007);
	r6 = D(r6, s0_2_2, 0x07040A0A, 0xFC02FD07, 0xE100C1DE, 0x06ECFF08);
	r7 = D(r7, s0_2_2, 0xFC040001, 0xFA08F1E4, 0x06F603EA, 0x01FFF8FE);
	r0 = D(r0, s1_0_0, 0x0600020A, 0xF10B02F9, 0x0511F915, 0xF0F70804);
	r1 = D(r1, s1_0_0, 0x03FC02FF, 0x0CFF0406, 0xFDF1F9F8, 0x06FCF908);
	r2 = D(r2, s1_0_0, 0x19081205, 0x1B000410, 0xF8F706FA, 0xFC03FEFC);
	r3 = D(r3, s1_0_0, 0xFA05F80C, 0x18030210, 0x03090715, 0x07FDF801);
	r4 = D(r4, s1_0_0, 0x190001F6, 0x0CE2F8F9, 0xF200FF01, 0xFE060502);
	r5 = D(r5, s1_0_0, 0xF2000BE2, 0x0DE9F7FD, 0xEBF111F6, 0xF505FF03);
	r6 = D(r6, s1_0_0, 0xFF00010D, 0xF3FD06F9, 0xD8E516D9, 0xE911F700);
	r7 = D(r7, s1_0_0, 0xF604FF08, 0xF8F6FF10, 0x05E80F0B, 0xF5FE0BF4);
	r0 = D(r0, s1_0_1, 0x0E0209FC, 0xEF0409F6, 0x0CF7F2FF, 0x0B1701F5);
	r1 = D(r1, s1_0_1, 0xFEFDFE08, 0x14F3FC0C, 0xF40AFE02, 0x16FBF613);
	r2 = D(r2, s1_0_1, 0xE8E10010, 0xE8040F06, 0xF40200F5, 0xDFDE05F3);
	r3 = D(r3, s1_0_1, 0xF7070213, 0xF1EB1902, 0xFDEFFEFB, 0xFE07FB06);
	r4 = D(r4, s1_0_1, 0x05F401FB, 0x19E1F40F, 0xF2FD02F1, 0xF809FF01);
	r5 = D(r5, s1_0_1, 0xCCEE08E4, 0x03E9FF11, 0xDEF8090D, 0xEBF904F9);
	r6 = D(r6, s1_0_1, 0x02FEF404, 0xD5ED06F6, 0xF4FEE0EB, 0xF604150D);
	r7 = D(r7, s1_0_1, 0x000209FC, 0x0BFEF306, 0x06EA0205, 0xEEEA19F7);
	r0 = D(r0, s1_0_2, 0xFF0608FE, 0xF4FA0AF7, 0x0C01F80B, 0x01FBFDFE);
	r1 = D(r1, s1_0_2, 0x00F50004, 0x0D090013, 0xF9F602F5, 0xFEFAFD07);
	r2 = D(r2, s1_0_2, 0x2502F210, 0x05F7F315, 0x0EC71DE9, 0x130DF7FC);
	r3 = D(r3, s1_0_2, 0x06F606FC, 0xF9F913F7, 0xF5F20203, 0xFDE60508);
	r4 = D(r4, s1_0_2, 0x100EEC18, 0xF9F1FFF0, 0xFBFEFDF8, 0x05FBFDFF);
	r5 = D(r5, s1_0_2, 0x010D04FD, 0x04F4F60A, 0x0904F7F0, 0xFFEF0200);
	r6 = D(r6, s1_0_2, 0xFCD90C05, 0xFAE8070E, 0xFAD10423, 0x11FCFE09);
	r7 = D(r7, s1_0_2, 0x040502FB, 0xFBF00603, 0xD811001D, 0xFEFD0EEE);
	r0 = D(r0, s1_1_0, 0xF5F603FA, 0xF6FBFE07, 0xE9FA031D, 0xFFD80BF1);
	r1 = D(r1, s1_1_0, 0xFF09FB01, 0xF6EE0008, 0x0500F2FD, 0x02F7FFFF);
	r2 = D(r2, s1_1_0, 0x05F804E2, 0x03F9EFF9, 0x1EF2091E, 0xFD02FED9);
	r3 = D(r3, s1_1_0, 0xFEFDF7D8, 0xDF050D02, 0xEB080408, 0x12EE0606);
	r4 = D(r4, s1_1_0, 0x09FF0002, 0x05C7F207, 0xFBD212EC, 0x0DF9FFF8);
	r5 = D(r5, s1_1_0, 0x2409E8F4, 0x23D6F2FC, 0x05EE08E8, 0x07100300);
	r6 = D(r6, s1_1_0, 0x02FE0610, 0xFCFB0008, 0x05FD03F1, 0x12E213F1);
	r7 = D(r7, s1_1_0, 0xFFF804FA, 0xFE0DFBFF, 0xE708F712, 0x04F30DFC);
	r0 = D(r0, s1_1_1, 0xE62607FE, 0x1B39E4F5, 0x09AFF805, 0x0D5418D2);
	r1 = D(r1, s1_1_1, 0x0913F708, 0xEB03F302, 0xF3FEEE08, 0xFE08DA1C);
	r2 = D(r2, s1_1_1, 0x15D50DCF, 0x28D61DFD, 0x46170FF5, 0x1F270AE2);
	r3 = D(r3, s1_1_1, 0xF3E3E5E7, 0xE8E8F60F, 0x03DE09FC, 0x0E47D50A);
	r4 = D(r4, s1_1_1, 0x14F30B0F, 0x07EE392A, 0xFAC60EEA, 0xF72111F5);
	r5 = D(r5, s1_1_1, 0xCAF405D7, 0x07EEF015, 0xDAF90BF2, 0x03DD0AF7);
	r6 = D(r6, s1_1_1, 0xF9E4EC0A, 0xF31113EB, 0x8FFE0B00, 0x280C15EF);
	r7 = D(r7, s1_1_1, 0xF53A08FF, 0xE32CFCED, 0xEDE80304, 0x0D1210EB);
	r0 = D(r0, s1_1_2, 0xF8DD08ED, 0xF8110CF3, 0x0BEA06FA, 0xFCE3FE0B);
	r1 = D(r1, s1_1_2, 0x01F50604, 0x0CF1FBE3, 0x09FB0802, 0x08D7FF11);
	r2 = D(r2, s1_1_2, 0x0CEC0FF0, 0x04FC072C, 0x041320BB, 0xFEFAFF08);
	r3 = D(r3, s1_1_2, 0x0304F914, 0x03101FFF, 0x03F4FB0C, 0x02EE0111);
	r4 = D(r4, s1_1_2, 0x03F0EF12, 0x13F622EE, 0xFFF206EF, 0x001105F2);
	r5 = D(r5, s1_1_2, 0xF3F4280A, 0x06F9F907, 0x08FE0026, 0xFE03FD0F);
	r6 = D(r6, s1_1_2, 0x03FB0407, 0xF6FB04F9, 0xF4D84006, 0x142FFFFF);
	r7 = D(r7, s1_1_2, 0xFD0704FA, 0xFDE2F51B, 0x1722FA01, 0xF30D1AF9);
	r0 = D(r0, s1_2_0, 0xE5FDFDF9, 0xF9090300, 0x03FCEFF6, 0x040300F9);
	r1 = D(r1, s1_2_0, 0xFDFD00FF, 0xCDFCFFF8, 0x0AF60A02, 0xFBFF07FB);
	r2 = D(r2, s1_2_0, 0x0C0603F2, 0xFB081412, 0xEFEA03D3, 0x04F006F4);
	r3 = D(r3, s1_2_0, 0xF9020F0C, 0xFCF50D0C, 0x0F070915, 0x030EF600);
	r4 = D(r4, s1_2_0, 0xF7FBFD05, 0xFED6EBC0, 0xF5ED09FB, 0x020404FB);
	r5 = D(r5, s1_2_0, 0x1C08FD0B, 0xF9FFE6F1, 0x07FD0206, 0xFFFE0011);
	r6 = D(r6, s1_2_0, 0xF7FA0606, 0xF7F501F9, 0x2C011A1A, 0xF3F105E7);
	r7 = D(r7, s1_2_0, 0x01010204, 0x0A0D1305, 0xEDE70402, 0x01FE0004);
	r0 = D(r0, s1_2_1, 0xF000F50A, 0x01030BFB, 0xF7F7B912, 0xFBFB0805);
	r1 = D(r1, s1_2_1, 0x010F0804, 0xFC04EB00, 0x00060DEF, 0xFDF5FC1D);
	r2 = D(r2, s1_2_1, 0x0E2D0907, 0x1BE6D4FA, 0x1600F381, 0x09F903F6);
	r3 = D(r3, s1_2_1, 0xFF0AF2E7, 0xF5FB0DF9, 0x05081601, 0x0809F207);
	r4 = D(r4, s1_2_1, 0xEB07EC02, 0x020827E7, 0x0CF3FB00, 0x06FF0409);
	r5 = D(r5, s1_2_1, 0xF3F7D2DF, 0xF8FBD30A, 0x061021B0, 0x080CF7F7);
	r6 = D(r6, s1_2_1, 0xFEFEF2FF, 0x0D0E0B0E, 0x430AD7F2, 0x0FDB13D5);
	r7 = D(r7, s1_2_1, 0xFA040AF9, 0x100A24FE, 0x0705EA08, 0x0509FE0B);
	r0 = D(r0, s1_2_2, 0x090F0AF4, 0x02F911F2, 0x100BE30B, 0x00080200);
	r1 = D(r1, s1_2_2, 0x03FE0604, 0xFE1A28DC, 0x010008FA, 0x03098115);
	r2 = D(r2, s1_2_2, 0x0F0802D5, 0x100E05EC, 0x10FE3781, 0x10FAFC0E);
	r3 = D(r3, s1_2_2, 0xFE030512, 0x0A0B0CE8, 0xFE020CF8, 0x01FCF709);
	r4 = D(r4, s1_2_2, 0x04FCE6F5, 0xFFD42ABD, 0x060BFD06, 0x0604FE07);
	r5 = D(r5, s1_2_2, 0xFB0519FE, 0xFCF8010D, 0x04E9F8FD, 0xFDFEF905);
	r6 = D(r6, s1_2_2, 0x031309F6, 0x04FF0CF2, 0x18F22B04, 0x04E60401);
	r7 = D(r7, s1_2_2, 0xFFFB00FD, 0x0B030DFF, 0x1D220415, 0xFFFB0105);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFB0D04FD, 0x01FFF504, 0x03E1F30C, 0x0E0804F4);
	r1 = D(r1, s0_0_0, 0xFFFE000B, 0xFE1107FE, 0xFE0E0107, 0x03130A14);
	r2 = D(r2, s0_0_0, 0xFAD01504, 0xFBECF603, 0x0AB712D2, 0xF0E8F408);
	r3 = D(r3, s0_0_0, 0x051BEBF5, 0xFF0D081E, 0x04090303, 0xFE1AFB0C);
	r4 = D(r4, s0_0_0, 0x050B07F7, 0x1F09C50A, 0x0D0908F3, 0x0103F80A);
	r5 = D(r5, s0_0_0, 0xF0DDDAE9, 0x061CF30A, 0xF9161439, 0x06F8F9F4);
	r6 = D(r6, s0_0_0, 0x01040805, 0x01F1EF0F, 0xFEDF14E9, 0x02E0F2F0);
	r7 = D(r7, s0_0_0, 0xFEFDFB01, 0x020C0223, 0x15D9140F, 0x0FF6F3DE);
	r0 = D(r0, s0_0_1, 0x000E01DB, 0xFE0600E5, 0x06E81512, 0x0AD80309);
	r1 = D(r1, s0_0_1, 0xFD0502FB, 0x0A140119, 0xEF21FCD0, 0xFA25FB0A);
	r2 = D(r2, s0_0_1, 0x15122C28, 0x1BF41C35, 0x1A11C31B, 0x07F7010E);
	r3 = D(r3, s0_0_1, 0xEBFF0EDA, 0xFF1AF209, 0xFD05E905, 0xFB230509);
	r4 = D(r4, s0_0_1, 0x0DF3013B, 0xF41C1838, 0x06FC080E, 0x03FC0511);
	r5 = D(r5, s0_0_1, 0x21E8F8D4, 0x1409160A, 0x02F7F00A, 0x06FD04E6);
	r6 = D(r6, s0_0_1, 0x041A0F13, 0x0AFA0202, 0x15F5102F, 0xFBF02AEB);
	r7 = D(r7, s0_0_1, 0xFEF8FBFE, 0xFD0DEAF3, 0x0929DEFF, 0xFD00E9C6);
	r0 = D(r0, s0_0_2, 0x0205F600, 0x04F507FD, 0x19EEFF0C, 0xEEFFE803);
	r1 = D(r1, s0_0_2, 0x02060304, 0x0817E016, 0x011C1105, 0x072A1604);
	r2 = D(r2, s0_0_2, 0x22E4E52D, 0xFFE704C9, 0x1EDBEDE6, 0x10FAD216);
	r3 = D(r3, s0_0_2, 0xFA0A1903, 0x020411F8, 0xF01001EB, 0x06120A00);
	r4 = D(r4, s0_0_2, 0x0A03F2EF, 0x1DC71BF3, 0x01E6040B, 0x01EAFA07);
	r5 = D(r5, s0_0_2, 0x04CEF3EC, 0x0DF60A05, 0xF80912E7, 0xFE0010FA);
	r6 = D(r6, s0_0_2, 0x00160F02, 0xFCE70A03, 0xB70323D4, 0x0EC3FFF4);
	r7 = D(r7, s0_0_2, 0x05F3FD03, 0xE410FCEB, 0xE8F8DB0D, 0x02DA15E8);
	r0 = D(r0, s0_1_0, 0xF91B0127, 0xFBFC0106, 0xF3EEE603, 0x13E2EDEF);
	r1 = D(r1, s0_1_0, 0x02FCFF0A, 0x0524F815, 0xFE0312FD, 0x0703FC0A);
	r2 = D(r2, s0_1_0, 0x11D4F60E, 0x1AFBF7D2, 0xEE0EF9FC, 0x0EDA0BD0);
	r3 = D(r3, s0_1_0, 0xF512090A, 0x0808FC12, 0x06080B09, 0xF40DFB0A);
	r4 = D(r4, s0_1_0, 0x13E0FAF3, 0x091FE51C, 0x0EFBFF03, 0x0201FD01);
	r5 = D(r5, s0_1_0, 0xE10F0DFD, 0x08FDE2FB, 0x12FAF81B, 0xFFEDF506);
	r6 = D(r6, s0_1_0, 0xFD170513, 0x04F2EB15, 0x220C00DB, 0x2102F7AE);
	r7 = D(r7, s0_1_0, 0x02FD0401, 0x0100F205, 0x03DAD10C, 0x06050CFC);
	r0 = D(r0, s0_1_1, 0xE41DF519, 0xF2F20CF9, 0xF9EFF9F8, 0x090C14FD);
	r1 = D(r1, s0_1_1, 0xFFF70739, 0xF322FDF9, 0x020A02F7, 0x012C0DD3);
	r2 = D(r2, s0_1_1, 0xFDE7DD06, 0xDBDFF803, 0xFA13C6E1, 0xFEFAFB09);
	r3 = D(r3, s0_1_1, 0xF5AAFE1C, 0xE1F7E6F4, 0xF715DCF8, 0x061F1120);
	r4 = D(r4, s0_1_1, 0xFF05FEF9, 0xF614FF1B, 0x10FD08F2, 0xFDFE000E);
	r5 = D(r5, s0_1_1, 0xDD030BF9, 0x1DEF0214, 0x02F503D2, 0x13F1F2DD);
	r6 = D(r6, s0_1_1, 0xE51B1B15, 0xFCF60505, 0xC7221601, 0x1DF2110D);
	r7 = D(r7, s0_1_1, 0x05FE0DE8, 0xF71A0711, 0xFAEEED20, 0x1709F804);
	r0 = D(r0, s0_1_2, 0x0E1C01F4, 0xF4FADAEF, 0x17081A0F, 0xF001EEFE);
	r1 = D(r1, s0_1_2, 0x07FB0402, 0x1421F011, 0x040AF9FF, 0x052204F7);
	r2 = D(r2, s0_1_2, 0x21B423FA, 0x10D6DFF9, 0x0542EDF8, 0x080800FE);
	r3 = D(r3, s0_1_2, 0xFBFC0301, 0xFD04F909, 0xDC18E30E, 0xFE160202);
	r4 = D(r4, s0_1_2, 0x0F041B02, 0x300C1312, 0x15EEFF14, 0xFFF908F6);
	r5 = D(r5, s0_1_2, 0xD7FE0CF0, 0x1209FFFF, 0x05D90C01, 0xFEECFEFC);
	r6 = D(r6, s0_1_2, 0xF108F5F1, 0xFAEAE7EE, 0x0ADCD4F1, 0x0CE3DB14);
	r7 = D(r7, s0_1_2, 0xFE12F7FA, 0xDD0FEFFF, 0xFB8F1D05, 0xEF00F706);
	r0 = D(r0, s0_2_0, 0xFE12081B, 0xFA09030A, 0x020EFEF7, 0x04FCFCF9);
	r1 = D(r1, s0_2_0, 0x01FCFD02, 0xFC181310, 0xFF010404, 0x0C02F207);
	r2 = D(r2, s0_2_0, 0x0B09F6EF, 0x1DEFF1D7, 0x052115F8, 0x0B05F1F9);
	r3 = D(r3, s0_2_0, 0x03F3FDF8, 0x0206060C, 0x01FD05F8, 0xFA03F60B);
	r4 = D(r4, s0_2_0, 0x0B0EF9F7, 0xFF1CECFC, 0x0CFBF8F6, 0xFCFC01F9);
	r5 = D(r5, s0_2_0, 0xFE091112, 0x0DEEF5F2, 0xF2F1050C, 0x0004FA04);
	r6 = D(r6, s0_2_0, 0xFC0B040A, 0x00070D07, 0xF2EE0DDA, 0x0419FEF8);
	r7 = D(r7, s0_2_0, 0x01FEFD04, 0xFD04FDFA, 0xFE170AED, 0xFE020608);
	r0 = D(r0, s0_2_1, 0xF60AFE19, 0xE30812FC, 0x0011F6F4, 0x060C0307);
	r1 = D(r1, s0_2_1, 0xFDFCFC07, 0x0510F3FB, 0x03030AFD, 0x0F151201);
	r2 = D(r2, s0_2_1, 0x1403C6F8, 0xECF20130, 0x173210FE, 0x09F8F013);
	r3 = D(r3, s0_2_1, 0xF9ED1803, 0xE5000905, 0x020AF500, 0x02120402);
	r4 = D(r4, s0_2_1, 0x0A0F0109, 0x2D1C0CD2, 0x0FEE0AFE, 0xF9FB02FC);
	r5 = D(r5, s0_2_1, 0xE9040703, 0x11FEFCFF, 0x03E313FE, 0x00FF0500);
	r6 = D(r6, s0_2_1, 0xF2080907, 0xF9EDEB10, 0x48F5D7EE, 0x0D141301);
	r7 = D(r7, s0_2_1, 0x04070302, 0x0207FB13, 0x0CFAEBE1, 0xFCFE0907);
	r0 = D(r0, s0_2_2, 0x031209F9, 0xE6F80A07, 0x1E07FDFE, 0xEEFBF502);
	r1 = D(r1, s0_2_2, 0x02020401, 0x051917FA, 0x02FFF804, 0x02100604);
	r2 = D(r2, s0_2_2, 0xFE32F9EF, 0x030BFDF5, 0xFE18FCE9, 0xFAFC02FE);
	r3 = D(r3, s0_2_2, 0xF6F8FB06, 0x06FD05F9, 0x0607FEFC, 0x0504F9F9);
	r4 = D(r4, s0_2_2, 0x0C10F0F8, 0x1D12ECD0, 0x0EFFFD08, 0xFEFB0201);
	r5 = D(r5, s0_2_2, 0xDA030F13, 0x0CFCF705, 0xF3010F04, 0xFDFF0704);
	r6 = D(r6, s0_2_2, 0xFC0F01F7, 0xFA0109FF, 0xC9B1EDF4, 0x1A05DC08);
	r7 = D(r7, s0_2_2, 0xFFFAFCFF, 0xFB0FF001, 0x14FCE5FF, 0xF405FC00);
	r0 = D(r0, s1_0_0, 0x02F5040B, 0xFFF406FF, 0x0AEDF2F1, 0xFC05F11C);
	r1 = D(r1, s1_0_0, 0x03F904FF, 0x04EF00FA, 0xFE06040C, 0x06F507EE);
	r2 = D(r2, s1_0_0, 0x2AACF401, 0x09F40503, 0x091A06FF, 0x05E4080A);
	r3 = D(r3, s1_0_0, 0x03DD06E3, 0x17030E03, 0x1014F606, 0x0AFEFDF8);
	r4 = D(r4, s1_0_0, 0x08FCF908, 0x00F608F9, 0x0309FB15, 0xFFF6FAFC);
	r5 = D(r5, s1_0_0, 0xD2D61EFC, 0x01ECF4F3, 0x09060BE9, 0xFC01FBFB);
	r6 = D(r6, s1_0_0, 0x01F503FF, 0x00FD0FFE, 0xF918FDFE, 0xEAF70C07);
	r7 = D(r7, s1_0_0, 0x06FDFB0F, 0xFA0407FB, 0x0F2BF4F4, 0x02030922);
	r0 = D(r0, s1_0_1, 0x0B101326, 0xFA0708E8, 0xFE13F504, 0x04FFEFFC);
	r1 = D(r1, s1_0_1, 0x02000310, 0x0DFE1607, 0xF8F2061F, 0xFCCF1EDE);
	r2 = D(r2, s1_0_1, 0x11FC0B1F, 0xF33FEB14, 0xFBFC1512, 0xF9211319);
	r3 = D(r3, s1_0_1, 0x091DF815, 0x02E51421, 0x0ED8FD07, 0x06F20701);
	r4 = D(r4, s1_0_1, 0x021AFCFE, 0x2D2B1C1D, 0xFF18F710, 0xFB03FAFE);
	r5 = D(r5, s1_0_1, 0x11FD070D, 0x0719E90F, 0x0BF00708, 0x09F1FC10);
	r6 = D(r6, s1_0_1, 0xFDE404E0, 0x08ED2008, 0x1D9AEDD6, 0xDD03EB0F);
	r7 = D(r7, s1_0_1, 0x09060020, 0xF6E60FF1, 0x1A30FF00, 0x08EEFB26);
	r0 = D(r0, s1_0_2, 0x07030907, 0x0712FCF1, 0xFB09FBED, 0x0404FCFE);
	r1 = D(r1, s1_0_2, 0x00FE0103, 0x07F310FB, 0xF40F0702, 0x08F40EFB);
	r2 = D(r2, s1_0_2, 0x12DAFBF2, 0xF33B03FE, 0x100FEF96, 0x08ED0DF7);
	r3 = D(r3, s1_0_2, 0xFDE90BF8, 0xF4F3FB0E, 0xFBE60015, 0x020AFEFA);
	r4 = D(r4, s1_0_2, 0x09F8FFF5, 0xF7F5F7F0, 0x00F9FF05, 0xFEF0FBFC);
	r5 = D(r5, s1_0_2, 0xD81BFBF9, 0xFCFEFC03, 0xE817FF07, 0x0402F708);
	r6 = D(r6, s1_0_2, 0x04F8F9F3, 0xFD0C04F4, 0x0748F80F, 0xE2EDFCEB);
	r7 = D(r7, s1_0_2, 0x01FB0008, 0xF4030DF3, 0xE70F00EC, 0xF10FF7F3);
	r0 = D(r0, s1_1_0, 0xFC0615EB, 0xFD0307F2, 0xF9EFEADA, 0xFAEDF622);
	r1 = D(r1, s1_1_0, 0x07FC02FE, 0x082320FB, 0x09030004, 0xFCF014FC);
	r2 = D(r2, s1_1_0, 0xF3182501, 0xFD020DFF, 0x0B10FE15, 0x0AFC150E);
	r3 = D(r3, s1_1_0, 0xFF1DF8F9, 0x08F2F405, 0xF6FD0A03, 0x03F0060B);
	r4 = D(r4, s1_1_0, 0x060B06FA, 0x0CD8ADFC, 0xFDF31311, 0x0EF4F914);
	r5 = D(r5, s1_1_0, 0xF3E5EFE7, 0xFCF2F921, 0x01E3021E, 0xFB12FC06);
	r6 = D(r6, s1_1_0, 0xFDFB04F2, 0x010B0E11, 0xF608D903, 0x36FA081C);
	r7 = D(r7, s1_1_0, 0x03F70509, 0xF9FF0119, 0x05380C04, 0x051804FC);
	r0 = D(r0, s1_1_1, 0xE9E51DED, 0x14110CF0, 0xD115FD20, 0xE2F4F5DA);
	r1 = D(r1, s1_1_1, 0x0B010AED, 0xE3DB030C, 0x04130502, 0x0AC90218);
	r2 = D(r2, s1_1_1, 0xFCF01CAF, 0xF5F903D6, 0xF0040D22, 0x08EF10DC);
	r3 = D(r3, s1_1_1, 0x0A27F4DF, 0xFDE3E80C, 0xFBF7FEFD, 0xFF0003F6);
	r4 = D(r4, s1_1_1, 0xF2F50FEF, 0x3F0A1600, 0xE70CD713, 0xFA07ED06);
	r5 = D(r5, s1_1_1, 0x0BC319EA, 0xE80DF30E, 0xFFEB1BE5, 0x05F20604);
	r6 = D(r6, s1_1_1, 0x00DAEEF2, 0x0CE70BE2, 0xF1172105, 0x8110F304);
	r7 = D(r7, s1_1_1, 0x020AFFFC, 0x04F1E7C8, 0xCF21E732, 0x0BCD13DD);
	r0 = D(r0, s1_1_2, 0xFC0809FD, 0x1321FDFA, 0xBCE005F4, 0x1400F903);
	r1 = D(r1, s1_1_2, 0x0609FFF8, 0x150100FD, 0x151600F8, 0xFE110A12);
	r2 = D(r2, s1_1_2, 0xFD1C07FF, 0xE40E15F6, 0x04102BCF, 0xFF1C0FF9);
	r3 = D(r3, s1_1_2, 0xF83403FF, 0x130102FF, 0x040CFD03, 0x000702F9);
	r4 = D(r4, s1_1_2, 0xEB06F2FF, 0xD1D3F8CA, 0xE3F40AFD, 0xF6F2FC02);
	r5 = D(r5, s1_1_2, 0xDD40F5F7, 0xF7FB0506, 0x0E2008E6, 0xF610FE08);
	r6 = D(r6, s1_1_2, 0xFD0BFB03, 0xF3FC1009, 0x882ADE06, 0x0DEA04F2);
	r7 = D(r7, s1_1_2, 0xFC02F900, 0x0C04FFFD, 0xD8DC11E0, 0xE60E0004);
	r0 = D(r0, s1_2_0, 0x0FE600F9, 0xFEF5F7FB, 0x08FEFAEC, 0x00F4010E);
	r1 = D(r1, s1_2_0, 0xFDFA0502, 0x02E004F1, 0xFF11090B, 0x02FD0904);
	r2 = D(r2, s1_2_0, 0x0604EA03, 0xFD3A2800, 0x120F1303, 0xFB091E0B);
	r3 = D(r3, s1_2_0, 0xF214E7FD, 0x0ADBFA09, 0x041001FD, 0x0204F7FC);
	r4 = D(r4, s1_2_0, 0x082409F5, 0x2F97D601, 0xF8FC0402, 0xF9F2EC00);
	r5 = D(r5, s1_2_0, 0x0BB0E816, 0x030406F7, 0xFBCE10FF, 0xFD08FDFE);
	r6 = D(r6, s1_2_0, 0x02E4F7FD, 0xFDF2F8FE, 0xF6F8D1FF, 0xECF7ED06);
	r7 = D(r7, s1_2_0, 0x040A0600, 0xFEF3F511, 0x14FFFAFA, 0x01F8F0FE);
	r0 = D(r0, s1_2_1, 0xFFFFFB00, 0x09EAF9FF, 0x0414050E, 0x0FE0F2FB);
	r1 = D(r1, s1_2_1, 0xF9090102, 0xFB22050B, 0x000903FE, 0x00E9130A);
	r2 = D(r2, s1_2_1, 0xF91A1EFF, 0xFB2F00F2, 0xFE12FA01, 0x09040EFA);
	r3 = D(r3, s1_2_1, 0x02EFCE0A, 0xF5F2F3FE, 0xF2FFF901, 0x05080205);
	r4 = D(r4, s1_2_1, 0x0802DEF9, 0x81E29B14, 0xF201070E, 0x05060A09);
	r5 = D(r5, s1_2_1, 0x1999FDF6, 0xF2F30205, 0x0DF229FA, 0x05EB01FC);
	r6 = D(r6, s1_2_1, 0xFB01EDF8, 0xFF090A02, 0xFC08ECF3, 0xF7EC0506);
	r7 = D(r7, s1_2_1, 0x00F30201, 0x02F60203, 0xE913160B, 0xFFFDF205);
	r0 = D(r0, s1_2_2, 0x150FFFFB, 0x1304FFEA, 0xF7FA08F7, 0x0C00F3FB);
	r1 = D(r1, s1_2_2, 0xFC010204, 0xDC0F05FE, 0x0500FD02, 0x04EC0601);
	r2 = D(r2, s1_2_2, 0xAAECFCFA, 0x01FD0005, 0xFF021202, 0x090008FD);
	r3 = D(r3, s1_2_2, 0xF010020E, 0x080A0400, 0xFAFAF201, 0x02F901FE);
	r4 = D(r4, s1_2_2, 0xFB02F802, 0x810415DB, 0xE5F30A01, 0x07FCFC02);
	r5 = D(r5, s1_2_2, 0xFDFAF603, 0xEEFF0602, 0xEAE50B14, 0xFEFF0309);
	r6 = D(r6, s1_2_2, 0xFFF5FB07, 0xFEF41DFF, 0xE9D7EDF5, 0xEDF11911);
	r7 = D(r7, s1_2_2, 0x0202FFFF, 0x12EFFE05, 0xEC210FF1, 0x0D02FD00);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x05FE020E, 0x08F7F611, 0xFF0EF8E7, 0x0C02F70B);
	r1 = D(r1, s0_0_0, 0xFCFC0404, 0x0C03F912, 0xF8F607F8, 0xE7FC16F3);
	r2 = D(r2, s0_0_0, 0x00F508F8, 0xF9FF0E1A, 0x2AEFF32C, 0x05041609);
	r3 = D(r3, s0_0_0, 0xF1041DF7, 0xEBF306CE, 0x11F400FF, 0x010507F9);
	r4 = D(r4, s0_0_0, 0x0AFFFD0F, 0x1C08071C, 0xFE08F80F, 0xFF00F9FC);
	r5 = D(r5, s0_0_0, 0x03FBFA12, 0xE411090F, 0xDF13C312, 0x0000FB02);
	r6 = D(r6, s0_0_0, 0xF3F50008, 0xE90CDC0E, 0x16F70F46, 0xFF12FC2D);
	r7 = D(r7, s0_0_0, 0x06FA0300, 0xFBF80E09, 0x1209EB03, 0x0BEDFFFF);
	r0 = D(r0, s0_0_1, 0xFBF5FD0B, 0x0CEEFF13, 0x06F9F00C, 0x0AF60611);
	r1 = D(r1, s0_0_1, 0xFCFF00FD, 0xFC000B0A, 0xFAF7FAF2, 0xD90502F2);
	r2 = D(r2, s0_0_1, 0x0711F805, 0x1402BA04, 0xF916114C, 0x0807F6FD);
	r3 = D(r3, s0_0_1, 0xEEDEFB08, 0xFA09F1F6, 0xF6FA1003, 0xEF0BFE03);
	r4 = D(r4, s0_0_1, 0x1002E3EF, 0xFEF91A20, 0xFC050A01, 0xFBFD060A);
	r5 = D(r5, s0_0_1, 0x1307FC08, 0xEF01F210, 0xFC0B10FF, 0xF8F8FFF9);
	r6 = D(r6, s0_0_1, 0xEF131005, 0xF9130808, 0x3637FA3A, 0x15F9E710);
	r7 = D(r7, s0_0_1, 0x09EEFF0C, 0xFEF30717, 0x120D1307, 0x15E3FCFD);
	r0 = D(r0, s0_0_2, 0xFB09F715, 0x0BFD0604, 0x0EFA1305, 0xFB09F104);
	r1 = D(r1, s0_0_2, 0xFCFEFC02, 0xFEEBF80B, 0xF30DEEF7, 0xF202EDF9);
	r2 = D(r2, s0_0_2, 0x14E92706, 0x16150AF5, 0x1DE225FF, 0xEDF90405);
	r3 = D(r3, s0_0_2, 0xF10CFB02, 0xFD0BF91A, 0xF608F2E1, 0xF70BFEF9);
	r4 = D(r4, s0_0_2, 0xFA09F605, 0xF6220F0C, 0x04020209, 0x04FAFE0C);
	r5 = D(r5, s0_0_2, 0x010E140D, 0xFC0308FB, 0xF506FAFD, 0xF704FDF9);
	r6 = D(r6, s0_0_2, 0xFC0100FA, 0xFCF60508, 0x02180CE7, 0xFB0A03F6);
	r7 = D(r7, s0_0_2, 0x02020305, 0xFEFCF70C, 0x03FF03FA, 0x030B03EF);
	r0 = D(r0, s0_1_0, 0xF3FB05F6, 0xF9FBFA15, 0xEB0C30C6, 0x0400E10E);
	r1 = D(r1, s0_1_0, 0x01FD0202, 0x00080B0A, 0x04F4040C, 0xD8F51100);
	r2 = D(r2, s0_1_0, 0x0926D61D, 0x15DDD21F, 0x1FF4EE1D, 0x0CE6D50F);
	r3 = D(r3, s0_1_0, 0xEE0DF010, 0xDBFD11E6, 0x030B030A, 0xF7081AF0);
	r4 = D(r4, s0_1_0, 0x14FADA18, 0x1F16ED1F, 0xF8F7EAF6, 0x0A0B01F7);
	r5 = D(r5, s0_1_0, 0xFDF512E9, 0x07011203, 0xF6EFDF09, 0xF300F608);
	r6 = D(r6, s0_1_0, 0xD5F80C0E, 0xDF0410FC, 0xD4DADDEF, 0x0FECDF17);
	r7 = D(r7, s0_1_0, 0xFC00F601, 0x09FEEC1D, 0xE11011D9, 0x0906EDFE);
	r0 = D(r0, s0_1_1, 0xF6FE17FB, 0x0E08FE3D, 0xF6EE0981, 0x0EB3F21C);
	r1 = D(r1, s0_1_1, 0xFDF3FDFF, 0xDF1D1DED, 0x07F30C02, 0xE9232D0B);
	r2 = D(r2, s0_1_1, 0xD122002A, 0xFA08AA0C, 0xFF1DC445, 0xF505CAFE);
	r3 = D(r3, s0_1_1, 0xFA0DFD23, 0xE90110B1, 0xF0F90C11, 0xEECB0507);
	r4 = D(r4, s0_1_1, 0xFC08EFF9, 0x11C6DC12, 0x0722040C, 0xFDF8E5FD);
	r5 = D(r5, s0_1_1, 0x3039F704, 0xFA0705FC, 0xFDFCCE05, 0x030AFAFD);
	r6 = D(r6, s0_1_1, 0xD53604FD, 0xEF07E1FE, 0xF90A8135, 0x0DE40914);
	r7 = D(r7, s0_1_1, 0x080EFB0B, 0xE7CDF92F, 0x09D0E9EC, 0x1F1B0118);
	r0 = D(r0, s0_1_2, 0xF81AF1F9, 0x03F7EA13, 0xF8FD1F0D, 0xFF06F8FF);
	r1 = D(r1, s0_1_2, 0xFE0F0103, 0xEAF7F4E7, 0xF914F6FC, 0xFAF9F2E8);
	r2 = D(r2, s0_1_2, 0xF60FFC0F, 0xFA1EF703, 0x0CCF1245, 0x04F4ECFB);
	r3 = D(r3, s0_1_2, 0xFCFCF6FE, 0x0BFDF315, 0x0016F8E8, 0xFA02F9FC);
	r4 = D(r4, s0_1_2, 0xFB18F2F7, 0x060FD62F, 0x010E08F8, 0xFCDE01FB);
	r5 = D(r5, s0_1_2, 0xF2071B20, 0xF8F80501, 0x001A0EED, 0xFC14FBF6);
	r6 = D(r6, s0_1_2, 0xFE27FCFE, 0xF801ED01, 0xDAFAA2FC, 0x10032F03);
	r7 = D(r7, s0_1_2, 0xFEF00102, 0xF9E8FEFE, 0x04D83320, 0x09ED110F);
	r0 = D(r0, s0_2_0, 0xFEF10BFB, 0xFBF00601, 0x090A13D0, 0xFCF60311);
	r1 = D(r1, s0_2_0, 0x01020005, 0xFEF313FD, 0x04F8FF14, 0xFA030D01);
	r2 = D(r2, s0_2_0, 0xF204EDEE, 0x00D50F1A, 0xF7EA03FD, 0x0013E808);
	r3 = D(r3, s0_2_0, 0xF70707FF, 0xFC060CE8, 0xED02FD15, 0xFEFE10F2);
	r4 = D(r4, s0_2_0, 0xF8FF0B0A, 0xE317F466, 0x01ECF913, 0xFF0902F6);
	r5 = D(r5, s0_2_0, 0x06F104F6, 0x0407FD04, 0xF70A0A13, 0xFDF10404);
	r6 = D(r6, s0_2_0, 0xF6FA0CF4, 0x01F6110C, 0xE8F5F8F8, 0xFD0B0624);
	r7 = D(r7, s0_2_0, 0xFCF5FE06, 0xF802FC01, 0xFBE315E0, 0xFFFA0D00);
	r0 = D(r0, s0_2_1, 0xFAEB0806, 0x03010404, 0xF8EBF50A, 0x08E20205);
	r1 = D(r1, s0_2_1, 0xFD0BFDFF, 0xF7F9FB06, 0x0B040009, 0xFD010AF8);
	r2 = D(r2, s0_2_1, 0xF5F110EA, 0xFB2C1915, 0xE1001528, 0x0B141506);
	r3 = D(r3, s0_2_1, 0xDA1D030D, 0x09FBE8FE, 0xF6031409, 0x02080EF0);
	r4 = D(r4, s0_2_1, 0xF9FF16D3, 0xE9230132, 0xFA040016, 0xF905F309);
	r5 = D(r5, s0_2_1, 0x101BEB01, 0xFEF20115, 0x0E06F106, 0x010B0206);
	r6 = D(r6, s0_2_1, 0xE41803EF, 0x0809FF00, 0x0313D8DC, 0x29F1FD1E);
	r7 = D(r7, s0_2_1, 0x0704FD0B, 0x0703FC07, 0x02F4F9FB, 0x0CF00503);
	r0 = D(r0, s0_2_2, 0x0012F30C, 0x090DF906, 0x06050AF8, 0xF7FF0A02);
	r1 = D(r1, s0_2_2, 0x03FCFF03, 0x01FF000B, 0x00FB0403, 0x050603ED);
	r2 = D(r2, s0_2_2, 0xFBF6FBFF, 0xFCF9F4EF, 0x2DD7D50E, 0xF90CFB00);
	r3 = D(r3, s0_2_2, 0x02F605FA, 0x0CEFF90D, 0xF3FB0801, 0xF8040BFF);
	r4 = D(r4, s0_2_2, 0x00070A01, 0x0BE9201D, 0x03F304FE, 0x0502FB00);
	r5 = D(r5, s0_2_2, 0xF21AD4FD, 0x0BF2F805, 0xF6E4EBF9, 0xF7FB07FB);
	r6 = D(r6, s0_2_2, 0x000309F6, 0xF2070BFB, 0x16160915, 0x0BCFED13);
	r7 = D(r7, s0_2_2, 0x00FA0106, 0xFEFF00F9, 0xA40A0BFA, 0x12FFF707);
	r0 = D(r0, s1_0_0, 0x0308FD03, 0x0AF7F0F7, 0x01FEF803, 0x0F07FBEE);
	r1 = D(r1, s1_0_0, 0xFF020503, 0xFC06F003, 0xF6081003, 0xF5FF1807);
	r2 = D(r2, s1_0_0, 0xE41AF90A, 0x0F13EDFA, 0x0FFBD705, 0x000B0A04);
	r3 = D(r3, s1_0_0, 0xCEFC10F7, 0x02FE0807, 0x0F0AE706, 0x0AF60A0B);
	r4 = D(r4, s1_0_0, 0x0512FA00, 0xEA11EF0C, 0xF7080100, 0x05FAF2F7);
	r5 = D(r5, s1_0_0, 0x07EDEEEE, 0xFC05210F, 0xECF4FF0E, 0x0FF900FB);
	r6 = D(r6, s1_0_0, 0x00FCF6F3, 0x04E4E1F7, 0x03EFC205, 0xFFF60EFE);
	r7 = D(r7, s1_0_0, 0xFF07FFFD, 0x000602EF, 0x29DBF605, 0x041214EE);
	r0 = D(r0, s1_0_1, 0x1506FEF1, 0x0308F3EF, 0xF4F7FA03, 0xF01BFF02);
	r1 = D(r1, s1_0_1, 0xFBFDFFF9, 0x1105E302, 0xE60BFCF3, 0xE8F5E7F7);
	r2 = D(r2, s1_0_1, 0xF4F2CDEE, 0xE805ED07, 0x28EAE7F6, 0xECFED4F7);
	r3 = D(r3, s1_0_1, 0xD7EE04DC, 0xD4D0F3EF, 0x00ED160B, 0x03E8FC0C);
	r4 = D(r4, s1_0_1, 0x010F1008, 0xE3FC0BFD, 0x05000F07, 0xFAF50A04);
	r5 = D(r5, s1_0_1, 0xC9CE19F1, 0x0A041413, 0xC9F324F7, 0x0EFC1EF8);
	r6 = D(r6, s1_0_1, 0xE4D0F705, 0xE5D91EF5, 0xBB0F4441, 0x1B002000);
	r7 = D(r7, s1_0_1, 0x0B0E0701, 0xC6EAEFF3, 0xEADA060D, 0x1A1605EA);
	r0 = D(r0, s1_0_2, 0xFD040202, 0xFC0CF6FE, 0xF60A040C, 0x05F0F9FE);
	r1 = D(r1, s1_0_2, 0x010201FF, 0xEF05CDFF, 0xE3FCF5E7, 0xEBE0FAF1);
	r2 = D(r2, s1_0_2, 0xFDF3E415, 0xEF11F5EE, 0xE4DCEF00, 0xF712FF01);
	r3 = D(r3, s1_0_2, 0xE9F800F6, 0xF9F20807, 0x0ADEF4F3, 0xF3F50001);
	r4 = D(r4, s1_0_2, 0xF8FDF801, 0xE0F02B17, 0xFA0C0509, 0xF7FE0303);
	r5 = D(r5, s1_0_2, 0x3B0122FB, 0xF6150AFE, 0xF3EC06F5, 0x06F1FCF1);
	r6 = D(r6, s1_0_2, 0xFBEAFEF7, 0xEFEFFAF5, 0x29E703FC, 0x030719FC);
	r7 = D(r7, s1_0_2, 0x060D0307, 0xF8E800F3, 0xF8FE2407, 0xFE080501);
	r0 = D(r0, s1_1_0, 0xF50C0EF9, 0xF8030904, 0x0011202A, 0xF10CF7F8);
	r1 = D(r1, s1_1_0, 0x06040100, 0xF60CFF21, 0xE8000BE1, 0xFC0000DE);
	r2 = D(r2, s1_1_0, 0x15CDAD0E, 0x0003E4F3, 0x0904211B, 0xE70EEADE);
	r3 = D(r3, s1_1_0, 0x01E5DED6, 0xFCEA19DA, 0x16F9F90D, 0x0204FFFA);
	r4 = D(r4, s1_1_0, 0x1202FB0F, 0x0108A20E, 0xF10DF500, 0xF6FFFCF8);
	r5 = D(r5, s1_1_0, 0xF4DB03FA, 0xF7080BE8, 0xEDED032A, 0x06F00904);
	r6 = D(r6, s1_1_0, 0xF3EC0BF8, 0xEA070BF5, 0xDD1B2BE3, 0x050EE602);
	r7 = D(r7, s1_1_0, 0xFF0800F5, 0xF7F5CCE5, 0xEC16F60E, 0x09F700FA);
	r0 = D(r0, s1_1_1, 0xD2F4F606, 0x06FF0618, 0xE914F01B, 0x141A07E8);
	r1 = D(r1, s1_1_1, 0x1101FEFD, 0xD017E80F, 0x09F80DDE, 0x09E10BCB);
	r2 = D(r2, s1_1_1, 0x1404D029, 0x3E240614, 0x3D290CFE, 0x2E38E406);
	r3 = D(r3, s1_1_1, 0xFBD3FED9, 0xDBAFF101, 0x00DCF404, 0xE305FC0D);
	r4 = D(r4, s1_1_1, 0x0B40FC19, 0xE5928605, 0x07F21303, 0xFC0AE5FF);
	r5 = D(r5, s1_1_1, 0xFDA7212C, 0xECDE0421, 0x1CE1F3B1, 0x1FEDFFF5);
	r6 = D(r6, s1_1_1, 0x01B6FD07, 0xECF4E302, 0x36F00BD3, 0xFCFF011E);
	r7 = D(r7, s1_1_1, 0x0AF3FF0E, 0x26DEF8F0, 0x082C81F1, 0x0307EC14);
	r0 = D(r0, s1_1_2, 0xEDFEFBDA, 0x18150B00, 0x02180B09, 0x06F502FC);
	r1 = D(r1, s1_1_2, 0xF80D0101, 0x0511F2FA, 0xF7FBF808, 0xEAAAF1D0);
	r2 = D(r2, s1_1_2, 0xFDFEEEF4, 0xC5EFF318, 0x164107BE, 0xEA0CF2ED);
	r3 = D(r3, s1_1_2, 0xE2EBF3D2, 0x0119FFEB, 0xEFDAFCF1, 0xF5F0FA08);
	r4 = D(r4, s1_1_2, 0xDFF2F7F8, 0xF7E6F253, 0xF21607ED, 0x041709E9);
	r5 = D(r5, s1_1_2, 0xFFF41A05, 0x0C0B0007, 0xC1ECF300, 0x05E906F5);
	r6 = D(r6, s1_1_2, 0xF2E80207, 0x04EEFFF4, 0x0A0C0812, 0x1C04EE1E);
	r7 = D(r7, s1_1_2, 0x0E0700F8, 0xEBF6F6E7, 0x1413E815, 0xF808FD0E);
	r0 = D(r0, s1_2_0, 0xE500FDD6, 0xEC00FCF9, 0x11040A05, 0x0913F6EA);
	r1 = D(r1, s1_2_0, 0x030705F9, 0xEA06F1EF, 0x0206FCF6, 0x04FE00FC);
	r2 = D(r2, s1_2_0, 0x1BFBF924, 0x1FFAEAF0, 0xFDF80112, 0x060AEE04);
	r3 = D(r3, s1_2_0, 0x07E9FEF2, 0x040112CB, 0x06F5FA0D, 0xFB000212);
	r4 = D(r4, s1_2_0, 0x10050011, 0xF704DD09, 0x090EF8F7, 0x00000000);
	r5 = D(r5, s1_2_0, 0x00FD32CC, 0x00111115, 0x0ADD0CDF, 0xFC000AF0);
	r6 = D(r6, s1_2_0, 0xFCFA09F6, 0xFE00FAF4, 0x12DE1462, 0xFB1DF013);
	r7 = D(r7, s1_2_0, 0xFD02FEFB, 0x05FF03FA, 0x040A09D3, 0xF6FEEBF4);
	r0 = D(r0, s1_2_1, 0xF7F500F7, 0xFA03FAFD, 0x07F7FA30, 0xF4FE12DC);
	r1 = D(r1, s1_2_1, 0xFBFDFF0C, 0x0DF6F21E, 0xF811FBF8, 0x05F202E4);
	r2 = D(r2, s1_2_1, 0x19C9DFFB, 0xED03EF26, 0xF9F4E209, 0xE2F8D9FA);
	r3 = D(r3, s1_2_1, 0x03FC140D, 0xEFFEFBEB, 0x0E010126, 0xFCF80804);
	r4 = D(r4, s1_2_1, 0xFDFD0523, 0xF6C4FFD9, 0x0901FD15, 0x00F701DB);
	r5 = D(r5, s1_2_1, 0x01E10C8C, 0x0B0A0BF8, 0xECF501A8, 0xFF070DE3);
	r6 = D(r6, s1_2_1, 0xF0ECFE0A, 0x02DCEBF5, 0x2DAA0BBF, 0xF701EAED);
	r7 = D(r7, s1_2_1, 0xFE08FDF8, 0xF2E804CD, 0x2AEAF912, 0xFE06E308);
	r0 = D(r0, s1_2_2, 0xF0FD0204, 0xF1F4FA00, 0x10FA06FA, 0x00FD0802);
	r1 = D(r1, s1_2_2, 0xFD03FCFD, 0xFE1FFAFD, 0x0604F606, 0x01F0F9FC);
	r2 = D(r2, s1_2_2, 0x24051117, 0xF805FC15, 0x161106E6, 0x03EFFF11);
	r3 = D(r3, s1_2_2, 0xECFC0612, 0xFA100603, 0xF70803FC, 0x03FA0215);
	r4 = D(r4, s1_2_2, 0x0D09031A, 0x67F8E9EF, 0xFD0FFDF8, 0x0302F9FB);
	r5 = D(r5, s1_2_2, 0xD2E610DA, 0xFD13FC07, 0xF9FE031A, 0xF70E09F3);
	r6 = D(r6, s1_2_2, 0x0413080C, 0xE9FEFDD9, 0x1AFFE870, 0x10FA04FA);
	r7 = D(r7, s1_2_2, 0xFA00FDFF, 0xFDF1FE06, 0x14FA20F7, 0xF501F704);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF1F70301, 0x03010C0A, 0x08FBFA08, 0xFFF70202);
	r1 = D(r1, s0_0_0, 0xFE04FEFB, 0xF6FBF805, 0xE3FE07ED, 0xFC0B02F7);
	r2 = D(r2, s0_0_0, 0xD5E50313, 0xF6EB0004, 0x10F4122B, 0xFB11F8F7);
	r3 = D(r3, s0_0_0, 0xF5F81307, 0xE6E614F8, 0xF7EB0603, 0x0A0001ED);
	r4 = D(r4, s0_0_0, 0x0206EFFA, 0xFAEFF50D, 0x03F7FA10, 0x01FAFDFA);
	r5 = D(r5, s0_0_0, 0x0D0208FB, 0x06F7F8EA, 0x191BE0E5, 0x09030A03);
	r6 = D(r6, s0_0_0, 0xFC0011E3, 0x1C070403, 0x052CFD02, 0x0212F7E6);
	r7 = D(r7, s0_0_0, 0xFBF3040E, 0xF5FD050A, 0xF70BF2E9, 0x18F8051E);
	r0 = D(r0, s0_0_1, 0xF4ED1817, 0x16EC0110, 0x0C0CF3F3, 0xE926FE0C);
	r1 = D(r1, s0_0_1, 0x07F903FE, 0xEAF50513, 0xF8EE15F3, 0xF0EFF7FE);
	r2 = D(r2, s0_0_1, 0xC293D6DB, 0xDB0EF1FA, 0x1BFF2E2C, 0xF3E0F70A);
	r3 = D(r3, s0_0_1, 0x25000916, 0x23BCF61C, 0xFEC307FD, 0x080308E0);
	r4 = D(r4, s0_0_1, 0xE80701F0, 0x041DE5F2, 0xF6FE130B, 0xFF03F507);
	r5 = D(r5, s0_0_1, 0x25EDF808, 0x0101F2FC, 0x1C28F31B, 0x15020E11);
	r6 = D(r6, s0_0_1, 0xF1EBF6F8, 0x0AFF0308, 0xE322E803, 0x0D101B19);
	r7 = D(r7, s0_0_1, 0xFC09070D, 0xE7F202EC, 0xF00106FA, 0x2BF4042F);
	r0 = D(r0, s0_0_2, 0x0BEFFBF1, 0x0C09090B, 0xFC29FCF1, 0xFF000207);
	r1 = D(r1, s0_0_2, 0x020504FD, 0xF4C800F4, 0x01DE06F6, 0x02E9F4F3);
	r2 = D(r2, s0_0_2, 0xBF3103F1, 0x18100740, 0xFAF3A781, 0xEF03FC08);
	r3 = D(r3, s0_0_2, 0xFA06FAEE, 0x040B0115, 0x0AAAFAFC, 0x0C0005FA);
	r4 = D(r4, s0_0_2, 0x07FDFD03, 0x0C050F20, 0xFCFFFC0F, 0x040BF3FC);
	r5 = D(r5, s0_0_2, 0x060A1211, 0x03FBF8EA, 0xF5FDF4FB, 0x00F104FE);
	r6 = D(r6, s0_0_2, 0x05F3F700, 0x13FB07FE, 0x250B3226, 0xFFF80A04);
	r7 = D(r7, s0_0_2, 0xFF020D0B, 0x0EF5FB0B, 0x160C0005, 0xFEE808F9);
	r0 = D(r0, s0_1_0, 0xE0FEFAF6, 0xF2060CFE, 0xFFEEEBF8, 0xEEF6EC06);
	r1 = D(r1, s0_1_0, 0xFEFA01FF, 0xECF8F2EA, 0xF2040105, 0xFF05FFF9);
	r2 = D(r2, s0_1_0, 0x242015EE, 0x2D2BF0D0, 0x0AFEEB21, 0xF2EDFB22);
	r3 = D(r3, s0_1_0, 0x1611F603, 0xF0FC2400, 0x250312EA, 0xD8F302FE);
	r4 = D(r4, s0_1_0, 0x1700F3EC, 0xF2E7EB18, 0x0307EE25, 0xEEF70724);
	r5 = D(r5, s0_1_0, 0xF9101914, 0xE704ED52, 0xEF2503E0, 0x0F19FFF2);
	r6 = D(r6, s0_1_0, 0x061804F1, 0x01F90518, 0xF8FB030C, 0xEAE3F00E);
	r7 = D(r7, s0_1_0, 0xFEFC0514, 0xFF0607F1, 0x22F6E20E, 0xF903FAD1);
	r0 = D(r0, s0_1_1, 0xCB0DDF0E, 0xFBEDD6D4, 0x3F07E30A, 0xF100FF01);
	r1 = D(r1, s0_1_1, 0xFAFA0A03, 0xCCE8E933, 0xE8FE1900, 0xF81B083D);
	r2 = D(r2, s0_1_1, 0x23CD4881, 0xCDCF16D8, 0xE3F600C1, 0xD0BA0EB9);
	r3 = D(r3, s0_1_1, 0x0B01F0D3, 0xBD011823, 0xDDC9201A, 0xF905E7C3);
	r4 = D(r4, s0_1_1, 0xE2060F2F, 0xF412FFB9, 0x1209F85C, 0x2F10FFE1);
	r5 = D(r5, s0_1_1, 0x0009FED1, 0x090BEE02, 0x17E820D5, 0x09F92918);
	r6 = D(r6, s0_1_1, 0x05F51A21, 0x2A010F97, 0x00132B81, 0xD7EAEBD4);
	r7 = D(r7, s0_1_1, 0xFDE7FF04, 0xFFF51BE8, 0x0C161A14, 0x06CEFDBE);
	r0 = D(r0, s0_1_2, 0xFCD10EED, 0x070DFDF4, 0xFDF203E6, 0x08FFFA0A);
	r1 = D(r1, s0_1_2, 0xFF171A07, 0xE5C3E0F9, 0xFB020F12, 0x00D80DE7);
	r2 = D(r2, s0_1_2, 0xF09EF02E, 0x22E103FD, 0x09F71681, 0x00EA0107);
	r3 = D(r3, s0_1_2, 0x021BFB29, 0x07FAFB0F, 0xF1D2FBE3, 0x02FBFDEA);
	r4 = D(r4, s0_1_2, 0x05D5F807, 0x0A091E0D, 0xFEEAF203, 0xFAFFF8FA);
	r5 = D(r5, s0_1_2, 0x2737EC22, 0xFD01F7F2, 0x1CF6080A, 0x0813FD0A);
	r6 = D(r6, s0_1_2, 0x13FB1806, 0x04080B0E, 0x2AF511F6, 0xDB22F804);
	r7 = D(r7, s0_1_2, 0x05FFF704, 0xF2020D1C, 0xF8F6E130, 0xF804FB15);
	r0 = D(r0, s0_2_0, 0xE3FE08DD, 0xEA010C13, 0x0D0A050B, 0x0BF7FA05);
	r1 = D(r1, s0_2_0, 0xFAFE0108, 0xEFF70BF3, 0xF9FCF9FA, 0x0705F4EA);
	r2 = D(r2, s0_2_0, 0xCD07E32B, 0x1E100B0E, 0x020D0E34, 0x25EDFEF4);
	r3 = D(r3, s0_2_0, 0xFA05FB06, 0xF5FB00E4, 0xF610051E, 0xFEF5050D);
	r4 = D(r4, s0_2_0, 0x0A060202, 0xC705E90A, 0x0800F30B, 0xFCF70000);
	r5 = D(r5, s0_2_0, 0xF9FCF8E7, 0x16F3FEF1, 0xE2F2021E, 0xF306FE01);
	r6 = D(r6, s0_2_0, 0xF7FCFFFD, 0x03FEFC11, 0x0403EC25, 0x15F305EE);
	r7 = D(r7, s0_2_0, 0xF301FE06, 0xF6FFF41E, 0x1AFFF813, 0xF20903FE);
	r0 = D(r0, s0_2_1, 0xDE0110FF, 0xFFFF08E5, 0xFC05FA0E, 0xF612020C);
	r1 = D(r1, s0_2_1, 0xF8040406, 0xE50402FD, 0x06FC0505, 0x0D060C08);
	r2 = D(r2, s0_2_1, 0xB630F709, 0xD6170F23, 0x1305031D, 0xECF90AFA);
	r3 = D(r3, s0_2_1, 0x070A0AEF, 0xF5EC13F5, 0x05FE02F5, 0x07FFF2E5);
	r4 = D(r4, s0_2_1, 0xD3FFFD21, 0xFF3CCB10, 0x0A0BFC2C, 0x0001F60D);
	r5 = D(r5, s0_2_1, 0x0BCF1F20, 0x10FBF202, 0x2212EDF7, 0x11FE0807);
	r6 = D(r6, s0_2_1, 0xF30C0DFE, 0xF30E0404, 0x0310F8CC, 0x130401D1);
	r7 = D(r7, s0_2_1, 0x07FEFFFA, 0xE82DFC01, 0xF401F11F, 0xFD080300);
	r0 = D(r0, s0_2_2, 0x04EF0709, 0xF300030F, 0x07050A0C, 0xFBF8FD01);
	r1 = D(r1, s0_2_2, 0x00050100, 0xEBEAFE13, 0xF6010201, 0x080A0DEC);
	r2 = D(r2, s0_2_2, 0xDEFC12F9, 0xECFA11EF, 0x0BFDF256, 0xFDFA060D);
	r3 = D(r3, s0_2_2, 0x0D0B04FF, 0x03EA0B28, 0xEFFC0BFC, 0xFFFC06EC);
	r4 = D(r4, s0_2_2, 0xFAFAFEED, 0xDB022118, 0xF7F9080F, 0xFBFFFAF8);
	r5 = D(r5, s0_2_2, 0x15F8FAEC, 0x0A0003F2, 0xE80F1701, 0x09FC020A);
	r6 = D(r6, s0_2_2, 0x0AFC0106, 0x14F2FC08, 0x12D801FF, 0xE7090924);
	r7 = D(r7, s0_2_2, 0xFFFA01FC, 0xF4FAFD06, 0xE204FFF7, 0xF802FFFF);
	r0 = D(r0, s1_0_0, 0xF3FDEFFE, 0x0BF206F9, 0xF7071605, 0x06F7F7F9);
	r1 = D(r1, s1_0_0, 0xFCFFFF00, 0xF403F000, 0xFA10DCFF, 0xED0EEE02);
	r2 = D(r2, s1_0_0, 0xD9F8F5FF, 0x0C220BFA, 0x10F214FE, 0x03FCF504);
	r3 = D(r3, s1_0_0, 0x061EE0FE, 0xEDF50CF2, 0x02F01EF7, 0x04100206);
	r4 = D(r4, s1_0_0, 0xFEFF17FE, 0x18E235FD, 0xF7F305F7, 0x08F8FDF8);
	r5 = D(r5, s1_0_0, 0xE3130CFD, 0xFD08F30A, 0xA3F42A02, 0x02FA02FB);
	r6 = D(r6, s1_0_0, 0xEE1115FF, 0xF0F61600, 0xFD170F15, 0x07E8E9FA);
	r7 = D(r7, s1_0_0, 0xFFF7FF01, 0x0417FEF9, 0x08FD2E01, 0x06E4F4F9);
	r0 = D(r0, s1_0_1, 0x1014FEFF, 0x0BFDFF04, 0x0410110F, 0xE10A06FD);
	r1 = D(r1, s1_0_1, 0xFE02F703, 0x1D1BF1F4, 0x0C14E708, 0x0C2806FC);
	r2 = D(r2, s1_0_1, 0x0CD51409, 0xC20D3E0E, 0x1AED07D3, 0xF5D8FB05);
	r3 = D(r3, s1_0_1, 0x0407F514, 0xEFFF0CFF, 0x030E0103, 0x000BF803);
	r4 = D(r4, s1_0_1, 0xF3FE14FE, 0x0E06E00B, 0x06EE0CF7, 0xEDF40805);
	r5 = D(r5, s1_0_1, 0x03D2F3E8, 0x06E7FA01, 0xB4FDE0D3, 0xF6E6F0FF);
	r6 = D(r6, s1_0_1, 0x012410F7, 0xE5E1FBDF, 0x81B069F7, 0x14E5ECEA);
	r7 = D(r7, s1_0_1, 0x01EE02FE, 0xF11AFC04, 0xFCE3FBFA, 0x01CAF8FC);
	r0 = D(r0, s1_0_2, 0xFF04FFF4, 0x06F5FFF0, 0xE70004EF, 0x0C0502F1);
	r1 = D(r1, s1_0_2, 0x0101FE05, 0xF30AF608, 0xFE09F110, 0x0B17020D);
	r2 = D(r2, s1_0_2, 0x03F00808, 0xFC2AEBB2, 0xFBC31F8A, 0x0A020CFB);
	r3 = D(r3, s1_0_2, 0xEF051F00, 0xEFE708F8, 0x0EF9FC0B, 0x000EFEFD);
	r4 = D(r4, s1_0_2, 0xFE14F7F3, 0x0AD50FF2, 0xF3FA04F1, 0xE70704F3);
	r5 = D(r5, s1_0_2, 0x24E101F3, 0xF0FB050C, 0x10030000, 0x0DFFFF08);
	r6 = D(r6, s1_0_2, 0xFF090007, 0x05FEF901, 0x4007E2CE, 0xEF09E706);
	r7 = D(r7, s1_0_2, 0xF70006F5, 0x0E0DFC04, 0xF4F404F9, 0x06F5FFE9);
	r0 = D(r0, s1_1_0, 0xE8FDE900, 0x020900FE, 0x060EEFF7, 0xEC090E03);
	r1 = D(r1, s1_1_0, 0xFB0001FE, 0xE401F5FC, 0xF505F7FE, 0xE5040500);
	r2 = D(r2, s1_1_0, 0x0AD3FD14, 0x0A12FEF7, 0xF0121917, 0x0A02080D);
	r3 = D(r3, s1_1_0, 0xED0925F1, 0xD906D5F9, 0x09F0FCEC, 0x06061DFF);
	r4 = D(r4, s1_1_0, 0x0108FF00, 0xF70F37F4, 0x04080CFE, 0x03070306);
	r5 = D(r5, s1_1_0, 0xF0EEE01F, 0xFF0C10FC, 0xD3F5DE14, 0xFFFBFD02);
	r6 = D(r6, s1_1_0, 0xF9040602, 0x08021000, 0xC817DCF5, 0x0A1BEDFF);
	r7 = D(r7, s1_1_0, 0xFBFEFD05, 0x01FD15F5, 0xF1FF1000, 0xF0ECFCFD);
	r0 = D(r0, s1_1_1, 0x0405ED03, 0xFB0A0A00, 0xFCD7EB10, 0x050105FA);
	r1 = D(r1, s1_1_1, 0xFEFBFDFD, 0xFB18DE13, 0x1A04EB0D, 0xE8E4EDFC);
	r2 = D(r2, s1_1_1, 0xE7F40EBA, 0xF40727F8, 0xE9D90709, 0xFAE9F6E7);
	r3 = D(r3, s1_1_1, 0xFF1811FD, 0xFE16FC1B, 0x01102D03, 0xEF121711);
	r4 = D(r4, s1_1_1, 0xE6F7FDE7, 0xA038E416, 0xFD11E5F7, 0x0405FC11);
	r5 = D(r5, s1_1_1, 0xC1F11AE2, 0x0003FD0A, 0xD608FEDE, 0xF80511EC);
	r6 = D(r6, s1_1_1, 0xF50E0F11, 0xE2E5E0FD, 0x9E23FCDC, 0xEF1423F5);
	r7 = D(r7, s1_1_1, 0xFFF600FC, 0x1B1710FF, 0x0EB9D621, 0x1CFD0CE0);
	r0 = D(r0, s1_1_2, 0xFA02E20F, 0x0A000507, 0x05050405, 0x0502021B);
	r1 = D(r1, s1_1_2, 0xFB0502F6, 0xF605D814, 0x0010EC04, 0x00E9C723);
	r2 = D(r2, s1_1_2, 0xEFF8EDED, 0xECFBF5E0, 0xA625172A, 0x020BF804);
	r3 = D(r3, s1_1_2, 0xEA11FEE0, 0xD818F5F7, 0x04E0F109, 0xF7F7FD0E);
	r4 = D(r4, s1_1_2, 0x0001F711, 0xEAF431D0, 0xF6FB060A, 0x08000705);
	r5 = D(r5, s1_1_2, 0xE40E13EF, 0x01FD040A, 0xEF01CD06, 0xF60405F6);
	r6 = D(r6, s1_1_2, 0xFF020CFB, 0xF90413EF, 0xE604C81D, 0xE91621C0);
	r7 = D(r7, s1_1_2, 0x03FCFF00, 0x1EEA021E, 0x0A063B11, 0xFC120A00);
	r0 = D(r0, s1_2_0, 0xF80E07E9, 0x0D0406FD, 0xEE19FA0B, 0xFDF0F4F8);
	r1 = D(r1, s1_2_0, 0xFA00FF06, 0xFB0D04FE, 0x0A020506, 0xF106F6FC);
	r2 = D(r2, s1_2_0, 0xE5F2F2BF, 0x24DF0C03, 0x0E040403, 0x03DDE601);
	r3 = D(r3, s1_2_0, 0xFB0B0506, 0xFD03F4F5, 0xFAD61502, 0xFB190704);
	r4 = D(r4, s1_2_0, 0xEF01FEF8, 0x17183D08, 0x07FE00E7, 0x060BF806);
	r5 = D(r5, s1_2_0, 0xF20F150B, 0x0310F703, 0xF40C091A, 0x02F10703);
	r6 = D(r6, s1_2_0, 0xF90A0501, 0xFA15FF03, 0x07FA12F6, 0x1702E5FE);
	r7 = D(r7, s1_2_0, 0x02FC02FA, 0x04F106FE, 0xEA15EFFD, 0xFCF906E7);
	r0 = D(r0, s1_2_1, 0x0419FA10, 0x06F9EAF5, 0x02FE0017, 0x0D1604FE);
	r1 = D(r1, s1_2_1, 0x01FD09FD, 0x0015F117, 0x020505FB, 0xFB0C070D);
	r2 = D(r2, s1_2_1, 0x10E72DE6, 0xCE1902EE, 0x02EF08F3, 0xF402FFE7);
	r3 = D(r3, s1_2_1, 0xF61312DC, 0x1001F40B, 0x0BFA04F7, 0x05FEFB0E);
	r4 = D(r4, s1_2_1, 0xEA1C0408, 0xF6EFF302, 0xF1F504D8, 0xFAECFAFB);
	r5 = D(r5, s1_2_1, 0xFE0ECEC5, 0x00F2EA02, 0xEEF0E5D5, 0xFDF6F5F0);
	r6 = D(r6, s1_2_1, 0x00130C09, 0xF5E617F3, 0xEC1037FA, 0xFEDD00E0);
	r7 = D(r7, s1_2_1, 0xFEF800F7, 0xF4061CF3, 0x0CBF01F3, 0x06FC13EE);
	r0 = D(r0, s1_2_2, 0xF9F8F302, 0x0301F4EE, 0xE60907E3, 0x00FF0304);
	r1 = D(r1, s1_2_2, 0xFB0003FD, 0xFBFC0211, 0x060108FE, 0x08F31003);
	r2 = D(r2, s1_2_2, 0xFFE70505, 0x01FD0CEE, 0xF3F9DBB7, 0x05FA09FA);
	r3 = D(r3, s1_2_2, 0x0007EBFA, 0x04F1EAF5, 0x0EEBF30A, 0x01FA0708);
	r4 = D(r4, s1_2_2, 0xF7FD0AFD, 0xEA012A33, 0xF40804F8, 0xFE070300);
	r5 = D(r5, s1_2_2, 0xF603FA05, 0xFDF80208, 0xFC08FDED, 0xFFFEF8FB);
	r6 = D(r6, s1_2_2, 0x03F303F9, 0xF3F6F5F1, 0x09FF09FD, 0x0705CAEE);
	r7 = D(r7, s1_2_2, 0x01040101, 0x0CF51104, 0xE72108F6, 0x01F4EF05);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-3.762e-03, 1.028e-02, -1.476e-02, 9.492e-03);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-5.064e-03, -1.139e-02, 1.745e-03, -2.684e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-3.598e-02, -4.138e-02, -1.358e-02, -1.763e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(1.799e-03, 1.206e-02, 2.013e-02, -1.957e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-2.993e-02, -3.880e-02, -2.562e-02, -1.046e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-6.052e-02, -1.288e-02, -5.403e-02, -1.776e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-2.464e-02, -2.933e-02, -7.618e-03, 2.634e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(1.346e-03, 1.835e-03, -1.557e-04, 6.460e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-DS-conv4
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x00FCF801, 0x03FE0612, 0x01E3F8D7, 0x0902FFFC);
	r1 = D(r1, s0_0_0, 0x0000FF01, 0xFB0005FA, 0xFA040806, 0xFF0301FE);
	r2 = D(r2, s0_0_0, 0x01EA09DC, 0x04FE05FE, 0xF7F906F0, 0x0000FF01);
	r3 = D(r3, s0_0_0, 0xFDFB0500, 0x01FB0204, 0xFE01F901, 0x00040805);
	r4 = D(r4, s0_0_0, 0x06040305, 0x01F9FDFD, 0xFD0205FB, 0x03000303);
	r5 = D(r5, s0_0_0, 0xFFFF0A03, 0x01FF0800, 0x02FB01F9, 0xFE0402FB);
	r6 = D(r6, s0_0_0, 0x0703FF04, 0xFFFC0303, 0x0F03FD00, 0x03F8FE0D);
	r7 = D(r7, s0_0_0, 0x09F80203, 0xF6020EFE, 0x0100F905, 0x020406FD);
	r0 = D(r0, s0_0_1, 0xE8FC04F3, 0xF6F3F7FF, 0xE9FAD72F, 0x05F80702);
	r1 = D(r1, s0_0_1, 0x070206FB, 0x05FB0EFA, 0x01F603FB, 0xF9000EFC);
	r2 = D(r2, s0_0_1, 0x1CC18720, 0xFF06FE02, 0xF5F3EBF6, 0x01FC05FF);
	r3 = D(r3, s0_0_1, 0x00E4FF02, 0x0107FFFF, 0x0BF70EF4, 0xFB000809);
	r4 = D(r4, s0_0_1, 0xFCFF06F4, 0x03F7F6F6, 0x09050707, 0x050CFFF6);
	r5 = D(r5, s0_0_1, 0xFDDCEDF5, 0xF9FFFD0C, 0x03FFFC00, 0x03F40104);
	r6 = D(r6, s0_0_1, 0x05FBFEFE, 0xF6FEFAF6, 0x05DCF310, 0xFC000802);
	r7 = D(r7, s0_0_1, 0x06ED0304, 0x020C08FF, 0xF7FDEBF6, 0x07DFFD16);
	r0 = D(r0, s0_0_2, 0x0502FCF8, 0xF8FA0202, 0xF6FD02D3, 0xFBFBFCFE);
	r1 = D(r1, s0_0_2, 0x02FDFA05, 0xFFFE04F2, 0x07FA0302, 0x03000509);
	r2 = D(r2, s0_0_2, 0xBDE2F2D3, 0x00FDFF08, 0x0503FCFC, 0xFDFE0200);
	r3 = D(r3, s0_0_2, 0x04FFFF00, 0xFD0201FA, 0x00FEFB02, 0xFCFB0704);
	r4 = D(r4, s0_0_2, 0x0200FF0C, 0xF600FFFC, 0xF8FFFD0A, 0xFAFD00FA);
	r5 = D(r5, s0_0_2, 0x02F7FF04, 0x05FC0603, 0xF50202FC, 0x01FFFEFE);
	r6 = D(r6, s0_0_2, 0x00000006, 0x030203F7, 0x10FE03F0, 0xF601FAF2);
	r7 = D(r7, s0_0_2, 0x00FBFDFF, 0x0100FE05, 0x08FAF9FA, 0x020104F7);
	r0 = D(r0, s0_1_0, 0x04EDF3F6, 0xFBFBF7F2, 0xEADCCDF8, 0x110300F3);
	r1 = D(r1, s0_1_0, 0xFC0A0505, 0xFCFB11FC, 0x02ECF4FD, 0x0CFCFB06);
	r2 = D(r2, s0_1_0, 0xE7F1F5FA, 0x020603FC, 0x02FB0CE7, 0x01040204);
	r3 = D(r3, s0_1_0, 0x00050200, 0xFDFEF803, 0xFE020300, 0x060001F5);
	r4 = D(r4, s0_1_0, 0x0508060B, 0x040705FB, 0xFC07FF19, 0x06FCE6FD);
	r5 = D(r5, s0_1_0, 0xFCFC04F0, 0x0CF8FAFB, 0xFB0705FD, 0x05070FFF);
	r6 = D(r6, s0_1_0, 0x0B00FE04, 0x0002FBFC, 0x0200FFF0, 0xFCFB0CFA);
	r7 = D(r7, s0_1_0, 0xF0FF00F8, 0x0B120EFB, 0x0200FEE6, 0x09080FF3);
	r0 = D(r0, s0_1_1, 0xC80814F0, 0x09F0F805, 0xDAD1810B, 0xE6E2E906);
	r1 = D(r1, s0_1_1, 0xF7DDF0FE, 0x0BDEAEF5, 0x10E6F3F2, 0xF2DE02F2);
	r2 = D(r2, s0_1_1, 0xAB0EB6C6, 0x01F500FD, 0x08E4DD00, 0x0BF6F9F2);
	r3 = D(r3, s0_1_1, 0x04DEEAFA, 0xF7F7CDFC, 0xE3F7DBFD, 0x0FE438F6);
	r4 = D(r4, s0_1_1, 0x04E0DCEB, 0xEF010108, 0x190112BE, 0xE4EA99F5);
	r5 = D(r5, s0_1_1, 0xFC010507, 0xE3F3E0FE, 0xF7000107, 0x15DCF700);
	r6 = D(r6, s0_1_1, 0xFCEDEFF3, 0xE6F4DCF3, 0xC8BAD1F8, 0xE4F6B7D9);
	r7 = D(r7, s0_1_1, 0x01E3EEFF, 0x3AF8D009, 0xF301E84B, 0x1AAAEEFA);
	r0 = D(r0, s0_1_2, 0x110200FF, 0x0C04FF04, 0x1DC9D6FD, 0x0410FEFE);
	r1 = D(r1, s0_1_2, 0x01F70107, 0x0DF60205, 0xF2F1FF07, 0x1FF204FC);
	r2 = D(r2, s0_1_2, 0x11F4FC1A, 0xF5FCFF00, 0x0A000203, 0x0BF80107);
	r3 = D(r3, s0_1_2, 0xEAFF0203, 0xFBF3F1E6, 0xFFECFC03, 0x08FB100A);
	r4 = D(r4, s0_1_2, 0x11FFFD07, 0x0405FD00, 0xFBFFF607, 0x0AFF02FD);
	r5 = D(r5, s0_1_2, 0xFC01FCF7, 0x10F50C0D, 0xFBF70103, 0xFF04FFFB);
	r6 = D(r6, s0_1_2, 0x09F70009, 0x010008FF, 0x18D008E7, 0x17EEFE00);
	r7 = D(r7, s0_1_2, 0xDCEE01FD, 0x07F3FFC2, 0x1500FFF7, 0x04F702FD);
	r0 = D(r0, s0_2_0, 0x0202FC00, 0x0402FE05, 0x2C0701FC, 0x00F900F8);
	r1 = D(r1, s0_2_0, 0x02FC02F0, 0xFDFE0A00, 0x020602F1, 0x0C0302FF);
	r2 = D(r2, s0_2_0, 0xF700FC0D, 0xFD01FCF2, 0xF4FC02F8, 0xFC010501);
	r3 = D(r3, s0_2_0, 0x010100F9, 0x01050201, 0x0500FEFD, 0x04FB0506);
	r4 = D(r4, s0_2_0, 0x0E0304FD, 0x07FFFD05, 0xFE01010E, 0xFA0108EB);
	r5 = D(r5, s0_2_0, 0x0701FB00, 0x01F60905, 0x0200FFF5, 0x01FDFCF8);
	r6 = D(r6, s0_2_0, 0x010402F0, 0xFC04060E, 0x150307F1, 0x00010300);
	r7 = D(r7, s0_2_0, 0x03FEFBFC, 0xF0E3E1B1, 0x0801FCFA, 0x050807F4);
	r0 = D(r0, s0_2_1, 0xEB01080C, 0x0300FD00, 0x06E906FE, 0xF80700FC);
	r1 = D(r1, s0_2_1, 0xE310FBFE, 0x10FBE5F0, 0xDF0C03FE, 0xECFCFDF4);
	r2 = D(r2, s0_2_1, 0x09F90606, 0x0505FEF8, 0x0AF3F301, 0x0104FFFF);
	r3 = D(r3, s0_2_1, 0xF6030104, 0xE9F306EE, 0xEBFF01FA, 0x0E06FCFA);
	r4 = D(r4, s0_2_1, 0xF3FCF6EE, 0x05FBFF03, 0x09050A1E, 0x03F50306);
	r5 = D(r5, s0_2_1, 0x0402FF04, 0xF801FCFC, 0xF6F9FDF5, 0x0B01FBFC);
	r6 = D(r6, s0_2_1, 0x1100FF01, 0x03FEFD08, 0xFEFEE3F6, 0x01FB040C);
	r7 = D(r7, s0_2_1, 0xECFAFBFF, 0xA2A29DAC, 0xF8FCF0EB, 0x1DD7ECFC);
	r0 = D(r0, s0_2_2, 0xE300F409, 0x040003FE, 0xC4FA03FD, 0x0EF803F9);
	r1 = D(r1, s0_2_2, 0xFFFB02FB, 0x04F60C01, 0xFF03FB01, 0xF6F90003);
	r2 = D(r2, s0_2_2, 0xE6020308, 0xFA00FFFF, 0x01FF0002, 0x09020001);
	r3 = D(r3, s0_2_2, 0x08FF0001, 0x06F20409, 0x0206FD04, 0xFF000F04);
	r4 = D(r4, s0_2_2, 0x03F70108, 0xFEFD0304, 0xF7020406, 0xF0F80305);
	r5 = D(r5, s0_2_2, 0x02FF0002, 0x0BF70E00, 0x090104FC, 0x0BF801FD);
	r6 = D(r6, s0_2_2, 0x00F7FD09, 0xE0010205, 0x1FE9FF00, 0xF0FD0503);
	r7 = D(r7, s0_2_2, 0x0D01FB03, 0x01E50A0C, 0x0A02FB01, 0xF2050407);
	r0 = D(r0, s1_0_0, 0x15F8FDF0, 0xF209F8DE, 0xF509DFF2, 0x040AFDF3);
	r1 = D(r1, s1_0_0, 0xFE000105, 0xF7FE0504, 0x0801FFF5, 0x020401F8);
	r2 = D(r2, s1_0_0, 0xBFC4DE0A, 0xFB0300FF, 0xF7FEF10E, 0xF80503F3);
	r3 = D(r3, s1_0_0, 0xF40200FC, 0x030303F4, 0xFAFFFCFB, 0x0902FEFC);
	r4 = D(r4, s1_0_0, 0xFDF9FDFE, 0xE402FD19, 0x010301E8, 0x050004FE);
	r5 = D(r5, s1_0_0, 0xE8FEFA07, 0x03FDFE02, 0xF8020405, 0xF6000004);
	r6 = D(r6, s1_0_0, 0x01FC0006, 0x0702FDF9, 0x000D0005, 0x0402FFFA);
	r7 = D(r7, s1_0_0, 0xF502FAF0, 0xF50503EB, 0x0201020D, 0xFFFC03FA);
	r0 = D(r0, s1_0_1, 0x1004FEF3, 0xF2EFF61F, 0x05DFDCFC, 0xF1DEF31E);
	r1 = D(r1, s1_0_1, 0x000B03F7, 0x0BFFEA04, 0x0806FCEA, 0xF50201FE);
	r2 = D(r2, s1_0_1, 0x818CF30B, 0xF7F9FC0C, 0x05FFFCF3, 0xF601001A);
	r3 = D(r3, s1_0_1, 0xF8FEF708, 0x0EFD040B, 0xF0FA050D, 0x0BF0F604);
	r4 = D(r4, s1_0_1, 0xFC0C04F9, 0xECC4FD22, 0xF6F50734, 0x05FF0409);
	r5 = D(r5, s1_0_1, 0xDEE2F004, 0x08F6F9FA, 0x00F0022C, 0xF8F3EC00);
	r6 = D(r6, s1_0_1, 0xFC07FDE6, 0x0BFBF7F1, 0xDCE0EA0A, 0x0EFDFAF9);
	r7 = D(r7, s1_0_1, 0xF204F702, 0xF4FC0D11, 0x1705F9D4, 0xFF02EDEB);
	r0 = D(r0, s1_0_2, 0x0B02FD01, 0xFCF8FDFE, 0x09FDFC19, 0xFC07EEF5);
	r1 = D(r1, s1_0_2, 0x0503F3F5, 0xFC030806, 0x050BF9EC, 0xFEF6F201);
	r2 = D(r2, s1_0_2, 0xD581CF29, 0xFB04F3F5, 0x00000900, 0xFDFBFC06);
	r3 = D(r3, s1_0_2, 0x01F9FC03, 0x01FD0204, 0x0108F2F9, 0x03FF0307);
	r4 = D(r4, s1_0_2, 0xFDFEFBF8, 0xFFEFFE0C, 0x0104FDF2, 0xFF0301FB);
	r5 = D(r5, s1_0_2, 0xFF0307FF, 0x09FB0507, 0xFEFBFB11, 0xFF03FBFD);
	r6 = D(r6, s1_0_2, 0xFDFDFFFB, 0x0800FFFD, 0x03F80205, 0x05F70100);
	r7 = D(r7, s1_0_2, 0x04FEE402, 0xFC100CF6, 0x03FD0212, 0x00FFFD08);
	r0 = D(r0, s1_1_0, 0x02F613D0, 0xF600F620, 0xAEFEB716, 0xFF03F9F7);
	r1 = D(r1, s1_1_0, 0xFB02F9E7, 0x000CEE13, 0xDF04F920, 0xF8050CEA);
	r2 = D(r2, s1_1_0, 0x03D80D02, 0xFDFD03FF, 0x0304C724, 0xFC07FA12);
	r3 = D(r3, s1_1_0, 0xFC06E809, 0xFEFF0203, 0xFD07F8F8, 0x0402F214);
	r4 = D(r4, s1_1_0, 0xFAFD0205, 0xFEF800F6, 0x0211F31E, 0xFAFBFE05);
	r5 = D(r5, s1_1_0, 0x02FEF2FF, 0x0106F722, 0xFEF9F801, 0xFB04F500);
	r6 = D(r6, s1_1_0, 0xF80408F7, 0xFC03ED00, 0xFDF00110, 0xF4FC04F9);
	r7 = D(r7, s1_1_0, 0xF5FAE01A, 0x14F81A19, 0x05ED0DE0, 0xF40A05FC);
	r0 = D(r0, s1_1_1, 0xF8110820, 0xF1FDFFF4, 0xEEEA81FC, 0xEAF0F6FE);
	r1 = D(r1, s1_1_1, 0xE1F2D233, 0xEAE9DE27, 0xD8D4ED42, 0xC203E745);
	r2 = D(r2, s1_1_1, 0x05D8F5FF, 0x0200FC0F, 0xF50302EC, 0xF6FCFF32);
	r3 = D(r3, s1_1_1, 0xF0E6F101, 0xF4FDEEEE, 0xDEE2E311, 0x01FCF4CF);
	r4 = D(r4, s1_1_1, 0xF10CFBE5, 0x0001FFDF, 0x29E119C8, 0xF901E5E2);
	r5 = D(r5, s1_1_1, 0xF102F9F9, 0xFE00F1DD, 0xF9E90402, 0xEDFCF016);
	r6 = D(r6, s1_1_1, 0xF70700EE, 0xF206ECF4, 0xB907A7F2, 0xF1F7E1FD);
	r7 = D(r7, s1_1_1, 0xE7E0E021, 0x01F5E10A, 0xDD1BE154, 0xD9E4EB29);
	r0 = D(r0, s1_1_2, 0xF8FC040B, 0x000A03FD, 0xF2DDA7FD, 0xFF04FA08);
	r1 = D(r1, s1_1_2, 0xFCFECEF7, 0xFE09FDEF, 0x01EBF30A, 0xF607EEF4);
	r2 = D(r2, s1_1_2, 0xF885FE07, 0xFBF6FE12, 0xFE0001FA, 0xFA09FEEB);
	r3 = D(r3, s1_1_2, 0xFD050103, 0x02FEF700, 0xECEC0205, 0x0AFAF8F5);
	r4 = D(r4, s1_1_2, 0xFAEEFF10, 0xFE0901FF, 0xFAFA001E, 0x03F60300);
	r5 = D(r5, s1_1_2, 0x04F7FF05, 0x0CFFFAEC, 0xFCFC0302, 0xFE06F9FF);
	r6 = D(r6, s1_1_2, 0xFBEE040D, 0x010204FE, 0xF5EF05FF, 0xF9FC0AF8);
	r7 = D(r7, s1_1_2, 0x01EC0608, 0x06EBE0FD, 0x0F07FFE8, 0xFF13FFF4);
	r0 = D(r0, s1_2_0, 0x06EA02F5, 0xFC0105FF, 0xFCF2E8EA, 0x050C0A00);
	r1 = D(r1, s1_2_0, 0xFD040EFA, 0x0102DC05, 0xF7F8FFFA, 0xF9E9FDF4);
	r2 = D(r2, s1_2_0, 0x090BE7E5, 0x01F90602, 0x0306F502, 0xFD06FA02);
	r3 = D(r3, s1_2_0, 0x000407FD, 0xFEFCF3F6, 0x03030800, 0x040BECFF);
	r4 = D(r4, s1_2_0, 0xF8F607FD, 0x02FFFFF8, 0x01F4F3F3, 0xFAFEE8F5);
	r5 = D(r5, s1_2_0, 0xFF0306F9, 0x0606FB02, 0xFF010E01, 0x02F9FCFA);
	r6 = D(r6, s1_2_0, 0xFDF901FA, 0x01FCEFF5, 0x01EDFF03, 0x02F9EFF6);
	r7 = D(r7, s1_2_0, 0xFFFF0EFC, 0xF2F3E7EF, 0x060E100A, 0xFCF4EFFF);
	r0 = D(r0, s1_2_1, 0xF801F50F, 0x02F602FD, 0xE081D405, 0xFCEEF5F7);
	r1 = D(r1, s1_2_1, 0xFBE3ECE9, 0xF91B060F, 0xF8E2FAE6, 0xEF23F110);
	r2 = D(r2, s1_2_1, 0xF2FFF013, 0xFDF800F7, 0x0109F401, 0xFD0F0502);
	r3 = D(r3, s1_2_1, 0xFEFBFEFD, 0xFDF9E502, 0x02EB06F4, 0x010D0007);
	r4 = D(r4, s1_2_1, 0xF5110002, 0x04000406, 0xFD24F316, 0xE5F70408);
	r5 = D(r5, s1_2_1, 0x05FDFEFF, 0x00140809, 0x03F40AF7, 0xF315FCFC);
	r6 = D(r6, s1_2_1, 0xF50E0402, 0x01FF0310, 0xF227DA04, 0xFDF7FA06);
	r7 = D(r7, s1_2_1, 0x03F807F2, 0xC4EAAC1B, 0x08D00AE3, 0xDE1DF901);
	r0 = D(r0, s1_2_2, 0xFF070107, 0x05000007, 0xE29D0702, 0xFC040000);
	r1 = D(r1, s1_2_2, 0xF6E1FB12, 0x09F7FA00, 0x00F60A08, 0xF60C03F5);
	r2 = D(r2, s1_2_2, 0xF811F1F1, 0xFC08FAFC, 0x00FDFE01, 0x00FD0200);
	r3 = D(r3, s1_2_2, 0x04FF0400, 0xF7FF0A05, 0x01EB0003, 0x07FBFBF9);
	r4 = D(r4, s1_2_2, 0xFD0DF9FB, 0x03FEFCFE, 0xFFF6FCF5, 0x01000004);
	r5 = D(r5, s1_2_2, 0x03020004, 0x05F8FFFD, 0x030303FE, 0x02010203);
	r6 = D(r6, s1_2_2, 0xFC0AFAFD, 0xFBF9FFFF, 0xF71703FD, 0xF8F90209);
	r7 = D(r7, s1_2_2, 0x01FE0301, 0xE7F6EE17, 0x0709040A, 0x01FB05FC);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x01FD04F9, 0x10FD0912, 0x22E81216, 0x07FE0208);
	r1 = D(r1, s0_0_0, 0xFC08F9F7, 0x09F8F8FE, 0x08F90B03, 0xFD070103);
	r2 = D(r2, s0_0_0, 0x15E9F425, 0x03FEFDFE, 0xF706F5EC, 0x03FE0004);
	r3 = D(r3, s0_0_0, 0x0AFD0808, 0x07FF02FD, 0x0C05FCFD, 0x0003FC04);
	r4 = D(r4, s0_0_0, 0xFC0601FD, 0xF700F8FA, 0x06000203, 0x010101FD);
	r5 = D(r5, s0_0_0, 0x0AFC07FE, 0x02FCFAFC, 0xFC0101F7, 0x0302FF02);
	r6 = D(r6, s0_0_0, 0xFB0603F8, 0x07F7FF00, 0xFC0C0006, 0x02EFFFFC);
	r7 = D(r7, s0_0_0, 0x01000705, 0xF510FF08, 0xFA0200F9, 0xFF0A0405);
	r0 = D(r0, s0_0_1, 0x0300FB07, 0x110701F2, 0x1AFD150E, 0xF204ECFB);
	r1 = D(r1, s0_0_1, 0x07FF0604, 0xFF0D1302, 0x07000010, 0xF303FE0A);
	r2 = D(r2, s0_0_1, 0xE31F1FE2, 0xF803FAF7, 0xE9FC0716, 0xF705FCFB);
	r3 = D(r3, s0_0_1, 0x0907F9E8, 0x0602FEFC, 0xFA02F8F9, 0xFA0603FE);
	r4 = D(r4, s0_0_1, 0x060106FB, 0x0C05FBFB, 0xE206F702, 0x07FB03F9);
	r5 = D(r5, s0_0_1, 0x2F131BFE, 0x050401FD, 0xED04F503, 0x000508FB);
	r6 = D(r6, s0_0_1, 0x04FE08FF, 0x0EF70D0B, 0xE6080CF6, 0x1B0103FF);
	r7 = D(r7, s0_0_1, 0xE8FCFF09, 0xEC0EFDFE, 0x1EFE0703, 0xFE031304);
	r0 = D(r0, s0_0_2, 0xEA04FBFE, 0x0801F90D, 0xEDFF0510, 0x17FFF7FE);
	r1 = D(r1, s0_0_2, 0xFD020408, 0xEAFBEE11, 0xF6FE090E, 0x080517F7);
	r2 = D(r2, s0_0_2, 0x81002E2B, 0x030201FF, 0x1BFD1001, 0x050308FE);
	r3 = D(r3, s0_0_2, 0x0A01030B, 0x0BFF0901, 0x020202F5, 0x0202FD03);
	r4 = D(r4, s0_0_2, 0x0A0312FE, 0xFC01050A, 0xEFFFFFF8, 0x0D010102);
	r5 = D(r5, s0_0_2, 0x01FEFAFF, 0xFEFE0304, 0xFD00FFFA, 0x0000FE05);
	r6 = D(r6, s0_0_2, 0x060307FC, 0xFF000408, 0x030909F2, 0xFAFEF315);
	r7 = D(r7, s0_0_2, 0xEA0303EA, 0x090807F3, 0x0D02FE05, 0x0B020505);
	r0 = D(r0, s0_1_0, 0x09020E11, 0x1914F204, 0xD85BFEDD, 0x0D100E0C);
	r1 = D(r1, s0_1_0, 0x0FFD0502, 0xF112F7EA, 0xF2FFECF3, 0x13030906);
	r2 = D(r2, s0_1_0, 0xB86417C7, 0x06FF03FF, 0xFEF1F8F8, 0xF806FEF7);
	r3 = D(r3, s0_1_0, 0x0707EBFC, 0x02DFF7FD, 0xFF0A09FA, 0xF80FFCF7);
	r4 = D(r4, s0_1_0, 0xFCE5FD05, 0xF914041C, 0xEE1504F7, 0x0EE3F900);
	r5 = D(r5, s0_1_0, 0x170AF106, 0xF6100200, 0x02FBFA06, 0x04140804);
	r6 = D(r6, s0_1_0, 0x0CFC0310, 0xFFFA00FC, 0x121A0003, 0x0D02FD09);
	r7 = D(r7, s0_1_0, 0x0F0CE918, 0x0DCAF3F4, 0x13FB0009, 0x16131607);
	r0 = D(r0, s0_1_1, 0xD600E5E6, 0x0E03F6FC, 0xB62CA318, 0x0205FFF4);
	r1 = D(r1, s0_1_1, 0xF404E4E9, 0xEF1515E4, 0xFAFB00FD, 0xE219F8E1);
	r2 = D(r2, s0_1_1, 0x2C27B1F8, 0xE903FEF7, 0xF9F508DF, 0x190B07F8);
	r3 = D(r3, s0_1_1, 0x28051813, 0x1D02100C, 0x2309F210, 0x06FEFF02);
	r4 = D(r4, s0_1_1, 0xCF09F2FF, 0xFA09F4F8, 0x3607FA12, 0xED03F611);
	r5 = D(r5, s0_1_1, 0x02FCECE8, 0x0B1FFF0A, 0xF303021F, 0xF9F80DF1);
	r6 = D(r6, s0_1_1, 0x0E09FBF2, 0xF404ECF5, 0xFE1BF1BB, 0xE318F3EC);
	r7 = D(r7, s0_1_1, 0xED0C0721, 0x1EEE1201, 0xC90BFDEE, 0xFB1118F0);
	r0 = D(r0, s0_1_2, 0xE904FF02, 0x080004F2, 0x1A2B04D0, 0x08020EFF);
	r1 = D(r1, s0_1_2, 0x090701FA, 0x0605EAF3, 0x0200070B, 0xDC03FB08);
	r2 = D(r2, s0_1_2, 0x2E30E3D8, 0xFEFC05F8, 0x0203080C, 0xFC00F6F9);
	r3 = D(r3, s0_1_2, 0x03FFF5F6, 0xF3FEEC11, 0xF8010509, 0xFD02030F);
	r4 = D(r4, s0_1_2, 0x05030509, 0x080004FB, 0xE0000F08, 0x0DFD0110);
	r5 = D(r5, s0_1_2, 0xFC02080A, 0x0201FC0C, 0xEE00FF06, 0x0002FEFE);
	r6 = D(r6, s0_1_2, 0x0002050E, 0x0E020207, 0xE0F90108, 0x1E00FF0A);
	r7 = D(r7, s0_1_2, 0xE401FD19, 0x02E9F821, 0x1F02FAE8, 0xFDF9EB04);
	r0 = D(r0, s0_2_0, 0xE7EE0DF6, 0xFE010BF6, 0x19A3EF12, 0x030DF601);
	r1 = D(r1, s0_2_0, 0x030E0300, 0xFE09E200, 0xEC20050C, 0xEFF92404);
	r2 = D(r2, s0_2_0, 0x06DEFD24, 0xFCFB06F6, 0xFC070703, 0x09F7FA02);
	r3 = D(r3, s0_2_0, 0x150D0906, 0x03FF0203, 0x0B08FE0A, 0x0620F30C);
	r4 = D(r4, s0_2_0, 0x09FB0701, 0x0F01FB0D, 0xFF03FB05, 0x070EF902);
	r5 = D(r5, s0_2_0, 0x030809FE, 0x03F8F309, 0xF7FD02F2, 0xFA0CF4FC);
	r6 = D(r6, s0_2_0, 0x04FB05F9, 0x0D19F10D, 0xF1130F02, 0x17FDFE08);
	r7 = D(r7, s0_2_0, 0xEB0B09E8, 0xE02DE4E3, 0xFDFC0AF6, 0xD80C0CFB);
	r0 = D(r0, s0_2_1, 0x0FF3E412, 0x0CFFF606, 0xE41BEC03, 0x0506E4F4);
	r1 = D(r1, s0_2_1, 0x0C1BF1F9, 0xD81D22FB, 0xFD1CE6F3, 0x07240706);
	r2 = D(r2, s0_2_1, 0xE5F909F8, 0xFE01FCF1, 0x08E4FD04, 0xF70906ED);
	r3 = D(r3, s0_2_1, 0x0603E0E8, 0x1523E608, 0xF81AFBEB, 0x000A0006);
	r4 = D(r4, s0_2_1, 0x04090B01, 0x01F90D09, 0xF806000A, 0x1D0C0008);
	r5 = D(r5, s0_2_1, 0x09FEF803, 0x0912FD04, 0x0DFFF603, 0xF00305F8);
	r6 = D(r6, s0_2_1, 0x02FB0F06, 0xF30B00FD, 0x151BFCF3, 0x1410050A);
	r7 = D(r7, s0_2_1, 0x0D0AEFF5, 0xF625C4EF, 0x0A07FDF9, 0xF91414FC);
	r0 = D(r0, s0_2_2, 0xFB0EFDED, 0xFA030605, 0xD6EA1A19, 0xFF0A0205);
	r1 = D(r1, s0_2_2, 0xFFFF0200, 0x0AEDF4F7, 0x1807F702, 0x0B0002F1);
	r2 = D(r2, s0_2_2, 0xE4EE041A, 0x0502FBFB, 0xFFFC0003, 0x04000100);
	r3 = D(r3, s0_2_2, 0x00000A07, 0x04030404, 0x1005FFFC, 0xFC08F802);
	r4 = D(r4, s0_2_2, 0xF208FDFF, 0xFF01F9FC, 0xFA05F9F3, 0xF005FC04);
	r5 = D(r5, s0_2_2, 0xFCFD04FF, 0xFD01FDFF, 0xFFFE05FE, 0xFDFFFD06);
	r6 = D(r6, s0_2_2, 0xF102FBFC, 0xFB04F701, 0xF40A08EE, 0xF901FFFA);
	r7 = D(r7, s0_2_2, 0x0F0901FB, 0xFD151209, 0x05FD0C0C, 0x11FC00F9);
	r0 = D(r0, s1_0_0, 0xFDFD0606, 0x0703F9FB, 0x0C15EDE8, 0x0501FD00);
	r1 = D(r1, s1_0_0, 0x0004FCFC, 0x0403F907, 0x0201FB07, 0xFF0004FF);
	r2 = D(r2, s1_0_0, 0x1F28EC94, 0xFEFF0101, 0xFF05F0FF, 0x0002FF02);
	r3 = D(r3, s1_0_0, 0x0307FEFF, 0xFE02FE01, 0x060903F0, 0x0103F4FD);
	r4 = D(r4, s1_0_0, 0x01070703, 0xFF08F1E5, 0x0004FF06, 0xFF000100);
	r5 = D(r5, s1_0_0, 0x0308F4E7, 0xF904FAFB, 0x0009F8F6, 0x0501FB02);
	r6 = D(r6, s1_0_0, 0xFCFE03FD, 0x0202FCFC, 0x03FC0E06, 0xFBFE0002);
	r7 = D(r7, s1_0_0, 0x0400F811, 0x00F6052C, 0x01FF0305, 0x0306FD07);
	r0 = D(r0, s1_0_1, 0xFB03FF04, 0x01F8FAF9, 0xF6F5FDEB, 0x0803F7F7);
	r1 = D(r1, s1_0_1, 0xFE05FC09, 0x04FCF4F3, 0x000CFD09, 0x010FF416);
	r2 = D(r2, s1_0_1, 0x0022EED3, 0x00FDFFFF, 0xFDF1F400, 0xFA01F6FF);
	r3 = D(r3, s1_0_1, 0xFFFBF5F9, 0xFC00FCFF, 0xF802F6FD, 0xFC03F2FC);
	r4 = D(r4, s1_0_1, 0xF5FFF510, 0xFDFAF5F0, 0x0504FF15, 0xFA01FE03);
	r5 = D(r5, s1_0_1, 0x07EBF3EC, 0xF604F802, 0x0003F6FF, 0x03FDF7FC);
	r6 = D(r6, s1_0_1, 0xF903F705, 0x0006FFFB, 0x15DDE610, 0x0703F8F5);
	r7 = D(r7, s1_0_1, 0xFF04FF00, 0xF5F60510, 0xF103FEF9, 0xFFFCF9F2);
	r0 = D(r0, s1_0_2, 0xFB03FD08, 0x06F0F703, 0xFDEBFE00, 0x0504FD03);
	r1 = D(r1, s1_0_2, 0xF904FC02, 0x0704FB00, 0xF90AF909, 0x0002F5F0);
	r2 = D(r2, s1_0_2, 0x05A8DDD7, 0x02FD0002, 0x0302FE02, 0xFBFBFCF8);
	r3 = D(r3, s1_0_2, 0x04FDFF02, 0x0005FC05, 0xFC02FB04, 0xFFFFFDFF);
	r4 = D(r4, s1_0_2, 0xFF01F7F1, 0x04F9FDFD, 0xF705FB07, 0x02030101);
	r5 = D(r5, s1_0_2, 0xFC02FB09, 0xF6FFF8FE, 0x04FEF700, 0x0002FD03);
	r6 = D(r6, s1_0_2, 0xFF00FAF9, 0xFB02FEFA, 0x0CFA06EC, 0xFE01F903);
	r7 = D(r7, s1_0_2, 0x010DF304, 0x0D04FE0B, 0x06010200, 0x0605FD02);
	r0 = D(r0, s1_1_0, 0x02000D0F, 0x02F5F5F8, 0xEB00CEFF, 0xF8F9050A);
	r1 = D(r1, s1_1_0, 0x0605FEF6, 0x0BEDFE03, 0xFBFFF9F6, 0xFD020203);
	r2 = D(r2, s1_1_0, 0xF2E9FF07, 0x04FAFF04, 0x03E0F801, 0xFFFBFCFD);
	r3 = D(r3, s1_1_0, 0x03F1F8FD, 0xFB09FEFC, 0x00F4FE08, 0xEC02F2EE);
	r4 = D(r4, s1_1_0, 0xFA00FCF8, 0x0104FBFB, 0x0303F504, 0xFB09FAFB);
	r5 = D(r5, s1_1_0, 0x05FE050A, 0xF104F6FA, 0xFF01FCFE, 0x08EAFB06);
	r6 = D(r6, s1_1_0, 0xFEFEFAFA, 0xFF0BF4F1, 0xFFFB02F7, 0x000801F1);
	r7 = D(r7, s1_1_0, 0x050DFCF0, 0xFF1002E7, 0xFEFD0DFF, 0x09FEF607);
	r0 = D(r0, s1_1_1, 0xFD18FA0D, 0xFAF8F8F6, 0x05FDF6F9, 0x17E0FA00);
	r1 = D(r1, s1_1_1, 0xFFFE01E8, 0xEDF8E9EB, 0x07FAFCFC, 0x11EAF005);
	r2 = D(r2, s1_1_1, 0xF600E9CE, 0x0FFAFDF9, 0x02F5F1F1, 0xF7FBF5FB);
	r3 = D(r3, s1_1_1, 0x10EBFBF6, 0x0106EDFD, 0x15F9FAE4, 0xEBF9FF00);
	r4 = D(r4, s1_1_1, 0x0303F516, 0xF9FCF8F9, 0xCD010AFF, 0x0C06F4FA);
	r5 = D(r5, s1_1_1, 0x04FDEBF6, 0xEFFDFBFC, 0xFD04FAF4, 0x25F0FAF8);
	r6 = D(r6, s1_1_1, 0x14F7FA01, 0x10FEF9FA, 0x29C7DD08, 0xFCFCE7FA);
	r7 = D(r7, s1_1_1, 0x1209F8F6, 0xF81AF4D2, 0x3004EF08, 0x28E5E8EC);
	r0 = D(r0, s1_1_2, 0x0AF3F6FF, 0xF504F8FE, 0xEE0AF702, 0x0EE9FAF6);
	r1 = D(r1, s1_1_2, 0x0BF6F601, 0x00CFFC0A, 0x06FA06FD, 0x15E2FFFE);
	r2 = D(r2, s1_1_2, 0xF92DFFFF, 0x08F8FFFD, 0xFDF7F9FF, 0xFCFAFF03);
	r3 = D(r3, s1_1_2, 0xFCF9F601, 0x04F8FCF9, 0x18DBFC01, 0xF7F3FF0C);
	r4 = D(r4, s1_1_2, 0x11EAF7FC, 0xF702FFFF, 0x25FA01FF, 0x03FCFDFD);
	r5 = D(r5, s1_1_2, 0x08EDFBFC, 0xEFF8050D, 0xF2F8F5FE, 0xFEF8FCFD);
	r6 = D(r6, s1_1_2, 0x0CF0F504, 0x00FCF9FC, 0x0ED8EEF4, 0x09EAF6F7);
	r7 = D(r7, s1_1_2, 0x00F8FB07, 0x030C03F3, 0xD10FF60B, 0x06FAFB06);
	r0 = D(r0, s1_2_0, 0x02070505, 0xFB01FC06, 0x0F14FE04, 0xFF010502);
	r1 = D(r1, s1_2_0, 0xFB010301, 0x02F102FC, 0xFF0FEEFB, 0xFFFBFC04);
	r2 = D(r2, s1_2_0, 0x0FF8FBFC, 0x02FE05FF, 0x08EE03FF, 0xFB01FCFC);
	r3 = D(r3, s1_2_0, 0x00030302, 0x0502F902, 0xFE050104, 0x000AFC00);
	r4 = D(r4, s1_2_0, 0xFEF8F903, 0xFE020208, 0x0303FE01, 0x0603F9F7);
	r5 = D(r5, s1_2_0, 0xFE00FF00, 0xFF060004, 0xFF010104, 0xFFFE02FF);
	r6 = D(r6, s1_2_0, 0x05F8FDFF, 0x0005FB00, 0x00FB0A00, 0x09000106);
	r7 = D(r7, s1_2_0, 0xFDFEFA07, 0x1116DCE8, 0xFB000402, 0x0AE7FBFA);
	r0 = D(r0, s1_2_1, 0x0404F1F7, 0xFE02F8FE, 0x0313F9F3, 0xFCEFEF02);
	r1 = D(r1, s1_2_1, 0x09FBECF5, 0x06E5EF12, 0xFFFCEEF5, 0x0EEBF5F6);
	r2 = D(r2, s1_2_1, 0x041403F7, 0x06FEFE05, 0x07FAEE08, 0xF8FEF700);
	r3 = D(r3, s1_2_1, 0xFDFDF3F8, 0xFFFFECF1, 0x01FBF8F7, 0xE700E8F9);
	r4 = D(r4, s1_2_1, 0x09F2FFFE, 0xF9020000, 0x020AFCFF, 0xFCF7EAF5);
	r5 = D(r5, s1_2_1, 0xFC01FDF9, 0xE105E9F7, 0xFDFFFFF9, 0x06EEEC0A);
	r6 = D(r6, s1_2_1, 0x05F5F806, 0xFD06F3F8, 0x17E3ECF6, 0xFE08F6F7);
	r7 = D(r7, s1_2_1, 0xFCFCF6F8, 0x01FEE3E7, 0xF6FB0508, 0x02EDE006);
	r0 = D(r0, s1_2_2, 0x01FBEF01, 0xFF0402FB, 0x1DDAEBEA, 0x0EECF510);
	r1 = D(r1, s1_2_2, 0x0DEA0209, 0xFFF9F2FC, 0xF5FBEA0A, 0xEAF9F106);
	r2 = D(r2, s1_2_2, 0x11EC040E, 0x02F9F905, 0x020400FF, 0xF600FC00);
	r3 = D(r3, s1_2_2, 0x02FEFF00, 0xFBEFEBF7, 0xF3FDF703, 0xEDF7F3FB);
	r4 = D(r4, s1_2_2, 0x03E8E706, 0x0504FEFE, 0x0105FA05, 0xFBF5EDFD);
	r5 = D(r5, s1_2_2, 0x0204FE02, 0xE3FAF5F9, 0xF60600F5, 0x03F8F705);
	r6 = D(r6, s1_2_2, 0xFDFBF203, 0x02F9F602, 0xFFF5F311, 0x02FBEDF8);
	r7 = D(r7, s1_2_2, 0xF400F7FC, 0xFCF3EFEF, 0x000104FF, 0xFC08F502);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFFFE00FD, 0xFB05F902, 0x05FF1907, 0xF70100F9);
	r1 = D(r1, s0_0_0, 0xFF02F9FC, 0xFEFD1507, 0x02FFED06, 0xFCFBD9FF);
	r2 = D(r2, s0_0_0, 0xDE161EEC, 0x08070500, 0xF4FE15FA, 0x02FBFEFE);
	r3 = D(r3, s0_0_0, 0xFC02F8FA, 0x050302FE, 0xFCFDF0FE, 0x0BFB1800);
	r4 = D(r4, s0_0_0, 0xFBFDFC00, 0x070203FD, 0xFFF9FDFE, 0x0204FD00);
	r5 = D(r5, s0_0_0, 0xFE0EF6F3, 0x0A041C00, 0xFF0200FC, 0xFE060AFD);
	r6 = D(r6, s0_0_0, 0x030407FE, 0x0809FC06, 0xFBF20107, 0x0BFDFE08);
	r7 = D(r7, s0_0_0, 0xE7030C01, 0xFE0708F2, 0x040307FB, 0x00040FF9);
	r0 = D(r0, s0_0_1, 0x0210F711, 0xFF01F9F5, 0xF1F4210D, 0x060502FA);
	r1 = D(r1, s0_0_1, 0xFF010402, 0xF216FEE4, 0x0109D4F9, 0x050F0103);
	r2 = D(r2, s0_0_1, 0xF5CC2281, 0x000405FC, 0x011416FB, 0xFEF4FB04);
	r3 = D(r3, s0_0_1, 0xF603E5EB, 0x0007030B, 0xF3FC09F7, 0x00EE0F00);
	r4 = D(r4, s0_0_1, 0x000F1BF9, 0x0107F5F4, 0xFBE50006, 0xFB0FFF07);
	r5 = D(r5, s0_0_1, 0xF3ADCDC3, 0x080218FD, 0xF8FAFBF4, 0xFC0910E2);
	r6 = D(r6, s0_0_1, 0x050503FF, 0x030EF50C, 0xEF2234EB, 0x0801F507);
	r7 = D(r7, s0_0_1, 0xE508D902, 0xFA06FFFE, 0x061605FD, 0xFF1AAFE0);
	r0 = D(r0, s0_0_2, 0x050AF404, 0xFF020C09, 0xFDFDF712, 0x020BC3FF);
	r1 = D(r1, s0_0_2, 0x0004F2FF, 0xFF0A1309, 0x0400EC01, 0xFB17E201);
	r2 = D(r2, s0_0_2, 0xF026E409, 0xFF0106FF, 0x02FF0CF2, 0x02070607);
	r3 = D(r3, s0_0_2, 0x00010C08, 0x02080401, 0xFB0BF2F4, 0x06FD0E06);
	r4 = D(r4, s0_0_2, 0x0308E4FD, 0x0302FF07, 0x080301F9, 0xFF0303FE);
	r5 = D(r5, s0_0_2, 0x0A100E10, 0x05131205, 0x040607F7, 0x010B00FE);
	r6 = D(r6, s0_0_2, 0x0209F301, 0x01FC01FF, 0xF70B8104, 0x010BF70F);
	r7 = D(r7, s0_0_2, 0xFAFE05F2, 0xF5000EE8, 0xF9FE0809, 0xFC022D0E);
	r0 = D(r0, s0_1_0, 0xEEFBF9E8, 0x0CFA06E8, 0xEEF839C1, 0xFDFDFF04);
	r1 = D(r1, s0_1_0, 0xFD050307, 0x06010D06, 0xFFFF1FF7, 0xF6FDEAF5);
	r2 = D(r2, s0_1_0, 0x10E8370B, 0x040804F8, 0x060D0FF9, 0x0BFE040C);
	r3 = D(r3, s0_1_0, 0xFA0DFCF8, 0x04FD1A08, 0xFC0806FE, 0xF2F7220D);
	r4 = D(r4, s0_1_0, 0xF7FAFB00, 0xE30A01FE, 0xFFF6FB0F, 0xFB0212FF);
	r5 = D(r5, s0_1_0, 0xF204FDE5, 0xF209160B, 0xFE0306F8, 0x010E0A01);
	r6 = D(r6, s0_1_0, 0xF40308F4, 0xF8020200, 0xDB020C04, 0xFE050EF6);
	r7 = D(r7, s0_1_0, 0x060203F0, 0xE3F0FB17, 0x050A05EC, 0x030E13FB);
	r0 = D(r0, s0_1_1, 0xFF20F7FC, 0x05090110, 0x09B929F7, 0x1C0F06DA);
	r1 = D(r1, s0_1_1, 0x11E91581, 0x0BE8D6D0, 0xF3A1F4E8, 0x0EFC0100);
	r2 = D(r2, s0_1_1, 0xED130720, 0x24F4FEFB, 0x19080C18, 0x0D00FEE9);
	r3 = D(r3, s0_1_1, 0x0EF0FBFD, 0x00FF1DF0, 0x1D060BBB, 0x17FE22F9);
	r4 = D(r4, s0_1_1, 0x13120AF4, 0x08170B08, 0xE40FFBED, 0x16F9100B);
	r5 = D(r5, s0_1_1, 0x030D091B, 0x1C1617FB, 0x2108FCFD, 0x0BF702F8);
	r6 = D(r6, s0_1_1, 0x12FF0704, 0x11F4F1E2, 0x1F0C14CF, 0xE3F3FEC4);
	r7 = D(r7, s0_1_1, 0x20E400DC, 0x04060522, 0x14CA011A, 0xFAC5D7CD);
	r0 = D(r0, s0_1_2, 0x0AEBF00A, 0x07000BFE, 0x0E1F361B, 0xF505F101);
	r1 = D(r1, s0_1_2, 0xF80C0400, 0x0E0C1810, 0x02FF0706, 0x0304F919);
	r2 = D(r2, s0_1_2, 0x080A31CF, 0xF7030501, 0xFA0014E4, 0x0C0F080F);
	r3 = D(r3, s0_1_2, 0x020B0206, 0x11050E19, 0x01FF0311, 0x06F00A01);
	r4 = D(r4, s0_1_2, 0xF1F60406, 0x030204F6, 0xFFE2FC02, 0x0405020F);
	r5 = D(r5, s0_1_2, 0xFA01F500, 0x0B0B0C0C, 0x0D070401, 0x02070904);
	r6 = D(r6, s0_1_2, 0xF3FDF505, 0x050FEE08, 0xEE148107, 0x0E01EF0A);
	r7 = D(r7, s0_1_2, 0x0703FB14, 0x0A090207, 0x041D0AF2, 0x08172000);
	r0 = D(r0, s0_2_0, 0x00FA0200, 0xF9FF0A05, 0xDFEE1807, 0x09FD0102);
	r1 = D(r1, s0_2_0, 0x05FFF4F9, 0xFD000FFB, 0xEA0DF4F8, 0xF905EBEC);
	r2 = D(r2, s0_2_0, 0xE9F910F0, 0xFC070601, 0xFC0602F3, 0x02FE01FC);
	r3 = D(r3, s0_2_0, 0xFEFFF8FD, 0xF905FDFD, 0x02FFF000, 0x03F619FC);
	r4 = D(r4, s0_2_0, 0xF301FEFB, 0x0B00FCFF, 0x06F5FB04, 0xF70202F4);
	r5 = D(r5, s0_2_0, 0x0200FB05, 0x07FB15FA, 0x0201FF07, 0xFF010700);
	r6 = D(r6, s0_2_0, 0xFD010304, 0x04FC04FA, 0xFAF4FAFC, 0xFA03FF03);
	r7 = D(r7, s0_2_0, 0xFC020507, 0xDB231FF5, 0xFB0109FE, 0xF7040A02);
	r0 = D(r0, s0_2_1, 0x1500FEE9, 0xF9FCFD01, 0xFC210F02, 0x0C140705);
	r1 = D(r1, s0_2_1, 0xF50FF90B, 0xDF03FDFC, 0xFC14F00B, 0xF5F209E0);
	r2 = D(r2, s0_2_1, 0xE6FF1013, 0x0700040A, 0xED0C140E, 0xEEFC0209);
	r3 = D(r3, s0_2_1, 0xFB080509, 0xFC1103B0, 0xEFFC000E, 0xF9FA221A);
	r4 = D(r4, s0_2_1, 0x180007F8, 0x0AFFFBFF, 0xFFF607F0, 0xF208F9F9);
	r5 = D(r5, s0_2_1, 0xFE000301, 0xF4082406, 0xFB00FFFF, 0x040E0706);
	r6 = D(r6, s0_2_1, 0x100400FC, 0x01020406, 0xFA2131E6, 0x020A0FFA);
	r7 = D(r7, s0_2_1, 0xF809050A, 0xFFC20881, 0x0605FD0F, 0xF916E2F5);
	r0 = D(r0, s0_2_2, 0xFFFA02FB, 0x03010000, 0xEF07E611, 0xFAFD02FB);
	r1 = D(r1, s0_2_2, 0x0B02F60D, 0x0B0C1901, 0x0202F9FA, 0x0B11FE08);
	r2 = D(r2, s0_2_2, 0xF904FB10, 0x0A030703, 0xFC00FBFA, 0x030305FF);
	r3 = D(r3, s0_2_2, 0x0401FFFF, 0xEF09F6FE, 0x0C0C03FE, 0x04EF1108);
	r4 = D(r4, s0_2_2, 0xF40FFC03, 0x0000FF06, 0x03FE0100, 0xFC03FB05);
	r5 = D(r5, s0_2_2, 0x010102FB, 0x06031C01, 0x06FE0500, 0xF9000300);
	r6 = D(r6, s0_2_2, 0xF706F903, 0xFDFC0304, 0xF401CE18, 0xF40506FE);
	r7 = D(r7, s0_2_2, 0x07FEFEFC, 0x022D06FC, 0x05FD06FE, 0x0BFC1800);
	r0 = D(r0, s1_0_0, 0x0006040C, 0x0302FEFD, 0xF2F50A06, 0x030DFF0A);
	r1 = D(r1, s1_0_0, 0x06F4FDF9, 0xF0FC020B, 0xF905FC08, 0xFD02FCF6);
	r2 = D(r2, s1_0_0, 0xEE81170F, 0xFF000400, 0x010F090D, 0xFFF800FA);
	r3 = D(r3, s1_0_0, 0x00F30201, 0xFF04FCF6, 0x05F6FD00, 0xFE050007);
	r4 = D(r4, s1_0_0, 0xF9FCFC02, 0xEDEDFD00, 0x05FDFF05, 0xFDFEFCF7);
	r5 = D(r5, s1_0_0, 0xF3E6000E, 0x03030109, 0x01F70208, 0xF602FF03);
	r6 = D(r6, s1_0_0, 0x0103FEFE, 0x020703F4, 0xF2260406, 0xFC0800FA);
	r7 = D(r7, s1_0_0, 0x070C06F8, 0xFFFFFA05, 0xFD03FDF8, 0xF9F8FC06);
	r0 = D(r0, s1_0_1, 0xF7F8010C, 0x11FD05EF, 0x10C614F4, 0x081502EF);
	r1 = D(r1, s1_0_1, 0xF5FE01FB, 0x140B0CE0, 0xFBF7FD04, 0xEEFF0207);
	r2 = D(r2, s1_0_1, 0xFFA9BBC1, 0x0B05FFF9, 0x01F9EFDC, 0x07FA06F9);
	r3 = D(r3, s1_0_1, 0x050909F1, 0x04F5F6E9, 0x070D0DEF, 0x010F02F5);
	r4 = D(r4, s1_0_1, 0xFBE6FE02, 0x08F802FD, 0x15FEFD03, 0x0317F8FD);
	r5 = D(r5, s1_0_1, 0x2916FBDC, 0x091308E7, 0x0FF7FEFC, 0x091109EE);
	r6 = D(r6, s1_0_1, 0xF1EE07FF, 0xEDF70200, 0xFFEF11EB, 0x00F1F8E4);
	r7 = D(r7, s1_0_1, 0x07F612FF, 0x06FDFC11, 0xE8FDFBFD, 0x040D0BEA);
	r0 = D(r0, s1_0_2, 0x0205FBF7, 0x00FCFC00, 0xFEFB0DF9, 0xF503FD00);
	r1 = D(r1, s1_0_2, 0xFEFB0308, 0xFA080506, 0xF20C0603, 0x071109F7);
	r2 = D(r2, s1_0_2, 0x0F1181DC, 0xFEFAF600, 0x01020103, 0x010108FD);
	r3 = D(r3, s1_0_2, 0xFF00FB01, 0xFE07F504, 0xF8EF02FA, 0x0DF905FD);
	r4 = D(r4, s1_0_2, 0xFFFE06F9, 0x07FFF6F8, 0xF9FCF9FE, 0x04FAFA03);
	r5 = D(r5, s1_0_2, 0xF3F5EFFF, 0x000A0AFE, 0xFDFAF5FB, 0xFA04FB04);
	r6 = D(r6, s1_0_2, 0xFCFF0803, 0xFB090604, 0xF818FBFF, 0xF1180006);
	r7 = D(r7, s1_0_2, 0xF1FF0B00, 0x0D00FB06, 0x08010203, 0xFC010308);
	r0 = D(r0, s1_1_0, 0x120308F8, 0xD6EE0504, 0xFF0F19EA, 0x000C0205);
	r1 = D(r1, s1_1_0, 0xFB03FB0E, 0xEFF203FE, 0x02F00BF6, 0x0C1102F4);
	r2 = D(r2, s1_1_0, 0x03101401, 0x04010006, 0xE3F7FF08, 0xF5FBFEFD);
	r3 = D(r3, s1_1_0, 0xFE0A0107, 0x07F40AFA, 0x07050101, 0x06FA110A);
	r4 = D(r4, s1_1_0, 0x0500FF06, 0x0B050208, 0xEEF2F9EB, 0x120C09FE);
	r5 = D(r5, s1_1_0, 0x0B120208, 0xFDFE0B02, 0xFC020101, 0x070FFE01);
	r6 = D(r6, s1_1_0, 0x0D0A04FC, 0x04F60707, 0x14050103, 0xF6F5FF07);
	r7 = D(r7, s1_1_0, 0xF1EF0109, 0xF9010E11, 0x190FFD0F, 0x0B0EFC00);
	r0 = D(r0, s1_1_1, 0xDFEBF603, 0x0903F603, 0xDEDAC505, 0x13FBFDE1);
	r1 = D(r1, s1_1_1, 0x0CEF0CF4, 0x291B01F4, 0x070711F0, 0xF4F5090B);
	r2 = D(r2, s1_1_1, 0xF1E2020C, 0xF4FFFBFE, 0x3014D4E2, 0x0105F9FF);
	r3 = D(r3, s1_1_1, 0x0C09EDFA, 0x230102EA, 0xF9D703F7, 0x1F0A06E7);
	r4 = D(r4, s1_1_1, 0x00F515FA, 0x0CF7F0F4, 0xD412F10F, 0x0AD901C8);
	r5 = D(r5, s1_1_1, 0xF4F0FE12, 0x23F50CF4, 0xE6ED00FC, 0x280BEEEF);
	r6 = D(r6, s1_1_1, 0x08F708F5, 0x2EF3EDF3, 0xF9FDF9EA, 0x17090E00);
	r7 = D(r7, s1_1_1, 0xF9E4FAFA, 0xE20CF5B6, 0x30E806E8, 0x1919F3DF);
	r0 = D(r0, s1_1_2, 0x09F2FCFF, 0xF6F5F201, 0x02E5DCB6, 0x0DFCF8F7);
	r1 = D(r1, s1_1_2, 0x07F0EDE9, 0xE40AD209, 0xFFE502FA, 0x09F4C9EE);
	r2 = D(r2, s1_1_2, 0xF08109FB, 0x12FF06FD, 0xFD20F3F9, 0xF9FAF8FB);
	r3 = D(r3, s1_1_2, 0xFCFCD6FA, 0xF804FBE9, 0x1107B4ED, 0xFA1B0DFA);
	r4 = D(r4, s1_1_2, 0x10FBE6F7, 0xFE01FBFD, 0x2BFC03F9, 0xFB15FEFF);
	r5 = D(r5, s1_1_2, 0x010BEFFF, 0x0010FFEC, 0x02F8FBFB, 0xF8FEDCFC);
	r6 = D(r6, s1_1_2, 0x13FDF2FC, 0x13FDEDE9, 0x0C1381EF, 0x1CD5CADA);
	r7 = D(r7, s1_1_2, 0x01FCE2FD, 0xEA0B0902, 0xD1020209, 0xF703D006);
	r0 = D(r0, s1_2_0, 0xFCF709FA, 0x04070302, 0x04F90E14, 0xFCFB05FC);
	r1 = D(r1, s1_2_0, 0x02FC01FE, 0xFB05FFFC, 0x06E90004, 0x0A0005F7);
	r2 = D(r2, s1_2_0, 0x05F6000C, 0x050202FF, 0xF5FF000E, 0x01FE01FC);
	r3 = D(r3, s1_2_0, 0x00FD02FF, 0xF206FD0D, 0xFAFFFEFC, 0xF8FF05FF);
	r4 = D(r4, s1_2_0, 0x0B040201, 0xFB010305, 0x1000FB01, 0xE1F5020F);
	r5 = D(r5, s1_2_0, 0xFEFA03FD, 0xFBFC0601, 0xFD0101FE, 0x02050000);
	r6 = D(r6, s1_2_0, 0x040002FE, 0xFE03FF00, 0xFAFEFFF5, 0x040AFEFD);
	r7 = D(r7, s1_2_0, 0xFF05FCFC, 0xFE0406E4, 0xEBFA0201, 0x0208FC0B);
	r0 = D(r0, s1_2_1, 0xE7FDF8FF, 0x070202FE, 0x07E403FB, 0x07030102);
	r1 = D(r1, s1_2_1, 0x1005FC0C, 0x06080703, 0x1BEBE8F7, 0xE6F10712);
	r2 = D(r2, s1_2_1, 0xFC040603, 0xFE090402, 0x1011FF01, 0x0D0006FF);
	r3 = D(r3, s1_2_1, 0x04F8FD0A, 0xE2E3FD0D, 0x13120004, 0x20000CFC);
	r4 = D(r4, s1_2_1, 0xE2F40C00, 0xFB010406, 0xF6FAFBFA, 0x060DF709);
	r5 = D(r5, s1_2_1, 0x0709FF05, 0x160A0D01, 0x0A060402, 0xFC00FFFB);
	r6 = D(r6, s1_2_1, 0xEBF6FFFE, 0xFAE4FDFE, 0xECF0F60E, 0xE8EB0606);
	r7 = D(r7, s1_2_1, 0x17FB05FB, 0x24CCF0D9, 0x11040001, 0x0C1CFBEE);
	r0 = D(r0, s1_2_2, 0x0801FD08, 0x010C02FD, 0xFBF1EB15, 0x061DFCF6);
	r1 = D(r1, s1_2_2, 0xFDEDF606, 0xF7F8E9FC, 0xFEE8EBFE, 0x02E6FDFC);
	r2 = D(r2, s1_2_2, 0x10FAFB0B, 0x02FFFA04, 0xF90BFBF9, 0xFEF005FC);
	r3 = D(r3, s1_2_2, 0x02080200, 0x0F0FBE00, 0x05DB0602, 0x0AF8F7F2);
	r4 = D(r4, s1_2_2, 0x06F0F305, 0xFD0B0208, 0x0C01F008, 0x06E5E3FE);
	r5 = D(r5, s1_2_2, 0xF901FB03, 0x0CFB06F9, 0x02F40902, 0xFF1402F8);
	r6 = D(r6, s1_2_2, 0x00F0FE08, 0x03050004, 0x111C12E4, 0x0517FF03);
	r7 = D(r7, s1_2_2, 0x02F709FE, 0x04F9D200, 0xF7F701F6, 0xF9F8D605);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x03000503, 0xF50200F4, 0xC4160AFA, 0xFB0AF3F5);
	r1 = D(r1, s0_0_0, 0x03FF1103, 0xFEE215FD, 0xFF03FEF5, 0x040305FE);
	r2 = D(r2, s0_0_0, 0xCD27DEDF, 0x000607FF, 0x02FB0CFF, 0xFDFC02FD);
	r3 = D(r3, s0_0_0, 0x00FA10F4, 0xFE001404, 0x00001CF6, 0xF60203F8);
	r4 = D(r4, s0_0_0, 0xFC09FB0C, 0xFEFA0A16, 0xF7FA02F4, 0xFD030C04);
	r5 = D(r5, s0_0_0, 0xF9EF28EE, 0xF7FCFAF8, 0x00F90D0D, 0xF8FB09F4);
	r6 = D(r6, s0_0_0, 0x0005F808, 0xF90D01FC, 0xFD13BA02, 0xF9FC0607);
	r7 = D(r7, s0_0_0, 0x0000EFF8, 0x10080610, 0x090BF70C, 0xFAF604FC);
	r0 = D(r0, s0_0_1, 0x00F503F8, 0x05F9F60A, 0xE8FC11F3, 0x03F8F705);
	r1 = D(r1, s0_0_1, 0xFF0703FA, 0x0F1B0A01, 0xF9040EF7, 0xF5F809FE);
	r2 = D(r2, s0_0_1, 0xE9C41131, 0x0800F807, 0x0E0113FB, 0xFF01FF08);
	r3 = D(r3, s0_0_1, 0x02FFF808, 0xFF050BFF, 0x0503F9FE, 0xFD0CFEF8);
	r4 = D(r4, s0_0_1, 0x05F30FFF, 0x06F0F20A, 0xFF01E90C, 0x0BF9F6FE);
	r5 = D(r5, s0_0_1, 0x0AEFFA11, 0xFB020FF8, 0xFF00F70E, 0x0704F106);
	r6 = D(r6, s0_0_1, 0xFCF90DF9, 0xF3F411F4, 0x13D60E00, 0xEA181DF7);
	r7 = D(r7, s0_0_1, 0xFCECF4FC, 0x00F6F402, 0x06FE15EC, 0x0112F5FC);
	r0 = D(r0, s0_0_2, 0xFC0B0202, 0xFDF000FE, 0xCE0CF609, 0x0A050000);
	r1 = D(r1, s0_0_2, 0xF9FF0A03, 0x0BF6FAFF, 0xF7050F06, 0x04FDFDF9);
	r2 = D(r2, s0_0_2, 0xC0D7EFF5, 0x03000201, 0xFF07FE00, 0x00FCFF00);
	r3 = D(r3, s0_0_2, 0xFFF8FF00, 0x10FEF9FC, 0x08FF0B06, 0xFCFFF7FD);
	r4 = D(r4, s0_0_2, 0xF60807FB, 0xF7FCF4FF, 0x030500FB, 0x090501FE);
	r5 = D(r5, s0_0_2, 0xFCF00906, 0x01FFFCF9, 0xFCFAFBFD, 0x04FD0103);
	r6 = D(r6, s0_0_2, 0xF7010303, 0xF8020003, 0x0B070102, 0xFFFAFCFE);
	r7 = D(r7, s0_0_2, 0x04FD0601, 0x18FCFAF3, 0xFDFAFC03, 0x04EEFD01);
	r0 = D(r0, s0_1_0, 0x070005DA, 0x04FCFE14, 0x0DEC0A0F, 0x0104FAF3);
	r1 = D(r1, s0_1_0, 0xFB0710FA, 0xFFF1F10F, 0x02F10008, 0xFC0CFDF7);
	r2 = D(r2, s0_1_0, 0x0C0C21E8, 0xF90401F5, 0xFCFCF408, 0x03FEFA10);
	r3 = D(r3, s0_1_0, 0xFDF1F806, 0x0300120A, 0x050104FE, 0x01022904);
	r4 = D(r4, s0_1_0, 0xFC0502FB, 0x000413FD, 0x0AFAE316, 0xFD060D02);
	r5 = D(r5, s0_1_0, 0xFEFE0C04, 0xFFFF190C, 0xFB00F900, 0xF303E2FE);
	r6 = D(r6, s0_1_0, 0xF607F7F7, 0xFE00180B, 0x021322E2, 0xFF011101);
	r7 = D(r7, s0_1_0, 0x0705F108, 0xF507F8E0, 0xF90A17E7, 0xEFF5DA0A);
	r0 = D(r0, s0_1_1, 0x02DDFDF4, 0xF7F80802, 0xF29CDB03, 0xFAF20B04);
	r1 = D(r1, s0_1_1, 0xFEF81007, 0x0616D209, 0x0AF7F0FE, 0xF9FBF71B);
	r2 = D(r2, s0_1_1, 0xF2BA0FF0, 0x04001106, 0x1D02DB00, 0x0002F715);
	r3 = D(r3, s0_1_1, 0xFCFA19FB, 0xF210F102, 0xEF0515FE, 0x0EFEFF05);
	r4 = D(r4, s0_1_1, 0xFF030702, 0x0CEFF209, 0xFBF91B03, 0x01FC1705);
	r5 = D(r5, s0_1_1, 0xF4F125F1, 0x0BFFFF00, 0xF5FDFC05, 0x02090302);
	r6 = D(r6, s0_1_1, 0x0000F200, 0x12E7DA0D, 0x1EDE131A, 0xFBFE1D13);
	r7 = D(r7, s0_1_1, 0xEFF6FCF2, 0xFAFC2B0E, 0x010CDBEE, 0x0C10DAFF);
	r0 = D(r0, s0_1_2, 0x0906F700, 0x04FC030F, 0x0781E73D, 0xFF0AF3F8);
	r1 = D(r1, s0_1_2, 0x08010006, 0x16FD1A01, 0x03EEF8FE, 0x0109ED02);
	r2 = D(r2, s0_1_2, 0x05C3C034, 0xF500FAFA, 0xFC020803, 0x06FCFF08);
	r3 = D(r3, s0_1_2, 0x02F60004, 0x0AF70403, 0xEFF70C00, 0xF8FF0505);
	r4 = D(r4, s0_1_2, 0xFC08EFFD, 0xFFFE0309, 0xFA0BF4E9, 0x0601FE04);
	r5 = D(r5, s0_1_2, 0xF2F60803, 0x0000FF0A, 0xFAF60507, 0x04FF02F8);
	r6 = D(r6, s0_1_2, 0xFE04F4FE, 0x01F7F805, 0xEE05DCF5, 0x0CDAF610);
	r7 = D(r7, s0_1_2, 0xE9EE08F4, 0xE105FD08, 0x01F80E15, 0x10FE0CFB);
	r0 = D(r0, s0_2_0, 0x00030603, 0x040302FC, 0xDC11F909, 0xFEFDFC00);
	r1 = D(r1, s0_2_0, 0x010014FE, 0xFFF2F507, 0x080510FF, 0xFF000E02);
	r2 = D(r2, s0_2_0, 0xFE0FF811, 0xFB0301FC, 0xFEFCEC06, 0x00FF0001);
	r3 = D(r3, s0_2_0, 0xFEFC06FE, 0xFE01F405, 0xFDFAFFFE, 0xFFF8F10A);
	r4 = D(r4, s0_2_0, 0xFA030CF4, 0xF602FBFD, 0xFEFE01FE, 0xFDF8FB0B);
	r5 = D(r5, s0_2_0, 0x0000F901, 0xFDF8F105, 0x0203FFFC, 0xFAFB0601);
	r6 = D(r6, s0_2_0, 0xFB0503F6, 0xFBFAFA04, 0x03090903, 0xFC070007);
	r7 = D(r7, s0_2_0, 0x090308FB, 0x250C1406, 0x0703FBFF, 0xFBDCEE0A);
	r0 = D(r0, s0_2_1, 0x03FDF00E, 0xFBFDFE0D, 0xEDC6EBF5, 0x08F8D80B);
	r1 = D(r1, s0_2_1, 0xFD03040C, 0x050F10F9, 0x13EAD80C, 0xF0F8FD08);
	r2 = D(r2, s0_2_1, 0xFB1601F3, 0x0302FF04, 0x02FB08FF, 0xFFFF0305);
	r3 = D(r3, s0_2_1, 0x03F2030A, 0xFCE80F0D, 0xFFFD2106, 0xF9F40FFC);
	r4 = D(r4, s0_2_1, 0x0000EB16, 0xFA0109FC, 0x02F9E6EA, 0xF3E72204);
	r5 = D(r5, s0_2_1, 0x02F90406, 0xFBF11404, 0x01FA0A06, 0x050605FD);
	r6 = D(r6, s0_2_1, 0x0009F201, 0xF5F9F8F9, 0x10D0DA17, 0xF4EAF1FF);
	r7 = D(r7, s0_2_1, 0x05F4030B, 0x01F1E997, 0xFF051A0F, 0x0A0AFAFD);
	r0 = D(r0, s0_2_2, 0x0A0303F2, 0xFDFE07F6, 0xC7100DDD, 0xF10601F3);
	r1 = D(r1, s0_2_2, 0xF4F91BEF, 0x0DF3F2F7, 0x0DF1F409, 0x0E03EE03);
	r2 = D(r2, s0_2_2, 0xF42016E2, 0x01FE06FD, 0xFD0402F7, 0xFEFFF507);
	r3 = D(r3, s0_2_2, 0xFCFB0900, 0xEDDC0F0C, 0x00ED0506, 0x01FF090A);
	r4 = D(r4, s0_2_2, 0xFC03FAF0, 0xFC030CF7, 0x0B0706FE, 0xF4EFF008);
	r5 = D(r5, s0_2_2, 0xFFFF00FD, 0x00FC030B, 0x02FBFA0C, 0xFBFCF9FA);
	r6 = D(r6, s0_2_2, 0xFE0102F3, 0xFAF510FD, 0xEE07E9EE, 0xF2FB15F5);
	r7 = D(r7, s0_2_2, 0x03F8E811, 0x19E8EFF5, 0xF2F9F400, 0x11FA08FA);
	r0 = D(r0, s1_0_0, 0xF809FE01, 0x090206E3, 0xF71FF50D, 0x0001FEFA);
	r1 = D(r1, s1_0_0, 0xF9F80002, 0xFFFEF7FB, 0xFCFEFEFA, 0x0001FBFD);
	r2 = D(r2, s1_0_0, 0xFE1FDA0E, 0x01FBFFF7, 0xF202ED0D, 0x00FEFEFC);
	r3 = D(r3, s1_0_0, 0x03FD04F8, 0x000006FC, 0xFDFC04F8, 0x00FDFEF8);
	r4 = D(r4, s1_0_0, 0x0C020100, 0x04060C0A, 0x010202F4, 0x02FD09FE);
	r5 = D(r5, s1_0_0, 0x0907FBEA, 0x02FB00F7, 0x000106FF, 0x01FCFB00);
	r6 = D(r6, s1_0_0, 0x040006FE, 0xF7FAF8FD, 0x07090509, 0xFB0804FF);
	r7 = D(r7, s1_0_0, 0xFAF710FD, 0x060401F5, 0xFE00FC07, 0x0000FDFD);
	r0 = D(r0, s1_0_1, 0x0707EEF4, 0xFBEC0615, 0x1BF51DED, 0x00EF0508);
	r1 = D(r1, s1_0_1, 0x0202FDFA, 0xF602F101, 0x030AF9FE, 0xFD0AFDF9);
	r2 = D(r2, s1_0_1, 0x1E06DEF4, 0xFDFD020A, 0xF30E09FD, 0x01FBFF01);
	r3 = D(r3, s1_0_1, 0xFBF90801, 0x01F301FE, 0xFFFE0B09, 0x0204FAFB);
	r4 = D(r4, s1_0_1, 0xFF0BFFEF, 0x08F81401, 0xF5FB0105, 0x01FE02FF);
	r5 = D(r5, s1_0_1, 0xF2E80F12, 0x0302FAF6, 0xFDF5090E, 0xFBFD0701);
	r6 = D(r6, s1_0_1, 0x0008FCFD, 0x0E04FCEE, 0xE112FC19, 0xFEFDF8F1);
	r7 = D(r7, s1_0_1, 0x01FA0D03, 0xFAED060C, 0x0F05FEF7, 0xF70B000A);
	r0 = D(r0, s1_0_2, 0xFCFDFC09, 0x020101FB, 0x021B1414, 0x03FB00FC);
	r1 = D(r1, s1_0_2, 0xF803030B, 0xFC110702, 0xF6FFF807, 0xF7FEFA01);
	r2 = D(r2, s1_0_2, 0x262D0113, 0x00FD07FC, 0x06FC0B03, 0xFEF9FCFE);
	r3 = D(r3, s1_0_2, 0x01050000, 0x050106F6, 0xF8FF0402, 0x0100FF02);
	r4 = D(r4, s1_0_2, 0xFAFEFF07, 0x04020D06, 0xFA040DFB, 0xFFFC07F9);
	r5 = D(r5, s1_0_2, 0x02060400, 0x00FD0102, 0x00FD0B05, 0xFF0404FE);
	r6 = D(r6, s1_0_2, 0xF7FCFF06, 0xFEFD02FF, 0x0A100AE4, 0x03FC08FE);
	r7 = D(r7, s1_0_2, 0xF7FE0301, 0xF80800F2, 0x0600F606, 0x000603F3);
	r0 = D(r0, s1_1_0, 0xF2FF02F1, 0x01FBEF15, 0x2AF80A04, 0x01FFFDF4);
	r1 = D(r1, s1_1_0, 0xF603FEF8, 0x030700FF, 0xEF050B15, 0xF9FDFEFC);
	r2 = D(r2, s1_1_0, 0x2FF201E3, 0xF7FCFDF9, 0x0002F900, 0x04F8FC08);
	r3 = D(r3, s1_1_0, 0xFD0200F7, 0x0100FF0C, 0xF7010C00, 0xFD0D0916);
	r4 = D(r4, s1_1_0, 0xFDF9F40E, 0x0606F3EA, 0x02F7F808, 0xFC0BF907);
	r5 = D(r5, s1_1_0, 0x02FE03F6, 0x0007FA10, 0xFC06FF01, 0xFC04FBEE);
	r6 = D(r6, s1_1_0, 0xFB04F5F7, 0x06070010, 0x0103E4F2, 0x080700F9);
	r7 = D(r7, s1_1_0, 0xFC17EB09, 0xF0F50CFA, 0xFB0100FE, 0xF807F3E8);
	r0 = D(r0, s1_1_1, 0xE904000A, 0x0401FDF8, 0x0D12DE24, 0xFAEFE600);
	r1 = D(r1, s1_1_1, 0x03020215, 0xE4FCCD06, 0xFCFC0D20, 0xEF0CFB25);
	r2 = D(r2, s1_1_1, 0x20EFEB05, 0xF900FA0C, 0xF0FCDBF0, 0x04FBEBFE);
	r3 = D(r3, s1_1_1, 0x110EE2FD, 0xE101E7F2, 0x1111D6F0, 0xEC0309F5);
	r4 = D(r4, s1_1_1, 0xD4FDE100, 0xFE04E8FA, 0x2307FF37, 0xC4F4FDFC);
	r5 = D(r5, s1_1_1, 0x0C04ED01, 0xF209D5EC, 0x110DECF5, 0x01EDEF0C);
	r6 = D(r6, s1_1_1, 0xE9FCF221, 0x05F7E925, 0xD8038113, 0x0DFEF51F);
	r7 = D(r7, s1_1_1, 0x1F1FCA0C, 0x1B0EF001, 0xCBF9FDD2, 0xF100FB1B);
	r0 = D(r0, s1_1_2, 0xFB06100E, 0xFCFDFB02, 0x09100108, 0x0BF81100);
	r1 = D(r1, s1_1_2, 0xF7E903FF, 0xE400EFFD, 0xF5FB0807, 0xF70AECEE);
	r2 = D(r2, s1_1_2, 0x41F5F5EB, 0x03FD0B03, 0x07000F07, 0xF9F9EBFA);
	r3 = D(r3, s1_1_2, 0xFE000801, 0xE0000513, 0x06030308, 0xF8050106);
	r4 = D(r4, s1_1_2, 0x0209010B, 0xFD04FDFB, 0x010A1404, 0xFA03030D);
	r5 = D(r5, s1_1_2, 0x03080C04, 0xF409FA09, 0x020B0505, 0x02FE0BFC);
	r6 = D(r6, s1_1_2, 0x0107090E, 0x0101010E, 0x0C0A06EE, 0xFC0AFD12);
	r7 = D(r7, s1_1_2, 0xFF150410, 0x1402F7E5, 0xF1F7E109, 0x0206FFF2);
	r0 = D(r0, s1_2_0, 0x0301FF18, 0xFBF806F4, 0x010801E0, 0x0306FD02);
	r1 = D(r1, s1_2_0, 0xFEFF0002, 0xF9FAFFF4, 0x0603EFD7, 0x0006FDFB);
	r2 = D(r2, s1_2_0, 0xED03020E, 0x06FD0302, 0xFBFF01FF, 0xFDFDFE01);
	r3 = D(r3, s1_2_0, 0xFEFE01FB, 0x0203FFF8, 0xFB030404, 0xFA0206ED);
	r4 = D(r4, s1_2_0, 0x0301FEEB, 0xFCFFF90F, 0xFB01FCF2, 0x060003FB);
	r5 = D(r5, s1_2_0, 0x01FF05FC, 0xFB0601F1, 0x020302FE, 0x0AFE03FE);
	r6 = D(r6, s1_2_0, 0xFF050008, 0xFEFFFF02, 0x0FFFFEED, 0x03FFFCF9);
	r7 = D(r7, s1_2_0, 0x04FA0AF1, 0x02FB11F1, 0xF9FE0211, 0x0406FAF7);
	r0 = D(r0, s1_2_1, 0x0105F610, 0x0901FD10, 0x130214EF, 0xFFEDFC02);
	r1 = D(r1, s1_2_1, 0x0CF913EF, 0x0603F305, 0x12FCF1EA, 0xFAF30206);
	r2 = D(r2, s1_2_1, 0xF6131DF9, 0x09FA05FD, 0x03FFF406, 0x00F8FDF5);
	r3 = D(r3, s1_2_1, 0x03FE010A, 0x15060322, 0x020006F9, 0x0AFCF31B);
	r4 = D(r4, s1_2_1, 0x0BFCF628, 0x0204000F, 0xDE05FEF2, 0x130AF920);
	r5 = D(r5, s1_2_1, 0x0900FF06, 0x05FFF418, 0x08030203, 0xF0FDF909);
	r6 = D(r6, s1_2_1, 0xFD03F919, 0xFB02FE00, 0xF20000F6, 0x0103020C);
	r7 = D(r7, s1_2_1, 0x1BF80EF0, 0x29F6F420, 0x1BFA0417, 0xF302F4FE);
	r0 = D(r0, s1_2_2, 0xE701FE13, 0xFB00FF03, 0x2021F80A, 0xF8030404);
	r1 = D(r1, s1_2_2, 0x060DF4FD, 0x08F7EEF9, 0x0506FB0B, 0x0C01EE03);
	r2 = D(r2, s1_2_2, 0xF209020F, 0xF5FD0207, 0x00FF08FC, 0x09FFF80F);
	r3 = D(r3, s1_2_2, 0x04050100, 0x0B0AFE07, 0x10FEF301, 0x040D06FB);
	r4 = D(r4, s1_2_2, 0xFA040BF7, 0xF802FDFD, 0xE701FE03, 0x0505FF06);
	r5 = D(r5, s1_2_2, 0xFE02FDFF, 0x0006FB05, 0x05FC02F5, 0x07030500);
	r6 = D(r6, s1_2_2, 0xF9FF06FA, 0x0005FC0C, 0xFB070300, 0x0603F906);
	r7 = D(r7, s1_2_2, 0x14F903FC, 0x0CF509FB, 0x14FC0200, 0x00FBFEFA);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(5.336e-03, -9.010e-03, -2.899e-02, -1.001e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.430e-02, -2.894e-02, -1.788e-02, -2.069e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-4.967e-02, -1.370e-03, -1.871e-02, -1.480e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.017e-02, 1.131e-04, -1.004e-02, 6.784e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.474e-03, -1.422e-03, -5.059e-03, 5.188e-05);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.206e-02, 3.542e-03, -3.127e-03, -6.491e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(4.197e-03, 1.633e-03, -5.080e-02, 1.334e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.424e-02, -3.575e-02, -9.472e-03, -3.186e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-DS-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
shared V4 G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv4_pt;
			V4 sr0 = V4(conv4_gather(p, 0));
			V4 sg0 = V4(conv4_gather(p, 1));
			V4 sb0 = V4(conv4_gather(p, 2));
			V4 sa0 = V4(conv4_gather(p, 3));
			G[0][ay][ax] = V4(sr0.w, sg0.w, sb0.w, sa0.w);
			G[1][ay][ax] = V4(sr0.z, sg0.z, sb0.z, sa0.z);
			G[2][ay][ax] = V4(sr0.x, sg0.x, sb0.x, sa0.x);
			G[3][ay][ax] = V4(sr0.y, sg0.y, sb0.y, sa0.y);
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv4_pt;
			V4 sr1 = V4(conv4_gather(p, 0));
			V4 sg1 = V4(conv4_gather(p, 1));
			V4 sb1 = V4(conv4_gather(p, 2));
			V4 sa1 = V4(conv4_gather(p, 3));
			G[4][ay][ax] = V4(sr1.w, sg1.w, sb1.w, sa1.w);
			G[5][ay][ax] = V4(sr1.z, sg1.z, sb1.z, sa1.z);
			G[6][ay][ax] = V4(sr1.x, sg1.x, sb1.x, sa1.x);
			G[7][ay][ax] = V4(sr1.y, sg1.y, sb1.y, sa1.y);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-3.649e-02, -1.176e-02, -8.726e-03, -8.034e-04, -3.470e-03, -1.248e-03, 8.585e-04, -1.183e-04, -2.025e-02, -2.116e-02, 1.915e-02, 1.390e-02, -5.501e-02, 1.999e-02, -1.808e-02, 6.117e-03) * s0_0_0;
	r0 += M4(2.228e-02, -1.025e-02, -1.761e-03, -1.149e-02, 1.120e-02, 1.991e-03, -2.118e-03, -1.472e-03, 2.979e-03, -8.019e-03, -1.128e-03, 7.860e-03, 4.493e-02, 1.885e-02, -3.138e-03, 3.306e-02) * s0_0_1;
	r0 += M4(-3.287e-03, 7.857e-04, -8.087e-04, -2.751e-03, 1.295e-02, 3.504e-02, -1.800e-03, 3.722e-03, 1.481e-02, 2.025e-02, 3.629e-04, -4.797e-04, -7.872e-03, -8.797e-03, -3.504e-03, -1.857e-03) * s0_0_2;
	r0 += M4(1.619e-02, 1.483e-03, -1.499e-02, -1.191e-02, 1.523e-02, -1.046e-02, -4.370e-03, -5.007e-03, 1.128e-01, 5.837e-02, -1.065e-01, -3.877e-02, -2.885e-02, 2.726e-02, -7.001e-02, 2.949e-02) * s0_1_0;
	r0 += M4(4.211e-02, 5.516e-02, 5.994e-02, 4.334e-02, -2.165e-03, 1.135e-01, 9.227e-02, 1.813e-02, 2.106e-01, 1.545e-01, -1.869e-01, -1.683e-01, 1.567e-01, -1.872e-01, 1.942e-01, -1.306e-01) * s0_1_1;
	r0 += M4(5.139e-04, 1.249e-02, -1.065e-04, 1.188e-02, 4.602e-02, -2.575e-01, -2.693e-02, 1.993e-02, 8.180e-02, 1.718e-01, -1.085e-01, -1.770e-01, -1.678e-02, 5.100e-02, -1.751e-02, -2.758e-03) * s0_1_2;
	r0 += M4(-1.993e-03, -1.155e-03, 8.602e-03, 3.426e-03, 4.811e-03, -4.729e-03, 8.771e-03, 1.091e-03, 2.731e-04, -1.346e-04, -1.598e-02, -4.108e-03, -3.589e-03, 3.228e-03, -1.068e-02, 1.642e-02) * s0_2_0;
	r0 += M4(3.789e-03, 1.773e-03, 1.605e-02, 1.757e-02, 4.359e-03, -2.586e-02, -1.854e-01, -3.072e-02, -9.651e-03, -2.360e-03, -1.770e-02, -1.691e-02, -2.048e-02, 8.414e-03, -9.474e-03, -4.971e-02) * s0_2_1;
	r0 += M4(6.304e-04, 2.326e-05, 4.759e-04, 4.672e-03, 6.715e-03, 4.333e-02, 4.790e-02, 1.651e-02, -1.486e-02, -2.021e-02, 1.801e-02, 5.868e-03, 4.128e-03, 1.048e-02, -1.847e-03, 4.968e-02) * s0_2_2;
	r0 += M4(-8.088e-02, -4.428e-02, 4.897e-02, 1.479e-02, 7.391e-03, -9.851e-03, 8.902e-03, -7.243e-03, 2.631e-02, -5.457e-04, -1.432e-03, 3.939e-03, 4.846e-02, 3.688e-03, 1.110e-02, 9.200e-04) * s1_0_0;
	r0 += M4(6.270e-02, 1.392e-01, -2.734e-02, 2.044e-02, -9.451e-02, 9.009e-02, -5.240e-03, 8.282e-03, 9.258e-02, 8.186e-02, -1.294e-02, -1.455e-02, -1.152e-02, -5.944e-02, -6.001e-03, 1.866e-02) * s1_0_1;
	r0 += M4(3.354e-04, -1.835e-03, -3.787e-03, -1.610e-02, 1.468e-02, -1.071e-02, 6.485e-03, -7.244e-03, -1.352e-03, 2.864e-02, 6.557e-03, 2.078e-04, -2.036e-04, 2.802e-02, 7.427e-05, 1.456e-02) * s1_0_2;
	r0 += M4(4.236e-02, 1.883e-02, -3.425e-02, 2.668e-02, -1.210e-02, -1.382e-02, -1.532e-02, -1.016e-02, -4.765e-03, -1.242e-03, 8.416e-03, 1.698e-04, -9.746e-03, 2.835e-02, 6.170e-02, 5.055e-03) * s1_1_0;
	r0 += M4(-8.633e-02, 5.093e-02, 7.631e-02, -2.908e-01, -1.238e-01, 1.665e-01, -2.008e-01, 2.027e-01, 1.021e-01, 2.923e-02, -2.553e-01, -9.298e-02, 8.900e-02, -1.352e-01, 4.921e-02, -2.123e-01) * s1_1_1;
	r0 += M4(6.291e-03, -1.824e-02, 6.703e-03, 8.248e-02, 1.374e-02, -3.558e-02, 1.169e-02, -1.591e-02, 2.742e-02, 8.547e-02, -5.029e-03, -1.275e-01, -1.632e-04, 2.130e-02, -1.972e-03, 3.239e-02) * s1_1_2;
	r0 += M4(-4.425e-04, 1.251e-03, 3.824e-03, 3.357e-03, 4.641e-03, -2.675e-03, 5.697e-03, -1.101e-02, 5.919e-05, 1.669e-03, -2.097e-03, -6.370e-04, -5.212e-03, 1.333e-02, -3.269e-02, 2.997e-02) * s1_2_0;
	r0 += M4(5.699e-03, 3.185e-04, 1.797e-02, 3.536e-02, -5.192e-03, 4.330e-03, -2.600e-02, 4.652e-02, -3.341e-06, -3.462e-03, 1.180e-02, 3.011e-03, 3.572e-04, -3.470e-03, 2.578e-02, -1.875e-03) * s1_2_1;
	r0 += M4(3.602e-03, 4.225e-03, 2.366e-03, -3.241e-04, 1.693e-03, -5.333e-03, 1.047e-02, -2.619e-02, 5.979e-04, 2.200e-03, -1.589e-04, 7.532e-03, -4.545e-04, 3.085e-03, -2.364e-04, 1.088e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 += M4(-3.517e-03, -1.299e-03, 2.085e-04, 8.008e-04, -3.918e-02, -1.208e-02, -6.593e-03, -3.133e-03, 1.385e-04, -1.691e-03, 1.080e-03, -8.714e-04, 3.921e-02, 3.283e-03, 2.641e-03, -8.903e-05) * s0_0_0;
	r0 += M4(-7.557e-04, -2.681e-03, -3.615e-04, -2.994e-04, 7.962e-02, 2.277e-02, 1.397e-02, 4.500e-03, 9.372e-03, -8.430e-04, 1.496e-02, -5.829e-03, 1.255e-02, 8.569e-02, 2.917e-03, 3.012e-03) * s0_0_1;
	r0 += M4(-3.258e-03, -2.376e-03, 4.838e-04, 3.805e-04, 8.476e-03, 4.895e-02, 5.409e-04, 7.971e-03, 3.529e-03, 9.594e-04, -1.034e-03, 7.357e-03, -2.788e-03, -3.235e-02, -2.804e-03, -1.167e-02) * s0_0_2;
	r0 += M4(3.494e-03, 2.498e-03, -1.288e-02, -9.859e-03, -4.956e-02, 9.145e-03, -8.067e-02, -9.334e-03, -1.318e-02, 3.361e-03, -1.032e-02, 1.902e-03, 1.125e-01, 1.833e-02, 1.138e-01, 1.328e-02) * s0_1_0;
	r0 += M4(-2.003e-04, 7.501e-03, -1.132e-02, -1.408e-02, -5.799e-02, -1.571e-01, 6.810e-02, -6.330e-02, 2.125e-01, -8.619e-02, 8.064e-02, -2.523e-02, -1.913e-01, -6.391e-03, -9.952e-02, 1.616e-01) * s0_1_1;
	r0 += M4(2.322e-03, 2.766e-03, -7.033e-03, -7.520e-03, 1.886e-02, 4.031e-02, 2.134e-02, 8.596e-02, 2.774e-02, -1.199e-01, 2.369e-02, -7.798e-02, 1.074e-03, -5.914e-02, 7.095e-03, -7.722e-02) * s0_1_2;
	r0 += M4(-1.639e-01, -8.782e-02, 1.545e-01, 8.337e-02, 3.347e-03, -4.047e-03, -2.745e-03, 2.062e-03, -6.046e-03, 1.333e-03, -1.041e-02, 3.333e-03, 4.153e-03, 4.637e-03, 3.998e-02, 1.605e-02) * s0_2_0;
	r0 += M4(-2.022e-01, -2.002e-01, 2.243e-01, 2.056e-01, -1.741e-02, 7.668e-03, -6.915e-02, -6.487e-02, 6.017e-03, -1.094e-02, 1.206e-01, -5.712e-02, -3.067e-03, -1.156e-02, -7.745e-02, -8.276e-02) * s0_2_1;
	r0 += M4(-1.068e-01, -1.686e-01, 9.404e-02, 1.736e-01, 9.110e-03, -6.882e-03, 8.473e-03, -6.685e-03, -1.445e-02, 2.635e-02, -3.848e-03, -2.956e-02, -3.187e-04, 2.139e-04, -2.493e-03, -1.491e-02) * s0_2_2;
	r0 += M4(-9.152e-03, -2.148e-03, -1.914e-03, 8.993e-04, -1.754e-02, -3.058e-03, -1.494e-02, -6.440e-03, 1.037e-02, 4.975e-03, -7.065e-04, -2.040e-03, -2.955e-03, -7.445e-03, 5.740e-03, -1.649e-03) * s1_0_0;
	r0 += M4(1.677e-02, -5.152e-02, -4.837e-03, -2.228e-03, 1.431e-03, -1.480e-01, 2.704e-02, -1.524e-02, -3.697e-02, 6.606e-03, -5.692e-03, -1.604e-02, -8.911e-02, -2.763e-03, -4.312e-02, -9.024e-03) * s1_0_1;
	r0 += M4(2.210e-03, -2.178e-02, -4.128e-03, 1.697e-02, -1.803e-03, 2.413e-02, -3.268e-03, 1.522e-03, -1.185e-02, -2.317e-02, 2.368e-03, -6.927e-03, -8.339e-03, -6.899e-02, 4.120e-03, -1.631e-02) * s1_0_2;
	r0 += M4(7.254e-03, -4.416e-03, -3.315e-02, -6.537e-03, 5.665e-03, -3.678e-03, 3.778e-02, 2.891e-03, -3.305e-02, 2.308e-02, -4.126e-02, -2.500e-02, -3.398e-02, -1.856e-03, -3.195e-02, -8.137e-03) * s1_1_0;
	r0 += M4(-3.114e-01, 1.657e-01, 1.819e-01, 2.643e-02, 2.202e-03, -4.114e-02, -2.845e-02, 2.339e-01, 9.451e-02, -2.959e-01, 1.511e-02, 1.853e-01, -1.714e-03, -1.018e-01, -5.094e-03, -3.943e-02) * s1_1_1;
	r0 += M4(-6.256e-03, 9.741e-02, -1.606e-03, -1.549e-01, -1.975e-03, -1.199e-02, 3.046e-03, 2.125e-03, -4.295e-03, 4.949e-02, -1.687e-02, -2.900e-02, -2.852e-02, 9.724e-03, -2.691e-02, -4.895e-02) * s1_1_2;
	r0 += M4(-7.050e-04, -1.010e-02, -7.154e-03, -5.173e-03, -2.243e-03, 1.022e-03, -5.762e-03, -4.235e-03, 3.822e-03, 2.596e-03, 3.186e-02, 5.085e-03, -4.648e-03, 1.056e-04, -2.220e-02, -2.907e-07) * s1_2_0;
	r0 += M4(2.098e-02, -2.216e-02, 5.750e-02, -6.274e-02, -6.366e-03, -1.676e-03, -8.896e-03, -4.092e-02, -5.492e-03, 2.265e-02, -3.834e-02, 2.273e-02, -1.773e-02, -1.065e-02, -3.612e-02, -6.146e-02) * s1_2_1;
	r0 += M4(5.474e-04, -1.067e-02, -1.703e-02, 2.749e-03, -5.638e-04, 1.833e-03, -3.562e-03, -7.760e-03, -2.926e-03, 5.060e-03, 1.132e-02, -6.679e-03, -4.803e-03, -1.095e-02, -1.521e-02, -7.884e-03) * s1_2_2;
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 += M4(-1.381e-02, 1.567e-02, 1.065e-03, 1.436e-03, -7.986e-03, -1.180e-03, -6.482e-04, -5.394e-04, -7.564e-03, 1.538e-05, 5.985e-05, 1.562e-05, 5.691e-03, -3.477e-03, 5.135e-03, -5.717e-03) * s0_0_0;
	r0 += M4(1.685e-01, -1.091e-01, 2.691e-02, -2.646e-02, -1.745e-02, -1.736e-02, -1.118e-04, -3.583e-04, -2.386e-02, -2.350e-02, 1.028e-04, 2.564e-04, -1.567e-01, 6.184e-03, -3.674e-02, 3.650e-03) * s0_0_1;
	r0 += M4(-2.477e-02, 1.259e-03, -8.267e-03, 2.870e-02, -7.771e-03, -1.069e-02, -9.045e-05, -1.980e-04, -4.362e-06, -9.082e-03, -1.520e-04, -2.233e-04, 1.231e-02, -1.756e-02, -8.261e-03, -9.592e-03) * s0_0_2;
	r0 += M4(-4.974e-02, -3.513e-03, -6.624e-02, 2.235e-02, -5.860e-03, -1.913e-03, -9.439e-03, -3.209e-03, -2.471e-02, -2.800e-06, -2.423e-02, -3.816e-05, -1.478e-02, -1.992e-03, -1.314e-02, 9.923e-03) * s0_1_0;
	r0 += M4(-4.152e-02, 1.057e-01, 1.636e-01, -2.369e-02, 1.795e-01, 5.806e-02, -4.627e-02, -3.123e-02, -7.397e-02, -7.281e-02, -7.302e-02, -7.266e-02, -7.105e-02, -1.996e-02, 2.630e-01, 5.420e-03) * s0_1_1;
	r0 += M4(2.698e-03, -6.189e-02, -1.768e-02, -7.299e-02, 6.517e-03, 1.233e-01, -6.659e-03, -2.640e-02, -7.387e-04, -2.581e-02, -7.879e-04, -2.605e-02, 5.945e-05, -9.644e-03, 9.483e-03, 2.741e-02) * s0_1_2;
	r0 += M4(-1.854e-03, -1.331e-03, -1.207e-02, -9.822e-03, 1.189e-03, -1.394e-03, -2.965e-03, -3.452e-03, 1.288e-05, 1.341e-04, -8.149e-03, 2.454e-04, 1.804e-03, -1.077e-03, 7.644e-05, -2.467e-03) * s0_2_0;
	r0 += M4(1.260e-02, 1.573e-03, -2.573e-02, 3.023e-02, -9.354e-02, -2.705e-02, 1.077e-01, 5.286e-02, 5.005e-06, 4.102e-05, -2.435e-02, -2.446e-02, 6.178e-03, 1.496e-03, -2.667e-02, 7.096e-03) * s0_2_1;
	r0 += M4(3.885e-04, -4.277e-03, 3.661e-03, -1.277e-02, -1.977e-02, -6.875e-02, -1.798e-03, 1.850e-02, 1.097e-05, -1.361e-04, -7.338e-06, -8.636e-03, 1.005e-03, -2.368e-04, 4.935e-03, 6.980e-03) * s0_2_2;
	r0 += M4(2.386e-03, -1.411e-04, -1.610e-03, -4.315e-04, 3.773e-02, 3.518e-03, 1.274e-02, -1.996e-03, 2.572e-02, 6.779e-03, 3.724e-04, 1.512e-03, 3.174e-02, 1.418e-02, -4.460e-03, 9.135e-03) * s1_0_0;
	r0 += M4(-1.224e-02, -1.994e-04, -3.177e-03, -6.538e-04, 4.824e-03, 5.002e-02, -4.065e-03, 1.574e-02, 3.142e-02, 3.625e-02, 3.612e-04, -1.158e-03, 3.406e-02, -9.058e-02, 3.198e-03, -1.567e-03) * s1_0_1;
	r0 += M4(3.307e-04, -1.009e-03, -3.139e-04, 1.559e-03, 7.310e-03, -2.188e-03, 5.349e-03, 1.918e-03, 4.572e-03, 1.339e-02, 3.454e-05, 1.327e-04, -2.702e-03, 2.362e-02, 3.593e-03, -2.975e-03) * s1_0_2;
	r0 += M4(-1.265e-02, 9.068e-03, 5.710e-03, 4.232e-03, 2.826e-02, 8.195e-04, 4.647e-02, 4.910e-03, -2.344e-02, -6.190e-03, 4.945e-02, 1.476e-02, 4.236e-02, -4.630e-03, 7.274e-02, 1.630e-03) * s1_1_0;
	r0 += M4(1.304e-01, -5.853e-02, -1.146e-03, -2.764e-02, 8.766e-02, 1.290e-01, 5.586e-02, 1.168e-01, 3.805e-02, 1.715e-02, 1.221e-01, 1.086e-01, -1.870e-01, 5.349e-02, -7.904e-02, -1.126e-01) * s1_1_1;
	r0 += M4(-1.511e-02, 9.815e-03, -4.397e-03, -6.549e-03, 1.439e-03, 3.924e-03, 4.983e-03, -1.255e-02, 5.442e-03, 2.031e-02, 2.388e-03, 4.996e-02, 1.077e-02, 9.531e-02, -6.055e-03, 1.251e-01) * s1_1_2;
	r0 += M4(-2.702e-03, -4.214e-04, 8.204e-03, -6.002e-03, 2.135e-03, 1.585e-04, 1.639e-02, 2.600e-05, 1.234e-02, 6.635e-03, -1.891e-02, 1.213e-02, 1.475e-02, 3.825e-03, 2.309e-02, 5.052e-03) * s1_2_0;
	r0 += M4(1.007e-01, -1.981e-03, -2.388e-01, 1.001e-01, 1.581e-02, 9.303e-03, 5.257e-02, 5.429e-02, -4.146e-02, -2.527e-02, -1.470e-01, -1.298e-01, 1.147e-02, -5.478e-03, -5.116e-02, 5.342e-02) * s1_2_1;
	r0 += M4(-2.827e-03, -3.184e-02, 1.530e-02, 6.541e-02, 3.881e-03, 7.308e-03, 1.623e-03, 2.069e-02, -3.784e-03, -2.118e-02, -4.866e-03, -4.786e-02, 1.476e-02, -8.991e-03, 2.157e-02, -6.023e-03) * s1_2_2;
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 += M4(-9.927e-03, 4.824e-03, 5.268e-03, 1.636e-03, -1.069e-02, 2.502e-03, 1.205e-03, -2.280e-03, -8.650e-03, 9.316e-04, -1.093e-02, 2.434e-03, 1.106e-02, 1.308e-02, 2.715e-03, 4.272e-03) * s0_0_0;
	r0 += M4(-1.161e-01, -7.493e-02, -3.137e-02, 4.002e-03, -7.399e-02, -5.335e-02, 4.972e-03, 1.783e-03, 6.032e-02, -8.032e-02, 1.303e-02, -2.634e-02, -1.395e-02, -2.557e-02, 1.351e-02, 2.109e-02) * s0_0_1;
	r0 += M4(2.315e-02, 4.121e-02, 5.486e-03, -9.113e-03, -5.491e-03, -3.602e-02, 7.500e-04, 1.705e-03, -4.821e-03, 3.481e-03, -2.882e-03, 7.014e-03, 3.025e-03, 8.757e-03, -1.699e-03, 4.215e-03) * s0_0_2;
	r0 += M4(-5.977e-02, -3.923e-03, -5.849e-02, 1.687e-03, 1.141e-02, 2.611e-03, 5.660e-03, -1.802e-04, 2.812e-02, -5.300e-03, 2.540e-02, -5.452e-03, 2.683e-02, -1.950e-02, -1.892e-02, 1.385e-02) * s0_1_0;
	r0 += M4(1.736e-01, -6.186e-02, -3.244e-03, -1.605e-01, 1.733e-01, 8.032e-02, -1.764e-01, -6.793e-02, 2.208e-01, -2.069e-01, 1.711e-01, -1.615e-01, 6.581e-02, 2.448e-01, -4.721e-02, -1.739e-01) * s0_1_1;
	r0 += M4(-9.644e-03, 1.066e-01, 1.411e-02, 1.308e-01, -1.132e-02, 4.333e-02, 8.330e-03, -6.939e-02, -6.789e-03, -1.986e-02, -4.853e-03, -2.390e-02, 1.430e-04, -2.239e-02, 9.669e-03, 2.216e-02) * s0_1_2;
	r0 += M4(-4.145e-03, -2.066e-03, -1.569e-02, -2.891e-03, 1.499e-03, 1.047e-03, 2.092e-02, 6.212e-03, -3.456e-03, 2.232e-03, 7.169e-03, 7.106e-04, -2.069e-03, -5.763e-04, 7.661e-04, -1.382e-02) * s0_2_0;
	r0 += M4(-1.352e-02, -5.082e-03, 5.058e-02, 1.903e-02, -5.264e-03, -1.548e-03, 7.550e-02, 6.470e-02, 1.444e-02, -3.048e-02, 1.018e-01, -1.201e-01, -7.358e-03, -1.358e-02, -9.086e-03, -7.540e-03) * s0_2_1;
	r0 += M4(-2.943e-03, -5.701e-04, -8.216e-03, 2.032e-02, 2.404e-03, 2.888e-03, 2.056e-02, 5.130e-02, -1.243e-02, 1.407e-02, -1.194e-02, 1.102e-02, 4.961e-05, -4.800e-03, -9.601e-03, -1.842e-02) * s0_2_2;
	r0 += M4(6.576e-03, 2.441e-03, -3.939e-03, 5.113e-04, 2.882e-02, -1.603e-03, -5.037e-02, -1.024e-02, 9.628e-03, 6.856e-04, 1.707e-04, 2.688e-05, -1.093e-02, -9.473e-03, 7.004e-03, -7.110e-03) * s1_0_0;
	r0 += M4(1.417e-02, 1.148e-02, -2.134e-03, -7.017e-03, 1.450e-01, 1.142e-01, -1.199e-01, -1.104e-01, 2.350e-02, 2.484e-02, 5.119e-06, 1.235e-05, -1.470e-01, 1.176e-01, -2.691e-02, 2.237e-02) * s1_0_1;
	r0 += M4(1.541e-02, 2.024e-02, 2.075e-04, 2.250e-03, 8.613e-03, 5.901e-02, -1.310e-02, -5.883e-02, -7.627e-06, 8.148e-03, -4.019e-05, -3.664e-05, -1.658e-02, 4.504e-02, 1.799e-03, -7.979e-04) * s1_0_2;
	r0 += M4(-2.642e-02, 8.612e-03, 2.852e-02, -1.135e-03, -1.326e-02, -5.786e-03, 1.269e-02, 8.746e-03, 2.502e-02, 1.419e-04, 2.570e-02, 1.196e-03, 1.170e-02, -2.538e-03, -1.642e-02, -3.122e-03) * s1_1_0;
	r0 += M4(-2.427e-01, -1.722e-01, 1.295e-01, 1.047e-01, -1.802e-02, -1.860e-02, 1.023e-03, 1.310e-02, 6.841e-02, 6.896e-02, 6.777e-02, 6.963e-02, -4.781e-02, 2.405e-02, -1.831e-01, 1.597e-01) * s1_1_1;
	r0 += M4(2.576e-03, -1.013e-01, 1.260e-02, 6.563e-02, -3.142e-03, -1.124e-02, -3.969e-03, -6.118e-04, 4.580e-05, 2.374e-02, 1.091e-04, 2.362e-02, -2.167e-02, 5.019e-02, -3.408e-02, 8.122e-02) * s1_1_2;
	r0 += M4(3.034e-03, 1.287e-03, -5.280e-03, -1.418e-02, -1.123e-03, -9.737e-05, -2.000e-03, -2.290e-03, 1.324e-04, 2.159e-06, 8.275e-03, 1.958e-06, -1.557e-03, 3.319e-04, 7.965e-03, -2.509e-03) * s1_2_0;
	r0 += M4(2.132e-02, 2.083e-02, 4.296e-02, 3.979e-02, 7.688e-04, -7.712e-04, -5.720e-03, -2.588e-03, -3.907e-05, -3.843e-05, 2.350e-02, 2.350e-02, -9.041e-03, 1.083e-02, 1.873e-03, -1.954e-02) * s1_2_1;
	r0 += M4(7.126e-03, 1.316e-02, 3.912e-03, 1.744e-02, -1.170e-03, -4.644e-04, -3.791e-03, -8.025e-03, -4.489e-05, -5.089e-06, 2.315e-05, 8.207e-03, 7.934e-04, -2.370e-03, -1.683e-03, 7.513e-03) * s1_2_2;
	r0 += V4(-3.429e-09, -1.418e-08, -2.514e-09, -1.378e-08);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}

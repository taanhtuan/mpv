// CuNNy 8x32 DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-8x32-DS-in
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5, r6, r7;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0); r6 = V4(0.0); r7 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-3.627e-02, -1.082e-02, 4.405e-02, -3.385e-01) * s0_0_0;
	r1 += V4(-1.142e-02, 6.666e-02, -8.231e-01, -3.071e-02) * s0_0_0;
	r2 += V4(1.022e-01, -1.859e-02, -6.776e-02, -4.199e-03) * s0_0_0;
	r3 += V4(-4.447e-02, 5.720e-02, -3.743e-02, 9.591e-03) * s0_0_0;
	r4 += V4(5.848e-02, -4.800e-02, -2.105e-01, 5.507e-02) * s0_0_0;
	r5 += V4(-1.971e-01, -3.186e-02, 2.105e-01, -7.153e-02) * s0_0_0;
	r6 += V4(1.233e-01, -1.679e-02, 1.968e-01, -1.274e-01) * s0_0_0;
	r7 += V4(-4.091e-02, 4.455e-02, 7.245e-02, 1.512e-01) * s0_0_0;
	r0 += V4(-8.502e-02, -2.881e-01, 6.018e-02, -8.571e-01) * s0_0_1;
	r1 += V4(2.932e-01, 9.671e-02, -1.858e+00, 8.145e-02) * s0_0_1;
	r2 += V4(-2.940e-03, 2.230e-02, 1.484e-01, 1.553e-01) * s0_0_1;
	r3 += V4(-2.611e-01, -2.612e-02, 8.370e-03, -5.481e-02) * s0_0_1;
	r4 += V4(-3.494e-01, 9.267e-02, -1.950e-01, -3.394e-01) * s0_0_1;
	r5 += V4(-2.202e+00, -3.851e-02, 1.577e-01, 9.403e-02) * s0_0_1;
	r6 += V4(-1.072e-01, 6.235e-02, -3.225e-02, 2.529e-01) * s0_0_1;
	r7 += V4(-2.264e-02, 7.940e-02, -7.111e-02, -3.747e-01) * s0_0_1;
	r0 += V4(6.519e-02, -2.908e-01, 1.888e-03, 6.623e-02) * s0_0_2;
	r1 += V4(-2.799e-01, 4.822e-02, -3.799e-01, -2.972e-02) * s0_0_2;
	r2 += V4(-1.174e-01, -7.582e-03, 1.086e-01, 3.721e-01) * s0_0_2;
	r3 += V4(-5.315e-03, -8.949e-03, -5.877e-02, 2.990e-01) * s0_0_2;
	r4 += V4(-1.825e-02, -6.352e-02, -1.823e-03, 1.137e-01) * s0_0_2;
	r5 += V4(-1.082e+00, 7.296e-02, -3.831e-01, 2.760e-02) * s0_0_2;
	r6 += V4(1.440e-01, -1.273e-01, -2.052e-02, -9.979e-02) * s0_0_2;
	r7 += V4(1.123e-02, -1.411e-01, 6.274e-02, -9.598e-02) * s0_0_2;
	r0 += V4(-2.282e-01, 9.004e-03, 6.430e-02, 1.111e-01) * s0_1_0;
	r1 += V4(-1.129e-02, 1.414e-02, -2.351e+00, -2.672e-01) * s0_1_0;
	r2 += V4(1.693e-01, -4.190e-01, 1.909e-03, -4.442e-03) * s0_1_0;
	r3 += V4(3.173e-02, -2.753e-02, -2.017e-01, -2.788e-02) * s0_1_0;
	r4 += V4(-4.822e-02, -1.113e-01, 1.470e-01, -1.714e-02) * s0_1_0;
	r5 += V4(-3.837e-01, 1.465e-01, 1.942e-02, -5.943e-02) * s0_1_0;
	r6 += V4(-3.193e-01, 3.507e-02, 1.767e-01, 6.712e-02) * s0_1_0;
	r7 += V4(-6.910e-02, 2.046e-01, -1.315e-01, 2.036e-01) * s0_1_0;
	r0 += V4(-2.154e-02, 8.555e-02, -1.482e+00, -1.145e+00) * s0_1_1;
	r1 += V4(4.135e-03, -2.271e-01, -2.644e+00, 2.826e-01) * s0_1_1;
	r2 += V4(-2.151e-01, 4.314e-01, 1.447e-01, -1.475e-01) * s0_1_1;
	r3 += V4(-1.887e-02, -1.390e-01, 2.968e-01, 2.959e-02) * s0_1_1;
	r4 += V4(3.682e-01, -2.116e-01, 2.706e-01, -2.329e-01) * s0_1_1;
	r5 += V4(1.951e-01, 1.449e-01, -1.919e-01, -6.007e-02) * s0_1_1;
	r6 += V4(4.808e-03, 7.956e-02, -1.698e-01, -3.508e-02) * s0_1_1;
	r7 += V4(3.747e-01, -8.722e-02, 3.596e-01, -1.789e-01) * s0_1_1;
	r0 += V4(3.246e-01, -4.585e-02, 8.862e-02, -1.577e-01) * s0_1_2;
	r1 += V4(1.555e-03, -8.893e-03, -1.560e+00, 4.050e-04) * s0_1_2;
	r2 += V4(-2.302e-02, -2.040e-02, 9.338e-02, -2.822e-01) * s0_1_2;
	r3 += V4(2.881e-01, -1.023e-01, 1.624e-02, -2.961e-02) * s0_1_2;
	r4 += V4(-6.685e-03, 3.692e-02, 1.485e-02, 1.106e-01) * s0_1_2;
	r5 += V4(-1.249e+00, -2.822e-01, 1.757e-01, -6.387e-01) * s0_1_2;
	r6 += V4(1.317e-01, 3.791e-02, -6.740e-03, -6.758e-02) * s0_1_2;
	r7 += V4(-4.405e-02, -8.130e-02, -2.032e-01, 3.291e-01) * s0_1_2;
	r0 += V4(-6.586e-02, -5.007e-03, -1.273e-02, 1.333e-01) * s0_2_0;
	r1 += V4(7.906e-03, -8.977e-02, -2.615e+00, -1.836e-02) * s0_2_0;
	r2 += V4(2.412e-01, 7.227e-03, 6.404e-03, 8.760e-03) * s0_2_0;
	r3 += V4(2.980e-04, 1.722e-02, 3.193e-01, 2.192e-02) * s0_2_0;
	r4 += V4(3.711e-03, 5.606e-03, -6.656e-03, -1.026e-02) * s0_2_0;
	r5 += V4(-1.826e-01, -1.032e-02, -2.647e-02, 1.893e-03) * s0_2_0;
	r6 += V4(-3.563e-02, -4.698e-02, 4.283e-03, 6.372e-02) * s0_2_0;
	r7 += V4(-1.841e-01, 4.333e-02, -3.607e+00, -2.313e-02) * s0_2_0;
	r0 += V4(2.261e-02, 2.320e-01, 9.320e-02, 6.012e-02) * s0_2_1;
	r1 += V4(1.898e-03, 1.558e-01, -2.836e+00, -4.041e-02) * s0_2_1;
	r2 += V4(-1.075e-01, -2.067e-02, 7.132e-02, -1.759e-02) * s0_2_1;
	r3 += V4(-1.457e-02, -6.532e-02, -4.326e-01, 2.055e-02) * s0_2_1;
	r4 += V4(1.933e-05, -1.425e-02, 5.127e-03, 1.047e-01) * s0_2_1;
	r5 += V4(-3.274e+00, 2.445e-02, 1.120e-02, 2.183e-01) * s0_2_1;
	r6 += V4(-1.324e-01, 3.967e-02, -1.667e-01, -1.946e-01) * s0_2_1;
	r7 += V4(-2.232e-01, -4.996e-02, -3.897e-01, -1.118e-01) * s0_2_1;
	r0 += V4(3.107e-02, 3.135e-01, -2.176e-02, 1.114e-01) * s0_2_2;
	r1 += V4(-4.284e-04, -5.134e-02, -1.777e+00, 2.570e-02) * s0_2_2;
	r2 += V4(-4.773e-02, 1.873e-02, -1.260e-02, -8.228e-02) * s0_2_2;
	r3 += V4(2.081e-02, 3.604e-03, 2.590e-02, -2.744e-01) * s0_2_2;
	r4 += V4(-7.938e-03, 4.150e-03, -9.738e-03, 6.214e-02) * s0_2_2;
	r5 += V4(1.104e-01, -1.641e-02, 2.087e-02, 1.440e-01) * s0_2_2;
	r6 += V4(-4.857e-02, -3.774e-02, 1.791e-02, 1.470e-01) * s0_2_2;
	r7 += V4(2.750e-02, -1.800e-01, 1.077e-01, -1.909e-01) * s0_2_2;
	r0 += V4(8.942e-03, 8.999e-03, 6.469e-02, 4.114e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.008e-02, 1.873e-02, 6.889e-02, 2.203e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.149e-02, -9.781e-03, -1.558e-01, 1.035e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r2));
	r3 += V4(1.740e-02, 9.253e-02, -2.357e-02, -1.064e-02);
	r3 = max(r3, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r3));
	r4 += V4(3.126e-02, 3.124e-01, 6.329e-03, 2.655e-02);
	r4 = max(r4, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r4));
	r5 += V4(9.595e-02, 7.334e-03, -7.467e-03, -1.047e-02);
	r5 = max(r5, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), vec4(r5));
	r6 += V4(4.262e-04, 1.667e-02, 8.450e-03, 1.054e-02);
	r6 = max(r6, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r6));
	r7 += V4(-4.332e-03, -3.047e-02, 3.723e-02, -3.308e-02);
	r7 = max(r7, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), vec4(r7));
}

//!DESC CuNNy-8x32-DS-conv1
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF7E8000A, 0xDE3B1902, 0x2EF3220F, 0x161526F2);
	r1 = D(r1, s0_0_0, 0x16E2F0E4, 0xFAF40CFC, 0xE32E0CF3, 0x0817EF04);
	r2 = D(r2, s0_0_0, 0xEE09E324, 0xF40812EB, 0xD0DCEBF4, 0xE5F81908);
	r3 = D(r3, s0_0_0, 0x2DEBF003, 0x0FFC0102, 0x0EFDEB08, 0x18E2F8F4);
	r4 = D(r4, s0_0_0, 0xF026810D, 0x050D0400, 0x3005060B, 0xF0EFFCED);
	r5 = D(r5, s0_0_0, 0xF60507FD, 0xE8F9E9F6, 0xD80AFB08, 0x3512E3EF);
	r6 = D(r6, s0_0_0, 0xD213FAEB, 0x2D56D0E0, 0xFF030608, 0xF8F00001);
	r7 = D(r7, s0_0_0, 0xFE00E4FA, 0xEFF108FA, 0x44F581FA, 0xDDE919F9);
	r0 = D(r0, s0_0_1, 0x2BE80308, 0xF31103B8, 0xEF0EFED2, 0x1AEDFEE8);
	r1 = D(r1, s0_0_1, 0x0FDBE6EE, 0x320BED0B, 0x15DB0E04, 0x20F904F9);
	r2 = D(r2, s0_0_1, 0x1D24190C, 0x1D1116FF, 0xFD26F3D9, 0x30E9250A);
	r3 = D(r3, s0_0_1, 0xC2C6FB09, 0x11FC08FE, 0xA80E14FE, 0x1FD2E806);
	r4 = D(r4, s0_0_1, 0xBC28B1F5, 0xF5F9F602, 0x07F0FE04, 0xFA01FC16);
	r5 = D(r5, s0_0_1, 0xF8E812FA, 0x16150C01, 0x1F2F06F4, 0x160CF619);
	r6 = D(r6, s0_0_1, 0xB72DF90D, 0xEFE0CFE5, 0x05000900, 0xF8F8EAF9);
	r7 = D(r7, s0_0_1, 0x0419E9FE, 0x06070725, 0x0024C514, 0x2A19EE0E);
	r0 = D(r0, s0_0_2, 0xFC0002FE, 0xEDE2FAFA, 0xDDC7FDEE, 0x15E2FBE6);
	r1 = D(r1, s0_0_2, 0x12F109CF, 0x0FC809F0, 0x17030718, 0xFEEDF50D);
	r2 = D(r2, s0_0_2, 0xDEEDFE0B, 0xF715071E, 0x0DDB0307, 0x301C0CE6);
	r3 = D(r3, s0_0_2, 0xC6EA07FD, 0xF9FBFE07, 0x0A01FCFB, 0xD01B0AE6);
	r4 = D(r4, s0_0_2, 0x46FBD713, 0x020D0507, 0xFB031C0C, 0xE31705FA);
	r5 = D(r5, s0_0_2, 0x031603F6, 0xDF322303, 0xCC1006F8, 0x110F0DE7);
	r6 = D(r6, s0_0_2, 0x190BFA03, 0x2E040BFD, 0xF9FB0305, 0xFDF6FD00);
	r7 = D(r7, s0_0_2, 0xDEFDF9F8, 0x131301E6, 0x3F032C03, 0x10E1FD17);
	r0 = D(r0, s0_1_0, 0xF20A0DF4, 0xF61DF6DC, 0x13EBDA1F, 0x1314DDFB);
	r1 = D(r1, s0_1_0, 0xD65B22E8, 0xD6030CFB, 0x42C101DC, 0xF2F7DF07);
	r2 = D(r2, s0_1_0, 0xF7FB0AE6, 0x1CE301EF, 0x0943F512, 0xCCD917D6);
	r3 = D(r3, s0_1_0, 0x27E10C1A, 0xEFF9FDF6, 0xEA0CDBEC, 0x3D1713ED);
	r4 = D(r4, s0_1_0, 0xCFE0C404, 0x13F100FB, 0xE3E1EE0F, 0x21FCEE09);
	r5 = D(r5, s0_1_0, 0xF2E2FC29, 0x4B0DD8F9, 0x980B0DEE, 0xCA76E71C);
	r6 = D(r6, s0_1_0, 0x36C7020F, 0x58D0FBDE, 0x1EFC1AFF, 0x08F71400);
	r7 = D(r7, s0_1_0, 0x05110D1E, 0x07E6E80E, 0x241181FF, 0xEF340401);
	r0 = D(r0, s0_1_1, 0xE1F31AE2, 0xE9A2FD81, 0x2C31E5F3, 0x043EEC0F);
	r1 = D(r1, s0_1_1, 0x1D4AF3FC, 0x26FEF60F, 0xE4F624EA, 0xF1DF811D);
	r2 = D(r2, s0_1_1, 0xCACAF3EC, 0xFAFF0416, 0x4210002A, 0xFEE71C05);
	r3 = D(r3, s0_1_1, 0xC58110FE, 0xFF2904F6, 0xE2FFEFEE, 0xBA1AECE1);
	r4 = D(r4, s0_1_1, 0xEAFFA802, 0x010DEF35, 0x2FE00B0F, 0x4DD402F8);
	r5 = D(r5, s0_1_1, 0xF5C7FFF9, 0x3AECEE0A, 0xE9161901, 0xB3F40BFF);
	r6 = D(r6, s0_1_1, 0x0811DC02, 0x2CF709F0, 0xDE0E0C00, 0xFD1BF9FE);
	r7 = D(r7, s0_1_1, 0x107F000C, 0xF518F82B, 0xCBDC81F4, 0xCCC3EDFF);
	r0 = D(r0, s0_1_2, 0xF409F80C, 0xFAEAFFE6, 0xCFE4010C, 0x48CDEE0C);
	r1 = D(r1, s0_1_2, 0xDA61F7FE, 0x29DCF30C, 0x2FC9F607, 0xE717FF00);
	r2 = D(r2, s0_1_2, 0x0ADEEDE9, 0xA7B6DEF8, 0x571818FF, 0xDEC4060A);
	r3 = D(r3, s0_1_2, 0xDAD90909, 0xFA1601F5, 0x0901FBFC, 0x1E010AD5);
	r4 = D(r4, s0_1_2, 0x90E91102, 0xEFE41116, 0x38EDD30D, 0x3AE709FC);
	r5 = D(r5, s0_1_2, 0x04DFFFED, 0xACB5FEFF, 0x32F3F3F1, 0x0518F801);
	r6 = D(r6, s0_1_2, 0x19FC04F5, 0xF00E07F7, 0xFB0800FD, 0x09FFF4FC);
	r7 = D(r7, s0_1_2, 0x11FF0DFE, 0x0CF908F7, 0x98D0ED07, 0x0B300EE0);
	r0 = D(r0, s0_2_0, 0x0DFB0507, 0x271408FD, 0x0AFD090D, 0xED22F807);
	r1 = D(r1, s0_2_0, 0xAF291A0A, 0xE01EFC08, 0x14FB0606, 0x09130109);
	r2 = D(r2, s0_2_0, 0xBF15F8D6, 0xD210FC06, 0xD8F507FE, 0xF6FC0BF5);
	r3 = D(r3, s0_2_0, 0x0D1918F0, 0x02F805F3, 0xF302030E, 0xC6D214F0);
	r4 = D(r4, s0_2_0, 0x39FF97F2, 0x1AF91104, 0xE404F5ED, 0xFE07C608);
	r5 = D(r5, s0_2_0, 0x080CE90B, 0xD915ECF1, 0xDA07140A, 0x11F5FCF0);
	r6 = D(r6, s0_2_0, 0xC3F10C05, 0xD110FCF6, 0x14FA0DE8, 0x08FD0202);
	r7 = D(r7, s0_2_0, 0xFCF107DD, 0xD5F908F8, 0x4BD7CDF9, 0xF83B08F3);
	r0 = D(r0, s0_2_1, 0xFE0B0AFE, 0xE80EFFF4, 0xF9E2F908, 0x81ED02FB);
	r1 = D(r1, s0_2_1, 0x15E3A329, 0x110B0708, 0x0CE20FF0, 0xF20B00FF);
	r2 = D(r2, s0_2_1, 0xF6EF2317, 0xB7080CDD, 0x2B221BE5, 0x2B15F011);
	r3 = D(r3, s0_2_1, 0x19FAFDF2, 0x0108FF01, 0x060CFD01, 0x81FDF511);
	r4 = D(r4, s0_2_1, 0x5DF8BFF9, 0xFBFA000C, 0x0F1504F6, 0x24D181E1);
	r5 = D(r5, s0_2_1, 0xD3EBF8FF, 0xB338CCF9, 0xEDFEF9FC, 0x05A6181A);
	r6 = D(r6, s0_2_1, 0x9BFFE305, 0xF502FEEF, 0xF6EC0E0E, 0x0101030B);
	r7 = D(r7, s0_2_1, 0x0510F3E9, 0x0403F623, 0xB312ECF7, 0xCAF2FE0D);
	r0 = D(r0, s0_2_2, 0x0FFFFE04, 0x2FE00419, 0xD8F112F0, 0x140CFCF8);
	r1 = D(r1, s0_2_2, 0x352AEDF1, 0xDB0EFDF9, 0xF7D40514, 0xFD0D0312);
	r2 = D(r2, s0_2_2, 0x27F50B12, 0x41F5EA14, 0x06F1F907, 0xC0200F05);
	r3 = D(r3, s0_2_2, 0xEB180717, 0x01FB0007, 0x0AF704FA, 0xDAFF1306);
	r4 = D(r4, s0_2_2, 0x5F141108, 0xFD17F6F9, 0x13EDF5F4, 0xF522FAEB);
	r5 = D(r5, s0_2_2, 0xFC010200, 0xF826F602, 0xD6210FFC, 0xF512F21C);
	r6 = D(r6, s0_2_2, 0xCBE71212, 0xCA0701EA, 0x00F208F7, 0xFF06FD03);
	r7 = D(r7, s0_2_2, 0x00EF03F1, 0xFEE906F8, 0xF1DDF0FB, 0xD713EAF6);
	r0 = D(r0, s1_0_0, 0xF72800F7, 0x0C18F5FD, 0xF9E21016, 0x029D08EC);
	r1 = D(r1, s1_0_0, 0x840212E1, 0x12EE1DFB, 0xF8E71D02, 0xF3D3F8F6);
	r2 = D(r2, s1_0_0, 0xE981FAD6, 0x011A20F4, 0x100214F1, 0x0DD5F810);
	r3 = D(r3, s1_0_0, 0xE981EE08, 0xFEFE1BFA, 0xF230FEFF, 0x0F29F2F7);
	r4 = D(r4, s1_0_0, 0xD92A0401, 0xFFF8060A, 0x0DEEFF0B, 0x06FB0109);
	r5 = D(r5, s1_0_0, 0x08CFF607, 0xEB10E7EB, 0xF9AB17F7, 0x0BDBFEEE);
	r6 = D(r6, s1_0_0, 0x0A1DF10B, 0x09D6E407, 0xF4DDFAF7, 0xF524F500);
	r7 = D(r7, s1_0_0, 0xE7EFE8F8, 0x07DE0009, 0x0C1EE80D, 0xF8FEFD02);
	r0 = D(r0, s1_0_1, 0xEBF200FB, 0xF0DAE90D, 0x08F203D7, 0x41FCC9F5);
	r1 = D(r1, s1_0_1, 0xFE7F0E0F, 0x02CDF7EE, 0xE55FDBE3, 0xFEAE0318);
	r2 = D(r2, s1_0_1, 0xEBD021FA, 0x014919FB, 0xF8E91904, 0x02DB1907);
	r3 = D(r3, s1_0_1, 0x02E6E604, 0xFDD0F301, 0x2007E00A, 0xFC2002ED);
	r4 = D(r4, s1_0_1, 0xF88FD40D, 0x00F5FE0A, 0x0EE521F8, 0x14850107);
	r5 = D(r5, s1_0_1, 0x00FA0E0E, 0xF51E1707, 0x0EC60D04, 0xEF810815);
	r6 = D(r6, s1_0_1, 0xBC1EF107, 0xD9EDE826, 0x0511FCFB, 0x1A1CF303);
	r7 = D(r7, s1_0_1, 0x0E07F2EE, 0x0CB4F100, 0x0B08160B, 0xF2F70FE8);
	r0 = D(r0, s1_0_2, 0x0DEC06FD, 0x1D6CFB04, 0x15B53009, 0x26EDFC01);
	r1 = D(r1, s1_0_2, 0x1C091D1E, 0x22FFF50C, 0xFCA70318, 0x03AA0405);
	r2 = D(r2, s1_0_2, 0x1A8115F3, 0x104422FC, 0xBBCEF00E, 0x0AD40C08);
	r3 = D(r3, s1_0_2, 0xF6CDDCF8, 0x001FFE01, 0xF2B90EF2, 0xF034E810);
	r4 = D(r4, s1_0_2, 0xF2B5F6FC, 0xF5070C03, 0x0DF10EFF, 0xFD970C01);
	r5 = D(r5, s1_0_2, 0xF208F90D, 0x81E41DF4, 0x0CADF0FC, 0x07A21FFB);
	r6 = D(r6, s1_0_2, 0xEA51F806, 0x20CE19ED, 0x031DF6F7, 0xFEE0090A);
	r7 = D(r7, s1_0_2, 0xEEE4FFF4, 0xFA9BF810, 0x031A3116, 0xFF24E6FB);
	r0 = D(r0, s1_1_0, 0x0A35EF1F, 0xFCCA05EE, 0xFAC0BFED, 0xFDE206E5);
	r1 = D(r1, s1_1_0, 0xB9FAE1D7, 0x0DFF0E00, 0xFFE90011, 0xEDFEF7FF);
	r2 = D(r2, s1_1_0, 0xE9A6031E, 0x0110EEF5, 0x17F20001, 0x012D07E3);
	r3 = D(r3, s1_1_0, 0xE66B21F4, 0x06DAFD17, 0xFBA502D4, 0xF98C29D0);
	r4 = D(r4, s1_1_0, 0x16EF04ED, 0xFC1DFDFF, 0x0F25E7DE, 0x0B22F812);
	r5 = D(r5, s1_1_0, 0xF3F501F7, 0x0D1E10FD, 0x036AE3F8, 0x1F56F62C);
	r6 = D(r6, s1_1_0, 0x0A7F08F5, 0x1330FAFC, 0x03190507, 0x081DFFE0);
	r7 = D(r7, s1_1_0, 0x05301808, 0x1ADEF807, 0xFB213DB9, 0x03DD152D);
	r0 = D(r0, s1_1_1, 0xFD4AD6DD, 0xB0E81AF9, 0xF314C9D3, 0x91F808FF);
	r1 = D(r1, s1_1_1, 0xFA6A2A0B, 0xDF9F0ED1, 0x014717F0, 0x071BF8FD);
	r2 = D(r2, s1_1_1, 0x1843F3DA, 0xF7091D1A, 0x28CCECFD, 0xC4FCF60A);
	r3 = D(r3, s1_1_1, 0x0E5CF2F5, 0xD4F2FEEE, 0xE8212120, 0x33041404);
	r4 = D(r4, s1_1_1, 0xFE710811, 0xEC0C09FC, 0x1808FFE3, 0x0FC5F7EF);
	r5 = D(r5, s1_1_1, 0x20F7E30F, 0xF4D6AC18, 0xE6D8E301, 0x197FEFFF);
	r6 = D(r6, s1_1_1, 0xEE54F8F3, 0xB028E0F4, 0xF8F11402, 0xF5FA272C);
	r7 = D(r7, s1_1_1, 0xED451E02, 0x10E00BEE, 0x16DB9422, 0x20DFDD01);
	r0 = D(r0, s1_1_2, 0xF40DFDF7, 0xD2D10EF8, 0x0EA2E52A, 0x08031407);
	r1 = D(r1, s1_1_2, 0x0DD8FD35, 0x063DF234, 0xE3ADE70C, 0x300DE80B);
	r2 = D(r2, s1_1_2, 0xEE9D041A, 0x54C2E20D, 0xEE81DDF3, 0x2655F507);
	r3 = D(r3, s1_1_2, 0x018102FC, 0x09FFFD06, 0x18F20A05, 0xB64321FD);
	r4 = D(r4, s1_1_2, 0xFB0D1503, 0x480D0511, 0x08FE120B, 0xEF042602);
	r5 = D(r5, s1_1_2, 0xE60A07FB, 0xF1C306E9, 0x12B51314, 0x127F08EF);
	r6 = D(r6, s1_1_2, 0xE563F9F7, 0xFDDC09F0, 0xEC110506, 0x2300FBFB);
	r7 = D(r7, s1_1_2, 0x19130903, 0x17351A24, 0xFF3CFA01, 0xC0BD091F);
	r0 = D(r0, s1_2_0, 0x00060DF0, 0x1FFFFB1A, 0xF4F60AEF, 0x1720FF3E);
	r1 = D(r1, s1_2_0, 0xCFE5BB21, 0xF2F705F0, 0x0DA108F7, 0xF9F017EF);
	r2 = D(r2, s1_2_0, 0x17811017, 0xF12DEFF9, 0xFB0CF7E1, 0x042CF605);
	r3 = D(r3, s1_2_0, 0xFA7FFFFA, 0x10070548, 0x02C8F816, 0xFE880EFC);
	r4 = D(r4, s1_2_0, 0x1E1F07FF, 0xEBECF605, 0xE527E0F0, 0x00FF02FC);
	r5 = D(r5, s1_2_0, 0xF70403D0, 0x33EB0B03, 0x0855F6FD, 0x02E6FCFD);
	r6 = D(r6, s1_2_0, 0x0B57FEF5, 0x0C8124FF, 0x1504F812, 0x0B0CEF14);
	r7 = D(r7, s1_2_0, 0xF802F728, 0xF431FCF8, 0xA42DD8E9, 0xFD0005BB);
	r0 = D(r0, s1_2_1, 0x0EF80B15, 0x1B2200F8, 0xED242D02, 0xE1F300DC);
	r1 = D(r1, s1_2_1, 0x102510A7, 0xF354F5D6, 0x154CD8CE, 0xF3DB06E4);
	r2 = D(r2, s1_2_1, 0xF740F71B, 0xED17D7F8, 0x09FD17F2, 0xE2F0E9AD);
	r3 = D(r3, s1_2_1, 0x157F191D, 0xF4160AD1, 0xFB1404EF, 0xFBA4E121);
	r4 = D(r4, s1_2_1, 0xFA00E8DD, 0xF817F2C1, 0xE5F7EBED, 0x102FDDF4);
	r5 = D(r5, s1_2_1, 0x0E06111A, 0x06D6FFD9, 0xD23B11FA, 0xE5810501);
	r6 = D(r6, s1_2_1, 0xFE2BF315, 0xEB13171A, 0x0A2D04E9, 0xF107FFE1);
	r7 = D(r7, s1_2_1, 0x04F4FBE0, 0xDE6BFFC0, 0xFD020CEA, 0xFA391604);
	r0 = D(r0, s1_2_2, 0x01F50001, 0xF47F010A, 0xEEFE12EC, 0x062E1417);
	r1 = D(r1, s1_2_2, 0x0E890622, 0xF12FE109, 0xE581180D, 0x12090DFD);
	r2 = D(r2, s1_2_2, 0x1081D5F6, 0xF8E31207, 0xF0CC03EC, 0x0D15FA10);
	r3 = D(r3, s1_2_2, 0x19661FF5, 0x06DA04F8, 0x10F2EF01, 0xFE3FDDEB);
	r4 = D(r4, s1_2_2, 0xF7331611, 0x1A0B0E08, 0xF8ED161F, 0xEC7FF4F1);
	r5 = D(r5, s1_2_2, 0x050705FE, 0x211F123C, 0xF5CF08FB, 0x01A9DEF6);
	r6 = D(r6, s1_2_2, 0x204814F2, 0x0B9C0307, 0xF933F70F, 0x0204F6FC);
	r7 = D(r7, s1_2_2, 0xF70D05F5, 0xFB7008FD, 0x1A701615, 0xD023F001);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFD01F809, 0xF716F000, 0xEA08F306, 0xF41BDCEF);
	r1 = D(r1, s0_0_0, 0x0AC09C1E, 0xF0070707, 0x0DF812F3, 0xEA0104FE);
	r2 = D(r2, s0_0_0, 0xCA0FE911, 0xD60709F4, 0x07F9FBFC, 0x05150403);
	r3 = D(r3, s0_0_0, 0x02FF2011, 0x0404FB04, 0x02FF0A04, 0x0BEDFF1D);
	r4 = D(r4, s0_0_0, 0xF1050011, 0x05FD0605, 0x01FDECF3, 0xFC0FF905);
	r5 = D(r5, s0_0_0, 0x0611FE00, 0x050F1A0D, 0x0112F1F9, 0x02F914CB);
	r6 = D(r6, s0_0_0, 0xF9E2FAFD, 0xE8C6F6DD, 0x08FC0502, 0x0105F601);
	r7 = D(r7, s0_0_0, 0x040C17FB, 0x08F806E9, 0x33E6DB11, 0x15F91EFA);
	r0 = D(r0, s0_0_1, 0xFF001813, 0x03F1DDF9, 0xE7F4DC12, 0x15F2B20B);
	r1 = D(r1, s0_0_1, 0x14FB1238, 0xE7F1151D, 0x18FE2613, 0x05FB10F0);
	r2 = D(r2, s0_0_1, 0xDCF8E1FB, 0xF906E4E5, 0x0AF4F003, 0x071522F3);
	r3 = D(r3, s0_0_1, 0xF7070301, 0xFE03DF1E, 0x0B072AEF, 0xF71D0510);
	r4 = D(r4, s0_0_1, 0x96F91BFB, 0xF9FCF5EF, 0x1106F0DC, 0x110DEDFE);
	r5 = D(r5, s0_0_1, 0xF7130103, 0xE40A0B08, 0xF8FCE200, 0x000302DC);
	r6 = D(r6, s0_0_1, 0x050B211A, 0x2DF025EE, 0x0501FA02, 0x03121619);
	r7 = D(r7, s0_0_1, 0x08EDF5F5, 0x0403E1CA, 0x21EBF592, 0x02F30B14);
	r0 = D(r0, s0_0_2, 0x0CFF360C, 0x0FF4F408, 0x0B0200F8, 0x16EEDFFB);
	r1 = D(r1, s0_0_2, 0x08233816, 0x130F26FE, 0xFAFB15FB, 0xEB030EF5);
	r2 = D(r2, s0_0_2, 0x1B01D521, 0xD907C20B, 0x07092DE8, 0xF9110DDF);
	r3 = D(r3, s0_0_2, 0x12040511, 0x0AFBFA04, 0xF405D2FC, 0x14F616FE);
	r4 = D(r4, s0_0_2, 0xF7F40A11, 0x0216EAFC, 0xD613EE01, 0xF90C2DFE);
	r5 = D(r5, s0_0_2, 0x06200313, 0x120AD7FE, 0xF111F2FC, 0x21F406F1);
	r6 = D(r6, s0_0_2, 0x0F11EB02, 0xE7F3F9F0, 0x0AFBFD07, 0xFEF9F4FA);
	r7 = D(r7, s0_0_2, 0xF50101F6, 0x070EBA0C, 0xE1090C03, 0xFA03090E);
	r0 = D(r0, s0_1_0, 0xD30D0CFA, 0xC01915F5, 0xE3FDFCEC, 0xEC16FFEB);
	r1 = D(r1, s0_1_0, 0x5B817FFC, 0x080AF806, 0x0AFD0D26, 0xE1050CF8);
	r2 = D(r2, s0_1_0, 0xDBF90509, 0xDE010B07, 0x1404CD29, 0x1AFF0BEF);
	r3 = D(r3, s0_1_0, 0xEDFF0505, 0x051016F6, 0x26F70506, 0xE0FD0EF8);
	r4 = D(r4, s0_1_0, 0x5611FF0F, 0x10F80B03, 0x0402060E, 0x011FFD18);
	r5 = D(r5, s0_1_0, 0xE0150409, 0xD6FAF3F1, 0x1411E8E4, 0xE9080221);
	r6 = D(r6, s0_1_0, 0xF3EEF421, 0xF30C13D6, 0xE8FFFB05, 0x47120600);
	r7 = D(r7, s0_1_0, 0xFBECF1E9, 0xEFE8D81A, 0x19FF0914, 0x3912E2DB);
	r0 = D(r0, s0_1_1, 0xDFF113F0, 0xF4F58105, 0x1319E711, 0x2FF581FB);
	r1 = D(r1, s0_1_1, 0xD9ECF0F1, 0xFAFA01FB, 0xEC0B01FA, 0x3604DFFE);
	r2 = D(r2, s0_1_1, 0x0D0625E1, 0xFCF81C14, 0xDB0027F0, 0xF1F8FBF6);
	r3 = D(r3, s0_1_1, 0xD6F6EAEB, 0xFBF01F23, 0x2B08D1FB, 0xD6020BF9);
	r4 = D(r4, s0_1_1, 0xDC0315E7, 0x11FCE6FD, 0x44FADAF4, 0x17003DF4);
	r5 = D(r5, s0_1_1, 0xE2150DEB, 0x81F7080E, 0x0E101C17, 0x050B11C4);
	r6 = D(r6, s0_1_1, 0x21040711, 0xFF0F2CF1, 0xE3F0C102, 0x1F08EB0B);
	r7 = D(r7, s0_1_1, 0xEFFEE309, 0x041698C1, 0xDDFFF7D0, 0xE9F81514);
	r0 = D(r0, s0_1_2, 0x1006F0FC, 0x26E7C017, 0xF303FBF4, 0x0D0708FF);
	r1 = D(r1, s0_1_2, 0xE5DE0EE3, 0xFE1A09E3, 0x0112DD1C, 0x000CD4E9);
	r2 = D(r2, s0_1_2, 0xC6020409, 0x16050DFA, 0xF7F9C715, 0x0CE3C40C);
	r3 = D(r3, s0_1_2, 0xF2FECDF3, 0x030617FC, 0x000C2DF8, 0x0BF323E3);
	r4 = D(r4, s0_1_2, 0xD9FBFD0C, 0x011910CE, 0xFF0529EE, 0x04FA5C01);
	r5 = D(r5, s0_1_2, 0x02077F0D, 0xF1F071CF, 0x0AFF1301, 0x21DA1C0C);
	r6 = D(r6, s0_1_2, 0x0726D0CB, 0x13FD0508, 0x080C2500, 0xFDFB2808);
	r7 = D(r7, s0_1_2, 0xF7F53011, 0x05168BF2, 0xEE0EC707, 0x091F86F8);
	r0 = D(r0, s0_2_0, 0xEB18FA0D, 0x0715E8FB, 0xCB070B0D, 0xD90E020B);
	r1 = D(r1, s0_2_0, 0x2ACE101F, 0x0EF60506, 0xE3FB0915, 0xDEEE0AFD);
	r2 = D(r2, s0_2_0, 0x1EFCF9EA, 0xF9F50D00, 0x160E0720, 0x1A030205);
	r3 = D(r3, s0_2_0, 0x0E110D07, 0x0AF9F406, 0x00FC09FF, 0x3EF505FD);
	r4 = D(r4, s0_2_0, 0x1B05FC12, 0x01F111FE, 0xF1F221FD, 0xF9F9F405);
	r5 = D(r5, s0_2_0, 0x2412FFFC, 0xF009F115, 0x0C13FBFE, 0xC5F81BE1);
	r6 = D(r6, s0_2_0, 0xE7FBF9FB, 0xF1F3FAFF, 0xE7FD07FA, 0xF80EF403);
	r7 = D(r7, s0_2_0, 0xFBFA0DFB, 0x0CF011F3, 0x3F1038D9, 0x2CE4EFF1);
	r0 = D(r0, s0_2_1, 0xF5010505, 0xF8F2FBF5, 0xF8F61506, 0xDDEE2207);
	r1 = D(r1, s0_2_1, 0xD3CFC30C, 0x0DF80BFB, 0x1BFDE9CB, 0x2DF9FC12);
	r2 = D(r2, s0_2_1, 0xE7FC3207, 0x2F021DFF, 0x1D08031B, 0xF40F0EFE);
	r3 = D(r3, s0_2_1, 0xCF0A2313, 0x03F4E004, 0xFCF60400, 0x0FFBE80A);
	r4 = D(r4, s0_2_1, 0xCFF7FF2D, 0x08F1FCF7, 0x28EF1608, 0x1D01EE05);
	r5 = D(r5, s0_2_1, 0x1B151502, 0xE00AD708, 0xEE091914, 0x19DBFD08);
	r6 = D(r6, s0_2_1, 0xF20CBEBF, 0x26F63A08, 0xD5092A10, 0xF1FF02FE);
	r7 = D(r7, s0_2_1, 0x00FBF2FA, 0xF1FDF2DE, 0xEF01F227, 0xD7F7D9F9);
	r0 = D(r0, s0_2_2, 0x0B011108, 0x09EFEAF8, 0x0CFCC20E, 0x1405010B);
	r1 = D(r1, s0_2_2, 0x1CE10281, 0x0409FB14, 0xEDFFF41A, 0x1803EE04);
	r2 = D(r2, s0_2_2, 0xCBF0FBE2, 0x0DF50708, 0x03119AEE, 0x08F4CDE6);
	r3 = D(r3, s0_2_2, 0xF004F600, 0xFEF002FE, 0xF8070300, 0xFC08EA10);
	r4 = D(r4, s0_2_2, 0xF81006F7, 0x041AF2FB, 0x05161916, 0xF3E1F4E8);
	r5 = D(r5, s0_2_2, 0xF8090F01, 0x1002F8F5, 0x030D1B09, 0xF6E02908);
	r6 = D(r6, s0_2_2, 0x110104F5, 0x09043619, 0x0202E7FB, 0xFD08F507);
	r7 = D(r7, s0_2_2, 0xE70E0208, 0x131CC5FB, 0xD2FEFAF5, 0xBB0E8111);
	r0 = D(r0, s1_0_0, 0x08FBFBFA, 0x0FF7EBFD, 0xF8DE11F6, 0x069F1719);
	r1 = D(r1, s1_0_0, 0xCDE30630, 0x11F5F817, 0xF4CFE402, 0x15030010);
	r2 = D(r2, s1_0_0, 0x6E254304, 0x2BF4040A, 0x050FFA11, 0xDCFCE1FA);
	r3 = D(r3, s1_0_0, 0x3EE4F400, 0x16F5F2FC, 0xF4FBF5F8, 0xCBEAFE02);
	r4 = D(r4, s1_0_0, 0x8111000A, 0x0DFA19F8, 0xFA04EF02, 0x0403CCF6);
	r5 = D(r5, s1_0_0, 0xF11E1804, 0xD617E40C, 0xEAE10103, 0xD617E7EF);
	r6 = D(r6, s1_0_0, 0x080426ED, 0x079FF7E6, 0x090DFC03, 0xEC08F3F9);
	r7 = D(r7, s1_0_0, 0xFA2920FD, 0x0200FBF0, 0xB7DE392C, 0x2E0B08FB);
	r0 = D(r0, s1_0_1, 0xEFF00C05, 0x0915E1FA, 0xF510011A, 0xE6DE0C0A);
	r1 = D(r1, s1_0_1, 0xE434F704, 0x00FC381D, 0xF51CFCFB, 0xF2F70011);
	r2 = D(r2, s1_0_1, 0xE0431538, 0x1EFE1F02, 0x10C3C403, 0xFF05120C);
	r3 = D(r3, s1_0_1, 0xF01E0810, 0xFEF9F701, 0x0717ED02, 0xFFF2FFF1);
	r4 = D(r4, s1_0_1, 0x47F0FDF3, 0xF40B00EF, 0xE617E400, 0xD719ED12);
	r5 = D(r5, s1_0_1, 0x03D4E101, 0x5BD1E6EE, 0xE0DDEE0F, 0xF8C1072A);
	r6 = D(r6, s1_0_1, 0x03E6F50F, 0x011D342C, 0xF5051FFE, 0x280B0007);
	r7 = D(r7, s1_0_1, 0x042A03F4, 0xEA03FA06, 0x17BB3508, 0x09FA14F6);
	r0 = D(r0, s1_0_2, 0x05FF0607, 0xF7EF2FFB, 0xEE0FC605, 0xE9B90C04);
	r1 = D(r1, s1_0_2, 0x098105FB, 0x0A08C7D5, 0x11F3F7EC, 0x2A01E7FA);
	r2 = D(r2, s1_0_2, 0xE4043BFC, 0x22F3DA05, 0xE62E08FC, 0x14210D00);
	r3 = D(r3, s1_0_2, 0x10C01B04, 0x00FD0E00, 0x0CD7E901, 0xE9FDE302);
	r4 = D(r4, s1_0_2, 0x06AA1511, 0xFCEFD5EE, 0x1B16F3F2, 0x1AF91D06);
	r5 = D(r5, s1_0_2, 0xFC1FC6FD, 0xD9532012, 0x1A021508, 0xD6B90C05);
	r6 = D(r6, s1_0_2, 0xFAFB0C02, 0xF00104BB, 0xF9EBFAF6, 0x05110803);
	r7 = D(r7, s1_0_2, 0x0AEE021E, 0x0E19D701, 0x006124FB, 0x0C06F012);
	r0 = D(r0, s1_1_0, 0x08F4DB07, 0xF110EE1B, 0xCF0C0902, 0x141EF90F);
	r1 = D(r1, s1_1_0, 0xB0C50C3B, 0xF6050811, 0x0903C9D6, 0xE5FEEB0B);
	r2 = D(r2, s1_1_0, 0xCB380C01, 0x1C09F032, 0x0EF4FEEE, 0x0DFEDCF6);
	r3 = D(r3, s1_1_0, 0xEEF4EE1B, 0x070DF4D9, 0x030C11F5, 0xE3E100F2);
	r4 = D(r4, s1_1_0, 0x8D04AF1D, 0xEFF71809, 0xECE82AE4, 0xEA04EF06);
	r5 = D(r5, s1_1_0, 0x15FE4914, 0xCB2EE7FF, 0x15FBE9D4, 0x19C3171F);
	r6 = D(r6, s1_1_0, 0x291704ED, 0x1D00DAFE, 0x33EF0608, 0xF0FADAEA);
	r7 = D(r7, s1_1_0, 0x010514CC, 0xDA1635E8, 0xBDBD0CF3, 0x0FF4F8EA);
	r0 = D(r0, s1_1_1, 0xFB0410E2, 0x02110F01, 0x4DEB0DF3, 0xDBCBDA19);
	r1 = D(r1, s1_1_1, 0x812C0C03, 0x0C21260A, 0x07FAF6EA, 0xCA021F15);
	r2 = D(r2, s1_1_1, 0x11E6B10E, 0xD0F6DFE2, 0x09EBDEF5, 0xCDF4F6FC);
	r3 = D(r3, s1_1_1, 0x0F0AFFF3, 0x0206120E, 0x04F70AE3, 0xF2091CF6);
	r4 = D(r4, s1_1_1, 0x2303D436, 0xFFDE132B, 0x0217EDEE, 0xC9F01EE4);
	r5 = D(r5, s1_1_1, 0x0412B9FF, 0xEFECF214, 0xFBC8E104, 0x0EF715F9);
	r6 = D(r6, s1_1_1, 0xED01D007, 0x10DFEA0D, 0x070EFFF1, 0x09ECFCD0);
	r7 = D(r7, s1_1_1, 0xF42CDDE9, 0x102B293B, 0x03E3AA29, 0xC90EEF8E);
	r0 = D(r0, s1_1_2, 0x080315FD, 0x010A2803, 0x02F0E0F1, 0x1BE7FE0A);
	r1 = D(r1, s1_1_2, 0xC881FE14, 0x0DFFDED6, 0x1DD7EC11, 0xEBFDDC05);
	r2 = D(r2, s1_1_2, 0x1B20E01D, 0xE90BC9FB, 0x0C171B11, 0xFD0CD8E9);
	r3 = D(r3, s1_1_2, 0x2A0AD6F7, 0xFFFB0E05, 0x06FFF9FA, 0xF495031A);
	r4 = D(r4, s1_1_2, 0x1222E616, 0x0501D9F5, 0xFAC20126, 0xF6FEF710);
	r5 = D(r5, s1_1_2, 0x0603EFFD, 0xE91CBC13, 0xFA14B000, 0xF9E81D11);
	r6 = D(r6, s1_1_2, 0xF3D40617, 0xFBDEFE0E, 0x00F9ED01, 0x0E05F506);
	r7 = D(r7, s1_1_2, 0x0A11F5FF, 0x051EB501, 0x1941DAFE, 0xE8221AFB);
	r0 = D(r0, s1_2_0, 0x0A08D502, 0x131DF2EB, 0x03EBF733, 0xDF002394);
	r1 = D(r1, s1_2_0, 0x762F1EE8, 0xFEFD09F6, 0x0BF318F7, 0xF90011F7);
	r2 = D(r2, s1_2_0, 0x14EB27CF, 0x12FBF5EE, 0xC403161C, 0xFEEA0CDC);
	r3 = D(r3, s1_2_0, 0xF9022BE7, 0xF00D0EFB, 0x0F020D00, 0x04F508EB);
	r4 = D(r4, s1_2_0, 0xB8E629EC, 0x010101F1, 0xFFD71906, 0x030C0401);
	r5 = D(r5, s1_2_0, 0x0901FD04, 0xF5F806DF, 0xEF1713EF, 0xE5E0E8FC);
	r6 = D(r6, s1_2_0, 0xF1E81A0A, 0xDD110ADB, 0x0B0B0B1B, 0x0403F0FF);
	r7 = D(r7, s1_2_0, 0xAF0BF6E7, 0xFCFF04FA, 0xCCF1FB00, 0x19EE162A);
	r0 = D(r0, s1_2_1, 0xF70E05EE, 0xEE17F5E6, 0xDFFC2836, 0x100AD3F4);
	r1 = D(r1, s1_2_1, 0xE73C050D, 0xF6FDE90E, 0x35076601, 0x130004E2);
	r2 = D(r2, s1_2_1, 0x3920C3F0, 0xCCFC5DB9, 0x24ECF5E9, 0x14F43B0E);
	r3 = D(r3, s1_2_1, 0x2010F40F, 0x0500160F, 0x01FD0902, 0x0D0A1CF1);
	r4 = D(r4, s1_2_1, 0x1FC8391D, 0x160AF511, 0x0D1601E0, 0xE8F809B4);
	r5 = D(r5, s1_2_1, 0xFC0CE1EE, 0xF6CE20F6, 0xF8081BF8, 0xDCFB1D1F);
	r6 = D(r6, s1_2_1, 0xF604F202, 0xDAE21408, 0xF9160020, 0x0906FA0C);
	r7 = D(r7, s1_2_1, 0xFC1ED916, 0xF71FF51F, 0xF1ABED2D, 0xDD00DA81);
	r0 = D(r0, s1_2_2, 0x0300FA01, 0x0B162417, 0xEEF9220C, 0xDDFB14FA);
	r1 = D(r1, s1_2_2, 0x12BB171D, 0xFFEBDB0E, 0xF8F535E9, 0xF4F61604);
	r2 = D(r2, s1_2_2, 0xFB57EE11, 0x04301AE4, 0xE1C421FA, 0x01F004F2);
	r3 = D(r3, s1_2_2, 0x0C0CECED, 0x070909FC, 0x030BFB0C, 0xFDE6091C);
	r4 = D(r4, s1_2_2, 0x070106D2, 0xFC04F3E9, 0x06F6E2EA, 0x0A040BEC);
	r5 = D(r5, s1_2_2, 0x0208FAFF, 0xEFDAF90C, 0xFF0B0010, 0x1A07FBFA);
	r6 = D(r6, s1_2_2, 0x0E091806, 0xF800E9F9, 0x0004F809, 0x0306FB09);
	r7 = D(r7, s1_2_2, 0xF90EDE07, 0xFF07F709, 0x0EEAF6D4, 0xFE0D04E1);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0A030203, 0x1801E3FD, 0x0605FDE9, 0x15000404);
	r1 = D(r1, s0_0_0, 0x04B00B27, 0xF2FBFAFE, 0x2FF9EEFE, 0xE9FD01FC);
	r2 = D(r2, s0_0_0, 0x17E301F3, 0xF0EC10F2, 0x1331F7F9, 0xF3F3F0FF);
	r3 = D(r3, s0_0_0, 0xFF0B0917, 0x05FCF709, 0xF909F80D, 0xEA100BF2);
	r4 = D(r4, s0_0_0, 0x080B0E18, 0x0B040101, 0xE4FEF3F4, 0x04040C09);
	r5 = D(r5, s0_0_0, 0xFDFEE9F9, 0x1BE505FF, 0x02FA0701, 0xF429FDF9);
	r6 = D(r6, s0_0_0, 0x1F020906, 0xFC130FFC, 0x0102F901, 0x05040402);
	r7 = D(r7, s0_0_0, 0xE1F3E711, 0xFAFCFCF4, 0x0021F535, 0x1F08FFF0);
	r0 = D(r0, s0_0_1, 0xF2022006, 0xDF0AFAEF, 0xD309FFD4, 0x17F30BEA);
	r1 = D(r1, s0_0_1, 0xCCC90A3A, 0xFEFB19ED, 0x24F60C09, 0x0605F7E0);
	r2 = D(r2, s0_0_1, 0xE30D00E2, 0xE30011F2, 0x370E10D8, 0xEDEC0118);
	r3 = D(r3, s0_0_1, 0xF8FE1F13, 0x0E05FE00, 0xF30BED11, 0x0A1AF403);
	r4 = D(r4, s0_0_1, 0xDB3501E7, 0x00000E0B, 0xE9F90BE9, 0x0016FFF0);
	r5 = D(r5, s0_0_1, 0xF7020603, 0xD6F003EB, 0x00F8090F, 0x2E010208);
	r6 = D(r6, s0_0_1, 0x081EFAEE, 0xED17F90C, 0x02E6FA00, 0xE711F10F);
	r7 = D(r7, s0_0_1, 0xFC1510E9, 0xF70207FF, 0xDC06F607, 0xCAEBFCF7);
	r0 = D(r0, s0_0_2, 0x05F014FA, 0x010116FE, 0xFFE4FF0E, 0xF4DC0707);
	r1 = D(r1, s0_0_2, 0x29CE0813, 0x120FF80C, 0x13DEE604, 0x041EF400);
	r2 = D(r2, s0_0_2, 0x2CF5FE1C, 0x03EFFDE9, 0x200F07E2, 0x0AE206ED);
	r3 = D(r3, s0_0_2, 0xE4F4F2F8, 0x01F703FB, 0xF2EAF0F8, 0xF4040C0F);
	r4 = D(r4, s0_0_2, 0xFFF4FF09, 0xEF0DF90D, 0xE5EAF125, 0xE501FCFB);
	r5 = D(r5, s0_0_2, 0x06F7FA05, 0xEB111702, 0x06F7EBFB, 0xFB08F8CE);
	r6 = D(r6, s0_0_2, 0x1116F4E8, 0x050FF2FE, 0x00F60904, 0x06FFF105);
	r7 = D(r7, s0_0_2, 0xF506DD00, 0xFD17FFE9, 0xF8F6F318, 0xE91311FE);
	r0 = D(r0, s0_1_0, 0xEAFA0AE9, 0xFE1EF31D, 0x060BF821, 0xEC0EED3D);
	r1 = D(r1, s0_1_0, 0x22FE03FC, 0xEDE9FEF1, 0x1211F803, 0x12020719);
	r2 = D(r2, s0_1_0, 0x24BBFD07, 0xE4EF0DEE, 0xEFB711EB, 0xD4E502F3);
	r3 = D(r3, s0_1_0, 0x0EF502FD, 0xF420EA1B, 0xFD0CFCF6, 0x141B001C);
	r4 = D(r4, s0_1_0, 0xFE15FA17, 0xF900F7F6, 0xE5DD0BE4, 0x0E000114);
	r5 = D(r5, s0_1_0, 0x0406E402, 0xEA0500FC, 0xF70804FB, 0x331F10E7);
	r6 = D(r6, s0_1_0, 0x04FC3318, 0xAC16F605, 0xFBF705E0, 0xFF0003E4);
	r7 = D(r7, s0_1_0, 0xDBF40105, 0x0AFA13F4, 0xFD141522, 0x040D0B12);
	r0 = D(r0, s0_1_1, 0x1421E143, 0xCBF0E4F5, 0xF5FAF9FF, 0xFF111203);
	r1 = D(r1, s0_1_1, 0x0116F201, 0xF7FF0022, 0x1CF905F2, 0x09F905F3);
	r2 = D(r2, s0_1_1, 0xF0B1F224, 0xE127051A, 0xC9DDF00E, 0xFC121DE8);
	r3 = D(r3, s0_1_1, 0x0CFDF716, 0xF4050AF3, 0x14BE2F90, 0xFBF3CEEA);
	r4 = D(r4, s0_1_1, 0xEB050A01, 0xFE0524EE, 0x06B80EE3, 0xD217F204);
	r5 = D(r5, s0_1_1, 0x2B1DBA23, 0xE0F90E09, 0xC3F724F7, 0xEEF70534);
	r6 = D(r6, s0_1_1, 0x220BF506, 0x0E2509F4, 0x000B20F8, 0x09CE4DDE);
	r7 = D(r7, s0_1_1, 0x22F524F1, 0xF3F419F7, 0xDBE20AB8, 0x81FAEE39);
	r0 = D(r0, s0_1_2, 0x0EF503E0, 0x1DF40CF3, 0x270218DF, 0xF5F2F8FC);
	r1 = D(r1, s0_1_2, 0x550402DF, 0x1109140D, 0x05F609D4, 0xF9D5F4FD);
	r2 = D(r2, s0_1_2, 0xF7FF11E9, 0xE8FBE811, 0x15F9000F, 0xEB02052B);
	r3 = D(r3, s0_1_2, 0xF1FD12F0, 0xFFF7F8F0, 0x0AC01104, 0xF4E3F4F9);
	r4 = D(r4, s0_1_2, 0xFA19F626, 0x08FDF31F, 0x1C0D07ED, 0x1412FA00);
	r5 = D(r5, s0_1_2, 0xF418CAF7, 0x0516DE42, 0xFA20130E, 0xE509DF13);
	r6 = D(r6, s0_1_2, 0x100003FB, 0xF2F5152D, 0xF6F90BF3, 0x04EB1208);
	r7 = D(r7, s0_1_2, 0x04F31208, 0xEA18F731, 0x06A6E025, 0x56250FFD);
	r0 = D(r0, s0_2_0, 0xF8EDFEF9, 0x070AFDFB, 0x0AFD0528, 0x1D1B15C5);
	r1 = D(r1, s0_2_0, 0xD80C0707, 0xF60402FD, 0x111B13EF, 0x02FAFE0F);
	r2 = D(r2, s0_2_0, 0xE911F9EA, 0x1603E9F5, 0x1C2DFEF3, 0xE7FA15F2);
	r3 = D(r3, s0_2_0, 0x1BF5F113, 0xFD09FEF7, 0x040E0109, 0x121AF904);
	r4 = D(r4, s0_2_0, 0xE0FFFC1E, 0xFF06F905, 0x3501FA13, 0xFA01FB14);
	r5 = D(r5, s0_2_0, 0x1606D708, 0x4DF003F7, 0xFBE80BE7, 0xC909FDF8);
	r6 = D(r6, s0_2_0, 0xFBDBFEF1, 0xD21DFBA6, 0x0AFCF80A, 0x09FDFFFA);
	r7 = D(r7, s0_2_0, 0xF90707FF, 0xF914FEFC, 0x1123F119, 0x0EEE060A);
	r0 = D(r0, s0_2_1, 0x12F90EF9, 0x18FD00F2, 0x000200EE, 0xCBF00310);
	r1 = D(r1, s0_2_1, 0x0EFAEB0E, 0xEAFFF712, 0x22DCE8F1, 0x0B0400D6);
	r2 = D(r2, s0_2_1, 0x9503010C, 0x20E6E11E, 0xA4E5F406, 0x0F26FA08);
	r3 = D(r3, s0_2_1, 0xD6F80CEC, 0xFFF0F619, 0x0008FD03, 0xD9DE13D7);
	r4 = D(r4, s0_2_1, 0x3AAA1693, 0xFDEDF3EB, 0xFED8F8F8, 0x03B018CF);
	r5 = D(r5, s0_2_1, 0x7FDEF0E4, 0x150011D0, 0xFFF80DF4, 0x0E050105);
	r6 = D(r6, s0_2_1, 0xE3F00BFD, 0x191515FC, 0x0348E15A, 0x00EF0FF5);
	r7 = D(r7, s0_2_1, 0x2401E929, 0x0D080F01, 0x080016B4, 0xEAD20EFF);
	r0 = D(r0, s0_2_2, 0x03CDF1EF, 0xF510001D, 0x100A0D03, 0x122BEF11);
	r1 = D(r1, s0_2_2, 0x1D09E1F4, 0xE70E0C07, 0xD70C07F0, 0xF1E71409);
	r2 = D(r2, s0_2_2, 0x271AEDF3, 0x1BF91FFD, 0x1AF806F1, 0x0EF4FCD8);
	r3 = D(r3, s0_2_2, 0x000204ED, 0xF813FC03, 0xF51203FB, 0xE2FBFC10);
	r4 = D(r4, s0_2_2, 0x11F1FE34, 0xFCEB24ED, 0x161411F2, 0x199F19E7);
	r5 = D(r5, s0_2_2, 0x2AF0D4FF, 0xFBF60CF1, 0xF70B0301, 0xF42F0201);
	r6 = D(r6, s0_2_2, 0xEDDDF9FF, 0x0B24FBDF, 0xFA16F7ED, 0x07F8F80F);
	r7 = D(r7, s0_2_2, 0xEC0111ED, 0x1E050907, 0x540F0A0D, 0x0282EA96);
	r0 = D(r0, s1_0_0, 0x140BF431, 0xEC1DFE81, 0xC9DBD520, 0xEA0FFF1F);
	r1 = D(r1, s1_0_0, 0x1BEF30E3, 0xCD0911DB, 0xE4000BE9, 0xFC05F2ED);
	r2 = D(r2, s1_0_0, 0xBBF7F481, 0xF8F7F417, 0x5504F138, 0xDC0DFD40);
	r3 = D(r3, s1_0_0, 0xF113092D, 0xE708FCF4, 0x090C0BFD, 0x12FE0E5D);
	r4 = D(r4, s1_0_0, 0x2E14FF17, 0x01FE19EC, 0xBAFFD022, 0xD410F21B);
	r5 = D(r5, s1_0_0, 0x02FCF84F, 0xADF6F8F0, 0x9F0AEED6, 0xDD04CC63);
	r6 = D(r6, s1_0_0, 0x0615FFC5, 0xEB0ADEF9, 0xF6000115, 0x0D0BF102);
	r7 = D(r7, s1_0_0, 0xE702E3F8, 0xFDFA1F25, 0x7FD9A8FC, 0x0A14FE41);
	r0 = D(r0, s1_0_1, 0xFB1403E9, 0x01F40781, 0x0F09FA27, 0xF40E05C4);
	r1 = D(r1, s1_0_1, 0x22C4F5C8, 0x09F5EA81, 0x000B0DA9, 0x22FDFF10);
	r2 = D(r2, s1_0_1, 0xD1B2F356, 0xFB05FBF7, 0xF8E9EC04, 0xC91E13B2);
	r3 = D(r3, s1_0_1, 0xE52018A2, 0xF60AFF06, 0x0A17FD35, 0x10EE0A13);
	r4 = D(r4, s1_0_1, 0x031D1381, 0x19F3F4D3, 0x29EDC2FC, 0x100AFE17);
	r5 = D(r5, s1_0_1, 0x15FB03A2, 0xF2D9131D, 0xEBF1FB1E, 0x15271DFF);
	r6 = D(r6, s1_0_1, 0xF42E26F6, 0xB3EDE450, 0x000A06E6, 0xF6F80915);
	r7 = D(r7, s1_0_1, 0xC609E60F, 0xE21C06E8, 0x36F511F6, 0x030906EF);
	r0 = D(r0, s1_0_2, 0x200E0329, 0xF101F6E4, 0x25F8D8DA, 0xF3EB000C);
	r1 = D(r1, s1_0_2, 0xE515F52D, 0x01F1F5A9, 0x040E27EC, 0xEB0A130F);
	r2 = D(r2, s1_0_2, 0xFAFAF605, 0xE6041C07, 0x0C0E1D0F, 0xD6060024);
	r3 = D(r3, s1_0_2, 0x0C230081, 0x010A04F8, 0xF8FB05E3, 0x08E10F1F);
	r4 = D(r4, s1_0_2, 0xFDFFF381, 0xF8FB0413, 0xF6D7FDCD, 0xF3FDFEFC);
	r5 = D(r5, s1_0_2, 0xF8FF1308, 0xE7FEEF0E, 0xE3030201, 0x01FBD60B);
	r6 = D(r6, s1_0_2, 0x081313D9, 0xC8EBD7C3, 0x01FEFCF5, 0x06000817);
	r7 = D(r7, s1_0_2, 0x2511FEE4, 0xF9F506EE, 0xE3D10BDC, 0xEE0E16FF);
	r0 = D(r0, s1_1_0, 0x320DF3F4, 0xE6EE07E0, 0xC11F1CD3, 0x1E010E25);
	r1 = D(r1, s1_1_0, 0x2FFB05EE, 0xFEF70D01, 0x3DE2EE35, 0xCBFB06FC);
	r2 = D(r2, s1_1_0, 0xE8021A81, 0xED0FF717, 0xB5F4DA09, 0xF7FBF1DE);
	r3 = D(r3, s1_1_0, 0x401709F1, 0x290218E4, 0x0DE61CF1, 0x2CD7FA81);
	r4 = D(r4, s1_1_0, 0xEDEDFEE2, 0x14F1021A, 0x2E292BCF, 0xC228FDCA);
	r5 = D(r5, s1_1_0, 0x7F0EF029, 0x2E1C07B3, 0x062EF3B9, 0xC1F2B181);
	r6 = D(r6, s1_1_0, 0xA4FFE8E1, 0xFEF73346, 0xE0ECDE20, 0xF806170B);
	r7 = D(r7, s1_1_0, 0x0CFC161D, 0xF9E7D705, 0xD38FEFF6, 0x0FF6A1FB);
	r0 = D(r0, s1_1_1, 0xE626198C, 0xFEF60F15, 0xEA101CFC, 0xFA1D182B);
	r1 = D(r1, s1_1_1, 0x02E4B6A8, 0x1404F7B9, 0x380DE305, 0x5A21FCE3);
	r2 = D(r2, s1_1_1, 0x15BCFC4D, 0x3908C081, 0xE20A1DFD, 0x04FB0504);
	r3 = D(r3, s1_1_1, 0xFEDCCFAC, 0xFDFA01D9, 0x1302FFD8, 0xE5D8DB81);
	r4 = D(r4, s1_1_1, 0xD3DCF581, 0x0701D739, 0x292F0AB9, 0x02E704D1);
	r5 = D(r5, s1_1_1, 0x0E000AF0, 0x810DFD19, 0xE6080636, 0x2C0D1330);
	r6 = D(r6, s1_1_1, 0x14182981, 0x3C1121CA, 0x10FE16EC, 0xF508EEF1);
	r7 = D(r7, s1_1_1, 0xF6082CAB, 0x0609C3DB, 0x3D0EC1DD, 0xE605256E);
	r0 = D(r0, s1_1_2, 0x131310FE, 0x100419ED, 0x19F2F6DC, 0xCB13FDFC);
	r1 = D(r1, s1_1_2, 0xC40EFEF3, 0xD3F6F11E, 0xF6E2F05F, 0xEA00D300);
	r2 = D(r2, s1_1_2, 0x260612F7, 0x00D7DC81, 0xFFECEFEB, 0x1F07FBF4);
	r3 = D(r3, s1_1_2, 0xEBDEF481, 0x04F1F90F, 0xF115FB49, 0x09FA16CA);
	r4 = D(r4, s1_1_2, 0xF908F381, 0xFCF6E8E7, 0xFC18F2B6, 0x00FF09F1);
	r5 = D(r5, s1_1_2, 0x04020581, 0xE6EDE827, 0xDB0B14E1, 0xFF1CDB1F);
	r6 = D(r6, s1_1_2, 0x1E1DFE0D, 0x1E3DF21A, 0xF5F6F7FF, 0x05FDFFEA);
	r7 = D(r7, s1_1_2, 0xFAF2E825, 0xECE0F9DF, 0xFCF50EF4, 0x2DDB1A05);
	r0 = D(r0, s1_2_0, 0xFC060510, 0x00E903BE, 0xE2C3FF20, 0x1CE6E120);
	r1 = D(r1, s1_2_0, 0x02DCEE4C, 0x0A04FB07, 0x041208D9, 0x0000FAFB);
	r2 = D(r2, s1_2_0, 0x1DC10681, 0xD303E81F, 0xD00AFC0B, 0xFD21091D);
	r3 = D(r3, s1_2_0, 0x14F106D8, 0x0609060A, 0x060EF0EE, 0x100BFD95);
	r4 = D(r4, s1_2_0, 0x40CCFD28, 0x0007F4FD, 0x020402D0, 0x19F4FC13);
	r5 = D(r5, s1_2_0, 0xF9CDF24A, 0xF1140770, 0xDFEA022A, 0x4DE2E936);
	r6 = D(r6, s1_2_0, 0xDDE7D381, 0x32E30FA3, 0xEA180833, 0xFF03FF03);
	r7 = D(r7, s1_2_0, 0xE10704F1, 0x170B03DC, 0xDDDB30DF, 0x101D19D6);
	r0 = D(r0, s1_2_1, 0xEEFBF1F0, 0x0CB4E9DE, 0xFAF70330, 0x11F90DD9);
	r1 = D(r1, s1_2_1, 0x81AD81F9, 0x01FCEA37, 0xE41019D7, 0x28E10726);
	r2 = D(r2, s1_2_1, 0xF5F0EC6F, 0x0C13361A, 0xF8E7DAC1, 0x443BFD00);
	r3 = D(r3, s1_2_1, 0xFDE6FBAA, 0xF6FFFE45, 0x05E6012A, 0xFF26FED0);
	r4 = D(r4, s1_2_1, 0x1B060F81, 0xFA1118F1, 0xF4FC3029, 0x0E02F9DB);
	r5 = D(r5, s1_2_1, 0x1411FF02, 0x2B0609FD, 0x12011021, 0xDFD22FC2);
	r6 = D(r6, s1_2_1, 0xE5DAE181, 0xED141931, 0x06D514E3, 0xFCF0F5D9);
	r7 = D(r7, s1_2_1, 0x1A1B0C10, 0xDA811BE4, 0x08D7D92F, 0x1245DACB);
	r0 = D(r0, s1_2_2, 0x0401EF2B, 0xFEE9ECDC, 0x06E51411, 0x0102E22D);
	r1 = D(r1, s1_2_2, 0xDED50F02, 0xFDF9F205, 0x0817EF07, 0xF11D1D1D);
	r2 = D(r2, s1_2_2, 0x1CDBF8C8, 0x1C352302, 0x0C04F9EC, 0xEFEDF92E);
	r3 = D(r3, s1_2_2, 0xFDEC0A81, 0xF909FEE8, 0x001103E8, 0xFFF6E99C);
	r4 = D(r4, s1_2_2, 0x0CF40781, 0x100A11EA, 0x00F402F6, 0x12140B14);
	r5 = D(r5, s1_2_2, 0x0307FCE5, 0x021414D4, 0xEFF903EC, 0x410AEE19);
	r6 = D(r6, s1_2_2, 0x25FDF8B5, 0xE6E601BE, 0xF3EEFF33, 0x0400F620);
	r7 = D(r7, s1_2_2, 0xEEF3FDF6, 0x061E0581, 0x0220F6DC, 0x02D90830);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFBFBF8D5, 0x06F8FA13, 0xEC11FC09, 0x2323F5C1);
	r1 = D(r1, s0_0_0, 0x1611D630, 0xFEEEFE10, 0xF6271107, 0x10051109);
	r2 = D(r2, s0_0_0, 0xD0F0F142, 0x170EE2FD, 0xFF1112EE, 0xF8EF0CD1);
	r3 = D(r3, s0_0_0, 0x0FEDE3D3, 0x07F6040B, 0xF7F410FC, 0xDCF3F51F);
	r4 = D(r4, s0_0_0, 0x00EA0710, 0xFD0601FE, 0xE309EAF0, 0xFAF81811);
	r5 = D(r5, s0_0_0, 0x030102F8, 0xF8EAE5EE, 0xFF0103D2, 0x09F8F30D);
	r6 = D(r6, s0_0_0, 0x101AE81F, 0xEAD422FE, 0x03031500, 0xFD001700);
	r7 = D(r7, s0_0_0, 0xFEF105E3, 0x130DFA1E, 0x190000FF, 0x00EE081F);
	r0 = D(r0, s0_0_1, 0xF408FD15, 0xFC0AEED9, 0xDAF1F53E, 0xFD02DE20);
	r1 = D(r1, s0_0_1, 0xDE1481FD, 0xDDF6E602, 0xF00D0FF4, 0xE60E10F0);
	r2 = D(r2, s0_0_1, 0xECD20135, 0x0C1C02E6, 0x21F31CC5, 0x14F4EC00);
	r3 = D(r3, s0_0_1, 0xE210EF37, 0x00F9FE0D, 0x0515F80B, 0xF13616F1);
	r4 = D(r4, s0_0_1, 0x1CF2F92B, 0x011302F4, 0xF80F27E6, 0x05FE00DC);
	r5 = D(r5, s0_0_1, 0x02F4022B, 0x0CF11EAF, 0x01EBFD0B, 0x05E0FB0E);
	r6 = D(r6, s0_0_1, 0x1C05F9CC, 0xE71AF219, 0xEFF0F6F5, 0x101E1AFC);
	r7 = D(r7, s0_0_1, 0x0A09F92E, 0xF7E3F406, 0x04BE171E, 0xECC5F1DD);
	r0 = D(r0, s0_0_2, 0xFA02E8EF, 0xF009F5E2, 0xFE12EDFE, 0x000A1407);
	r1 = D(r1, s0_0_2, 0xF9AF2114, 0xE4D71003, 0xE601F5E2, 0x0C171BF0);
	r2 = D(r2, s0_0_2, 0x0203E130, 0xFADF08C8, 0xF005DA0A, 0xFFEAF113);
	r3 = D(r3, s0_0_2, 0x0305F920, 0x0EF5F304, 0x09002510, 0xDA08EB3C);
	r4 = D(r4, s0_0_2, 0x0FF4FFEE, 0xF40019EA, 0x0B272D0B, 0x16F8FA03);
	r5 = D(r5, s0_0_2, 0x08F4FEFF, 0x1A150618, 0x010604F2, 0xE6060AD2);
	r6 = D(r6, s0_0_2, 0xFE09F8F0, 0xFC30FBC3, 0x040204FD, 0xE8FB08FC);
	r7 = D(r7, s0_0_2, 0x10F9110A, 0xF7FE0016, 0xE116060C, 0xF1FFEFFB);
	r0 = D(r0, s0_1_0, 0x0FF82504, 0x0F1C1DFA, 0xFD031611, 0xF8C1F3DE);
	r1 = D(r1, s0_1_0, 0xEA1B04F7, 0x04101608, 0xFDF7EF32, 0x0B02EAF6);
	r2 = D(r2, s0_1_0, 0x07F60082, 0x1502F80C, 0x1E0CEB1A, 0x000EF1F2);
	r3 = D(r3, s0_1_0, 0x02E9FE1D, 0x08FD1CF8, 0xED00DE12, 0x10F2240A);
	r4 = D(r4, s0_1_0, 0xFE08110D, 0x06EEEE01, 0x06FCD1F4, 0xF1EA07FC);
	r5 = D(r5, s0_1_0, 0xFB0908FB, 0xEBFC0202, 0xF8FB0402, 0x1F01F224);
	r6 = D(r6, s0_1_0, 0x0E04DEFC, 0x0001115F, 0x07FDE42C, 0xF8F9CC01);
	r7 = D(r7, s0_1_0, 0xF814EDD6, 0xFB06E6F9, 0x1819F4FD, 0xC3F322EE);
	r0 = D(r0, s0_1_1, 0x0106F70C, 0xF1FDFCEB, 0x3DF3E6C0, 0x03EE1628);
	r1 = D(r1, s0_1_1, 0xE926F9AB, 0x0DFAE401, 0x08FC070B, 0x0918EE02);
	r2 = D(r2, s0_1_1, 0x060EF9F5, 0xE7172104, 0xEA17FF0E, 0x1A1CFEE3);
	r3 = D(r3, s0_1_1, 0xEFFCED21, 0xFC22F1E8, 0x1A03F909, 0x2C06F806);
	r4 = D(r4, s0_1_1, 0xF0F323FB, 0xFBFCE013, 0x0BDCE104, 0x15EE0B0B);
	r5 = D(r5, s0_1_1, 0xF6F417FF, 0x0E141ED6, 0x0912FAE6, 0xF416E9DE);
	r6 = D(r6, s0_1_1, 0xEAE317F6, 0xFB23DCFE, 0x03E5E7F9, 0x1B0200FC);
	r7 = D(r7, s0_1_1, 0x1FF614FF, 0x00F100E4, 0x398111E6, 0x0C1B19EB);
	r0 = D(r0, s0_1_2, 0x1407F2E3, 0x14EBEF46, 0x20FDF70D, 0xF00CE8EB);
	r1 = D(r1, s0_1_2, 0xFB2C1306, 0x0FF42110, 0x00FEDF0E, 0xF8D70626);
	r2 = D(r2, s0_1_2, 0x0D0E292C, 0x07FB000C, 0x0A1010E0, 0x03D917F6);
	r3 = D(r3, s0_1_2, 0xF8C91A08, 0xFEFBFAFC, 0xEC05F81E, 0xF9E7262C);
	r4 = D(r4, s0_1_2, 0xF90C05E1, 0xFADE1D01, 0x0FC80EED, 0xE91CF6FF);
	r5 = D(r5, s0_1_2, 0xFE1DFACE, 0xEC251BD3, 0x13F601FD, 0x120FFE06);
	r6 = D(r6, s0_1_2, 0xFFFA02F7, 0x0E0AF623, 0x02FD0304, 0xFF0CEF07);
	r7 = D(r7, s0_1_2, 0xE0F8F61C, 0x09F91A02, 0xED040FD4, 0xF20E02C1);
	r0 = D(r0, s0_2_0, 0x050AE8F4, 0xF40B0B09, 0xFA28EC3D, 0x16E20FFB);
	r1 = D(r1, s0_2_0, 0x0126DFDB, 0x0DF40CFF, 0xF8121B1F, 0x1F0BF400);
	r2 = D(r2, s0_2_0, 0x12F5F505, 0x04020007, 0xF2E6DDFC, 0xF905FC02);
	r3 = D(r3, s0_2_0, 0x1D17F708, 0x0D0122FC, 0x12F707F8, 0x0B06D5F7);
	r4 = D(r4, s0_2_0, 0xEDF3F0F8, 0xFB010E12, 0x100A0C0C, 0x0810FA02);
	r5 = D(r5, s0_2_0, 0x0B15EA0A, 0x00EFF1FB, 0xF80C0B00, 0xD5960BB7);
	r6 = D(r6, s0_2_0, 0xFA060118, 0xD2E503FC, 0xF9F010F3, 0xF00B0E03);
	r7 = D(r7, s0_2_0, 0xFFE50023, 0xF2F202F9, 0xEEF1D8EF, 0xDD0FD714);
	r0 = D(r0, s0_2_1, 0xFEFE1E0D, 0xEEE606DD, 0xE21E0BC7, 0xF809FD09);
	r1 = D(r1, s0_2_1, 0x0940EED9, 0x09E7F602, 0x251BFEDD, 0x08FBECF9);
	r2 = D(r2, s0_2_1, 0x160F1A0A, 0xE9F8041F, 0xF80FF7E7, 0xDCF7D901);
	r3 = D(r3, s0_2_1, 0x0FEA1100, 0xE118E7FF, 0x0603F20E, 0x0EF7EFD6);
	r4 = D(r4, s0_2_1, 0x3325ECF6, 0xE60BDC01, 0xE603EAED, 0xEEFFF316);
	r5 = D(r5, s0_2_1, 0xFDE4FEFA, 0x19F7D0FF, 0x0D0FFDF3, 0xE7D002E5);
	r6 = D(r6, s0_2_1, 0xE9191412, 0x24F1CF0C, 0x07FF0AF8, 0x08F2F20E);
	r7 = D(r7, s0_2_1, 0x24EBECFC, 0x06FAE4FB, 0x0DEEFDDA, 0x14FEFF85);
	r0 = D(r0, s0_2_2, 0x0A0A0408, 0x0F04FF02, 0xF90E12DB, 0xEA011E12);
	r1 = D(r1, s0_2_2, 0xF82C1AC9, 0x0B0AE908, 0xF9FDEB08, 0xE70AF2F8);
	r2 = D(r2, s0_2_2, 0xE7270AE7, 0x1026FDD4, 0xD40805D3, 0xF9B71FE5);
	r3 = D(r3, s0_2_2, 0xFECB0916, 0xF9F2FE0C, 0x00FD02F9, 0x150BF3E2);
	r4 = D(r4, s0_2_2, 0xD60EF5F2, 0x17E113F1, 0x03D201EB, 0x0719FAEF);
	r5 = D(r5, s0_2_2, 0xF80CFC00, 0x0403F905, 0xFDFCFAFE, 0xED10DDF4);
	r6 = D(r6, s0_2_2, 0xF6311ADC, 0x26CBED09, 0xFE000B05, 0xFC07000D);
	r7 = D(r7, s0_2_2, 0xFAB9F0F4, 0x06181D0A, 0xDD0D05FA, 0x3F060C43);
	r0 = D(r0, s1_0_0, 0x04FB1AEA, 0x0BD90F11, 0xE2F71D90, 0x453F1639);
	r1 = D(r1, s1_0_0, 0xE78CED81, 0xFFFE03DE, 0xF046DCD7, 0xFDEE0C07);
	r2 = D(r2, s1_0_0, 0xAE810B05, 0xFB2A21DF, 0x2D1F9F10, 0x38D10F0C);
	r3 = D(r3, s1_0_0, 0xF4B8F8F4, 0x06E107DF, 0x0909F6F9, 0xFCC31502);
	r4 = D(r4, s1_0_0, 0x01D6F3CB, 0xEEF1FCF5, 0xF1FFF304, 0xFFFAF5F4);
	r5 = D(r5, s1_0_0, 0x080601F7, 0x421E10FD, 0x1F41B715, 0xBF0EE9E6);
	r6 = D(r6, s1_0_0, 0xF4E1DB0B, 0xDF814B17, 0x02F50C01, 0xFAF4FCFB);
	r7 = D(r7, s1_0_0, 0x16F00D28, 0xF4F72112, 0xE011FE21, 0x04F3F1DC);
	r0 = D(r0, s1_0_1, 0xEEBDD3C3, 0x35CE29EE, 0x2E15023A, 0x13CB0205);
	r1 = D(r1, s1_0_1, 0xC00F4151, 0x17F92505, 0x4AE5F24D, 0xF109ECF1);
	r2 = D(r2, s1_0_1, 0xCF7F1F81, 0xFFEAE7E7, 0xFBF01401, 0x348104E9);
	r3 = D(r3, s1_0_1, 0x1E7F2FB7, 0xFD1EF11E, 0xED0A0712, 0x04AB36E6);
	r4 = D(r4, s1_0_1, 0xF6F0FC1E, 0x1A220304, 0x050E2B0C, 0xE0CB04E6);
	r5 = D(r5, s1_0_1, 0x15671000, 0x05ACED31, 0xDED5FEF1, 0x17D2B929);
	r6 = D(r6, s1_0_1, 0xD032C9ED, 0x0023EFFA, 0xF1310906, 0xFCE400F6);
	r7 = D(r7, s1_0_1, 0xF919EA2C, 0x2A3D8CF5, 0x24D6E2EE, 0xFE3F01F6);
	r0 = D(r0, s1_0_2, 0x05C9FAF3, 0xBD10FD1D, 0x20F805A2, 0xD0892014);
	r1 = D(r1, s1_0_2, 0x013B9C1D, 0x2ED61DA8, 0x0362FD08, 0x19DEFE24);
	r2 = D(r2, s1_0_2, 0x8181C881, 0x2F3908E4, 0xD4DD260D, 0x14471A5D);
	r3 = D(r3, s1_0_2, 0x01AC1213, 0x0804FA17, 0xF518FBF7, 0xF5201CB9);
	r4 = D(r4, s1_0_2, 0x0881F49B, 0xF2FA22C6, 0x16140AFA, 0x04BE10E7);
	r5 = D(r5, s1_0_2, 0xFA1A0377, 0x206F1552, 0xF8270B20, 0xE3813A1B);
	r6 = D(r6, s1_0_2, 0x2B1A0E19, 0x13D30FC1, 0x03FA0E19, 0x0012FCF7);
	r7 = D(r7, s1_0_2, 0x02581038, 0xE99BFF09, 0x2531EFFA, 0xFBA2F866);
	r0 = D(r0, s1_1_0, 0xEEFFF2F2, 0x081BC82F, 0x3E040FBB, 0xE6FBDE02);
	r1 = D(r1, s1_1_0, 0xDC20CC5E, 0x00FFE2E9, 0x28EAC635, 0x1E24F3EA);
	r2 = D(r2, s1_1_0, 0xF5947F24, 0x041EE6FD, 0x1304E4CF, 0x2809C704);
	r3 = D(r3, s1_1_0, 0x070AFAF7, 0xFE1E0613, 0x081A00F0, 0x17EB2014);
	r4 = D(r4, s1_1_0, 0x111B1F0B, 0xFE0A10F8, 0x1608F4FF, 0x061AEE02);
	r5 = D(r5, s1_1_0, 0x030A8FF7, 0xD5F2F90C, 0x350C152C, 0x61AB19D5);
	r6 = D(r6, s1_1_0, 0x10F129FD, 0x08F302E4, 0xEF0100FF, 0x13FCF6FD);
	r7 = D(r7, s1_1_0, 0x28FB0706, 0xFDE91CF6, 0x16E6ED02, 0x280D4CEE);
	r0 = D(r0, s1_1_1, 0xFE1DFD32, 0xF02BE2FD, 0xBA162609, 0x0509D50C);
	r1 = D(r1, s1_1_1, 0xA4C68118, 0xDCF2B5F6, 0x0B261ED5, 0xF308120A);
	r2 = D(r2, s1_1_1, 0x245EB4E4, 0xE4EE3901, 0x714005F7, 0xFCDEBA0E);
	r3 = D(r3, s1_1_1, 0x371E15E6, 0x1BC804BF, 0xE5DE16FD, 0xDA31E315);
	r4 = D(r4, s1_1_1, 0xEC15FDE5, 0x06E0FAD0, 0x23E23CF9, 0x0E30FC19);
	r5 = D(r5, s1_1_1, 0x251B0822, 0xEDB043C5, 0x1F0A04F0, 0x054CC32D);
	r6 = D(r6, s1_1_1, 0x25F4FC17, 0x1200FBA5, 0x1AB301F4, 0x06FB08EE);
	r7 = D(r7, s1_1_1, 0x111302AF, 0x0A12790D, 0xD4E5251D, 0xDC691D18);
	r0 = D(r0, s1_1_2, 0xFFD4080D, 0xE6F603E8, 0xC54FFAC6, 0x3E171A0F);
	r1 = D(r1, s1_1_2, 0xF781AF89, 0x2F0BDE04, 0x1613EEE1, 0x0C350CEA);
	r2 = D(r2, s1_1_2, 0x2C14F71F, 0x19BFDDCF, 0xE905E5E2, 0xEC1FFAF9);
	r3 = D(r3, s1_1_2, 0x462E19CB, 0x00F70A07, 0x060901FC, 0x0D1C0C06);
	r4 = D(r4, s1_1_2, 0xE6230313, 0xE342F728, 0x01ECF72C, 0xFA0AE9B1);
	r5 = D(r5, s1_1_2, 0x0CFD0405, 0x3433AE19, 0x19F40002, 0x0E2EEE0E);
	r6 = D(r6, s1_1_2, 0x0D130F02, 0xDE481C02, 0x01C70E24, 0x0A0B0101);
	r7 = D(r7, s1_1_2, 0x0E05D30F, 0xF31EE413, 0xF624201F, 0x11C113CC);
	r0 = D(r0, s1_2_0, 0xFF0D0201, 0x19F62D0D, 0xFF01D5E4, 0x5BF30EF8);
	r1 = D(r1, s1_2_0, 0xC7FCF62F, 0x00090706, 0x25F1BBCB, 0x0A0CEEFC);
	r2 = D(r2, s1_2_0, 0x01810B3E, 0x01F81B05, 0x0BF6F61F, 0xE507FE07);
	r3 = D(r3, s1_2_0, 0x0EF9EA0A, 0x1203FE04, 0x08F3EFFB, 0x19EBF409);
	r4 = D(r4, s1_2_0, 0xE90D0B08, 0x0708FF01, 0xD913E5FA, 0xF0F4000E);
	r5 = D(r5, s1_2_0, 0xE8011C04, 0xF51707EE, 0x57120D15, 0x3CED6309);
	r6 = D(r6, s1_2_0, 0xCCFC01FF, 0x1C1DF007, 0x09050C0B, 0xF208F407);
	r7 = D(r7, s1_2_0, 0x0E161A06, 0x1A04CE0D, 0xD6CE7F58, 0xCDFCF4C1);
	r0 = D(r0, s1_2_1, 0xFFF60910, 0xEDECF6F4, 0xC6E50524, 0xFF3CE617);
	r1 = D(r1, s1_2_1, 0x0F17872D, 0x10083005, 0x2301EAF2, 0x2804FF0A);
	r2 = D(r2, s1_2_1, 0x1F93DD07, 0x0221F4F7, 0xDE252709, 0x19E82206);
	r3 = D(r3, s1_2_1, 0x14001D14, 0xEEF712F9, 0x0FFE0EFD, 0x0D0508ED);
	r4 = D(r4, s1_2_1, 0x01FE0E03, 0x07FAFEEF, 0x120817F9, 0xC1F034FD);
	r5 = D(r5, s1_2_1, 0x470BF6F9, 0x03DFCB37, 0xC7F31EFA, 0xFA024835);
	r6 = D(r6, s1_2_1, 0xE4F5480B, 0xE6E11F37, 0x0AFCF212, 0x0AFAFB07);
	r7 = D(r7, s1_2_1, 0xF106FA0C, 0x07EC3B0B, 0xED0541CC, 0xD932E2DD);
	r0 = D(r0, s1_2_2, 0x06FBF0FC, 0xFDF0D809, 0x14E50131, 0xEDF7D115);
	r1 = D(r1, s1_2_2, 0x0AE1FE17, 0xF1E0160B, 0x1108D707, 0x16F500F6);
	r2 = D(r2, s1_2_2, 0x01F104E9, 0x45F7D5F2, 0xE1CF1809, 0x8C12EA09);
	r3 = D(r3, s1_2_2, 0xEF151911, 0xFF0C0AF2, 0x04FC0503, 0x01F2E807);
	r4 = D(r4, s1_2_2, 0x07EAF519, 0x2F0313FE, 0x1F11EEF4, 0x0905FBDB);
	r5 = D(r5, s1_2_2, 0xF6F1FA03, 0xD1465FFB, 0x0E050509, 0xF75007D5);
	r6 = D(r6, s1_2_2, 0xE3F412D1, 0x3E102AEE, 0xF4040601, 0x01F8F6F5);
	r7 = D(r7, s1_2_2, 0xF0E2232F, 0xC1F40600, 0xCFFAB937, 0xEC01EC35);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-2.545e-02, 1.212e-01, 4.869e-03, -2.964e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.208e-01, -8.033e-02, 2.092e-02, 4.016e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(7.007e-02, -7.691e-03, -3.323e-02, -1.425e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-3.699e-02, 9.366e-02, -5.508e-03, 1.146e-01);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(5.985e-03, -5.155e-02, -1.466e-02, 3.336e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-3.954e-01, -5.974e-02, -1.851e-01, -4.247e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-2.400e-02, -7.124e-03, -1.409e-02, -8.482e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(1.529e-02, -8.695e-02, 3.607e-02, -4.568e-04);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-DS-conv2
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF6FDFD0C, 0xFD060506, 0x0410FA09, 0xDE01F905);
	r1 = D(r1, s0_0_0, 0xFF00FFFE, 0xFC0401FB, 0x01FC030C, 0x07EBF9FE);
	r2 = D(r2, s0_0_0, 0x0401E70D, 0xFEF60A0A, 0xFDFB14F6, 0xF915F2F9);
	r3 = D(r3, s0_0_0, 0xEBFD07F7, 0x03EF0204, 0x05E509F4, 0x0705F608);
	r4 = D(r4, s0_0_0, 0x0FFFF906, 0x00221106, 0xEE0A0904, 0x12F4F10E);
	r5 = D(r5, s0_0_0, 0xF40307F8, 0x0403FAFC, 0x00F1FFF9, 0xFFFCDD0E);
	r6 = D(r6, s0_0_0, 0xF8000AFF, 0x01ED0FE8, 0x09F9F7FF, 0xF50018FA);
	r7 = D(r7, s0_0_0, 0xF002FAF6, 0x05E2F80B, 0x09040A0B, 0x2107EF09);
	r0 = D(r0, s0_0_1, 0xFCF4F0FD, 0xFB04FB01, 0x010505FA, 0x11F2CFFE);
	r1 = D(r1, s0_0_1, 0x01FE01FE, 0x03090E06, 0x03FE01F6, 0x12F61016);
	r2 = D(r2, s0_0_1, 0xFFF318F0, 0xF4FFF719, 0x01F60314, 0x0CF9F108);
	r3 = D(r3, s0_0_1, 0xE9EA0301, 0xF21F0108, 0x17F8FC01, 0x03EAF100);
	r4 = D(r4, s0_0_1, 0xDB240A12, 0x1FE00904, 0x05F7060A, 0x0AF3EC01);
	r5 = D(r5, s0_0_1, 0xFAF9F1FF, 0x07FD04EE, 0xF80C0BF1, 0xD417CEF5);
	r6 = D(r6, s0_0_1, 0xF1D2EA0C, 0x0AE0FD1D, 0xFFF4ED03, 0x01EDF507);
	r7 = D(r7, s0_0_1, 0x1801D5E1, 0x02F3FFF7, 0x23EAED04, 0xED0F0BF4);
	r0 = D(r0, s0_0_2, 0x05ED0D08, 0xF5070A00, 0x0CF5E6FF, 0x111A0513);
	r1 = D(r1, s0_0_2, 0xF603FF04, 0x04FF1000, 0x08FD0001, 0x09EFEE08);
	r2 = D(r2, s0_0_2, 0x07F8E60B, 0xEA06160E, 0x26FB0212, 0xF2EEFA08);
	r3 = D(r3, s0_0_2, 0x16161012, 0x10070906, 0x0CEB0C01, 0xFD0304F7);
	r4 = D(r4, s0_0_2, 0x100DFB0C, 0x06F706FD, 0xF30D0EFE, 0xFBE5DF13);
	r5 = D(r5, s0_0_2, 0xFD17000E, 0xF2F70001, 0x1CEB0CFD, 0xEDFD13F6);
	r6 = D(r6, s0_0_2, 0xF6121DF7, 0x02EE1709, 0xF708F613, 0x06FF1E05);
	r7 = D(r7, s0_0_2, 0xE311F6E7, 0xFEDF050F, 0x26E4E802, 0xE705EF07);
	r0 = D(r0, s0_1_0, 0xFF0C0F0E, 0xFAFEF402, 0xFE0F0A03, 0x001C1015);
	r1 = D(r1, s0_1_0, 0x0306FF04, 0xF5FE0BFD, 0xF512151B, 0x090903FE);
	r2 = D(r2, s0_1_0, 0x0000D4F8, 0x0FF7D909, 0xF8F306D8, 0x0AFEF2DB);
	r3 = D(r3, s0_1_0, 0x10ECFFFD, 0x0A2305EE, 0x0B0A0A11, 0xFCF004FC);
	r4 = D(r4, s0_1_0, 0xF607DFE8, 0x0EE90E0A, 0xF42011E8, 0xE8F5E006);
	r5 = D(r5, s0_1_0, 0x04ECEFED, 0xFFF907FA, 0x15F3CDC6, 0xF621FEFE);
	r6 = D(r6, s0_1_0, 0xFD00ED09, 0x0A26A1EF, 0x1EF5FDE8, 0xF8FE00FB);
	r7 = D(r7, s0_1_0, 0x0DF6FF18, 0x04060324, 0xFC04060F, 0x1327FB01);
	r0 = D(r0, s0_1_1, 0x06E918F9, 0xFFF3F6FE, 0xFEEF0FE3, 0xC9FF0401);
	r1 = D(r1, s0_1_1, 0x040202F5, 0xFBFBFF0C, 0x050218F9, 0x0B0A042F);
	r2 = D(r2, s0_1_1, 0xE20CEC13, 0xDB21EF0E, 0xF4100A22, 0xF204FBFB);
	r3 = D(r3, s0_1_1, 0x0B18C8FB, 0xF7E71024, 0xF310FFFC, 0x04FF2916);
	r4 = D(r4, s0_1_1, 0x23F3EAF4, 0xEFF702E5, 0x00E30207, 0x06F700F5);
	r5 = D(r5, s0_1_1, 0xEDED0D03, 0x0107F43E, 0x052211EC, 0xF018F921);
	r6 = D(r6, s0_1_1, 0x13F7E305, 0x072F22FC, 0x11F41803, 0x0224F40E);
	r7 = D(r7, s0_1_1, 0x0EEEF801, 0x0607FECE, 0x0701100C, 0x1EFE110E);
	r0 = D(r0, s0_1_2, 0x060C0804, 0xEDFEF101, 0xF0021713, 0x301AEF13);
	r1 = D(r1, s0_1_2, 0x02FF0401, 0xF101F10D, 0xF805FB00, 0xF30521F5);
	r2 = D(r2, s0_1_2, 0xECFE0EE9, 0x13F9F203, 0xFEEBF909, 0x07010A06);
	r3 = D(r3, s0_1_2, 0x2103D301, 0xF3E90309, 0x0DFBFB18, 0xF7091C0A);
	r4 = D(r4, s0_1_2, 0x11F3F811, 0xF1020FF2, 0x0604F60A, 0xF5F8F602);
	r5 = D(r5, s0_1_2, 0x07FCFCF8, 0x0601F90D, 0xE3FA0504, 0xF1E8F6CD);
	r6 = D(r6, s0_1_2, 0xDD02EDFA, 0xFC001B1D, 0xF40F06F5, 0x1A14EEF9);
	r7 = D(r7, s0_1_2, 0x1DE90306, 0x0419E2F2, 0x0C051DE1, 0xE7DCFF0F);
	r0 = D(r0, s0_2_0, 0xF6F90417, 0x000407FD, 0xFFE90302, 0xFF2A14EE);
	r1 = D(r1, s0_2_0, 0x0205FF02, 0xFAFF0201, 0xFAF80EFD, 0x100802FD);
	r2 = D(r2, s0_2_0, 0xFCF917EE, 0x1C0D03FC, 0x21070108, 0xFE091302);
	r3 = D(r3, s0_2_0, 0xFF11E0F2, 0x050FF605, 0x00130904, 0x0A00E202);
	r4 = D(r4, s0_2_0, 0xF8FE0AF2, 0xFD0301FD, 0xF8FC0A00, 0x1E240502);
	r5 = D(r5, s0_2_0, 0x0D0704FE, 0xFE000006, 0x041BE1E5, 0x140EF4FD);
	r6 = D(r6, s0_2_0, 0x02181210, 0x18F0F7FE, 0xFCFF04FA, 0xF3FE0E09);
	r7 = D(r7, s0_2_0, 0xF906FDE2, 0x01FBFF05, 0xEBEA0A1D, 0x02070425);
	r0 = D(r0, s0_2_1, 0x0105FDEC, 0xFA01F604, 0x090CFC17, 0xFBB9A8EC);
	r1 = D(r1, s0_2_1, 0x01FE01FF, 0xFCFE0E19, 0xF6F7051C, 0xF728F117);
	r2 = D(r2, s0_2_1, 0xF8FE1B13, 0x0CF5F924, 0x0A0201F9, 0x1716EBCE);
	r3 = D(r3, s0_2_1, 0xFD28BD07, 0xF7D4F5ED, 0xFE140DED, 0xE308F4EF);
	r4 = D(r4, s0_2_1, 0x07F1F9FF, 0x050F08F6, 0x04E9FCEB, 0x14120908);
	r5 = D(r5, s0_2_1, 0x07F31206, 0x000003EF, 0x02EDD9E3, 0x0AEE0206);
	r6 = D(r6, s0_2_1, 0x1E04DDFC, 0xE91BDDCD, 0x01F00BFF, 0x06E50704);
	r7 = D(r7, s0_2_1, 0xFC1CF8FE, 0x0301F30D, 0xF3040C06, 0xF9081EB5);
	r0 = D(r0, s0_2_2, 0x0B03FAFB, 0x09FFF9F7, 0xF810F610, 0xF4DE0908);
	r1 = D(r1, s0_2_2, 0x00FF0603, 0xF4FA04FD, 0xFC02F7FF, 0xF3FAEFFF);
	r2 = D(r2, s0_2_2, 0xEEF30905, 0xFAF209FF, 0x0A100904, 0xE4F20401);
	r3 = D(r3, s0_2_2, 0x15E4FC06, 0x1103FC08, 0x09033D04, 0x06F0E6D5);
	r4 = D(r4, s0_2_2, 0xFAFF120E, 0xEF05FEF9, 0xF60712FB, 0xE7020B0C);
	r5 = D(r5, s0_2_2, 0x06020B14, 0xFAFFFD04, 0xFB0A0F0F, 0x160504E6);
	r6 = D(r6, s0_2_2, 0x0A04D8E1, 0xEDDE0EF9, 0xE804EE09, 0x080BF3FF);
	r7 = D(r7, s0_2_2, 0xFD063517, 0xF812FEE7, 0xF5121008, 0x01E1FEEC);
	r0 = D(r0, s1_0_0, 0xFBFC0DEE, 0xFDF8FEE8, 0xF8FFFFE7, 0x0B1D23E3);
	r1 = D(r1, s1_0_0, 0x0101FBFF, 0x05001006, 0xF70605CB, 0xF5DF17C9);
	r2 = D(r2, s1_0_0, 0x0CF6090F, 0xFF04F5FB, 0xEF101944, 0xFB02101A);
	r3 = D(r3, s1_0_0, 0xF5EAF0D1, 0x10FBFDEF, 0xE9140B24, 0xF700FFD9);
	r4 = D(r4, s1_0_0, 0xFBF0FC09, 0x310118EB, 0xFEFDF8F0, 0x0F12E6F1);
	r5 = D(r5, s1_0_0, 0xE90A04F3, 0x07F90CE5, 0x18EF0727, 0xE6122B06);
	r6 = D(r6, s1_0_0, 0x07FBF832, 0xDC17EF0A, 0x021DFA16, 0xAA160E13);
	r7 = D(r7, s1_0_0, 0x0307062A, 0xF20EF7C7, 0x01FDF0C0, 0xE313EED5);
	r0 = D(r0, s1_0_1, 0x000BFFF8, 0xFDFFF3FA, 0xFF0E0CF6, 0x1FCF0103);
	r1 = D(r1, s1_0_1, 0x03FC0305, 0x09F2031A, 0xF6FEF8FE, 0x031823E8);
	r2 = D(r2, s1_0_1, 0x04FE0CBE, 0x00F4E811, 0xF5210BFD, 0xFCF7F72D);
	r3 = D(r3, s1_0_1, 0xE2FF0704, 0x131004EA, 0xF40D00C6, 0xF2FEFAE6);
	r4 = D(r4, s1_0_1, 0x0AFF0826, 0xEFF30C00, 0xF807FCEC, 0xFD01F801);
	r5 = D(r5, s1_0_1, 0x1204F808, 0xEFF60E06, 0xD1F91A1C, 0xFBF90F18);
	r6 = D(r6, s1_0_1, 0x1C06F6E4, 0xF7DAFAAA, 0x200BD318, 0xC1F9122A);
	r7 = D(r7, s1_0_1, 0xFD20F918, 0x16D7F33F, 0xF7FFE9E9, 0x050F1501);
	r0 = D(r0, s1_0_2, 0x08FB0A19, 0x130404FC, 0x05FE07F3, 0xEFC1E3FC);
	r1 = D(r1, s1_0_2, 0xFC0101FD, 0xFCF5F91A, 0x0C04F900, 0x1404EE0E);
	r2 = D(r2, s1_0_2, 0x1CEBE729, 0xFC01F309, 0x0AFB0C2F, 0x0F1409DC);
	r3 = D(r3, s1_0_2, 0xE70D13E6, 0x07F40ED2, 0x130305C3, 0x150EDD15);
	r4 = D(r4, s1_0_2, 0x08DF0221, 0x0D08FD01, 0xFA06FBF5, 0x1802150D);
	r5 = D(r5, s1_0_2, 0xF901FFF4, 0x0A06FAF9, 0xFAF81CD3, 0x27E8CFEF);
	r6 = D(r6, s1_0_2, 0xC6130914, 0x0E0D273B, 0x0419F527, 0x05F5150C);
	r7 = D(r7, s1_0_2, 0x08FC1FBA, 0xF018F9A2, 0x180AF521, 0x0A100D0B);
	r0 = D(r0, s1_1_0, 0xFFF8F407, 0x06FBFAFC, 0xF8F8E20C, 0xF1F5E327);
	r1 = D(r1, s1_1_0, 0xFC060601, 0xFFFDF909, 0xDFFBE41B, 0xD516F056);
	r2 = D(r2, s1_1_0, 0x180BFFEA, 0xFB04FC33, 0xFAE5FC0F, 0xFDF022D6);
	r3 = D(r3, s1_1_0, 0xD8FD0B24, 0xFE131C13, 0xFD270EFD, 0x02050C2B);
	r4 = D(r4, s1_1_0, 0x01F2FDC1, 0xFB0FFCF5, 0x001604FB, 0xD7D80FFC);
	r5 = D(r5, s1_1_0, 0xFD05FCD7, 0x06F8FFF1, 0x0B1104E2, 0xF6EE0AEC);
	r6 = D(r6, s1_1_0, 0x00091502, 0x0CFF1704, 0xED0D04FE, 0x0FF9EBFB);
	r7 = D(r7, s1_1_0, 0xEB05FA34, 0xE80F15FA, 0x11FC1AEB, 0x14F31B45);
	r0 = D(r0, s1_1_1, 0xE5080BE8, 0xFA0D1D38, 0xEE0B0111, 0x0E18FC18);
	r1 = D(r1, s1_1_1, 0xFD02F4FD, 0x0B0BE6D3, 0xF906120D, 0x1E021D8D);
	r2 = D(r2, s1_1_1, 0x1112EAF7, 0xBEF8FFE4, 0xEAFB0EAD, 0x09FB13D3);
	r3 = D(r3, s1_1_1, 0x0DF9FCCD, 0xD3B3DEF8, 0xE1E4E4B5, 0xF7EFEC1C);
	r4 = D(r4, s1_1_1, 0x08FDD1EB, 0x150B0A0D, 0x041209C0, 0x0DFE07E4);
	r5 = D(r5, s1_1_1, 0xFBEC1A18, 0xF4060504, 0xE92E0F33, 0xFFF505ED);
	r6 = D(r6, s1_1_1, 0xFE03DBBE, 0xC7FDE650, 0xE6E6E405, 0xEF0E0BC8);
	r7 = D(r7, s1_1_1, 0x24E80954, 0x0AFF25F9, 0x06E208C8, 0x02E6FF0F);
	r0 = D(r0, s1_1_2, 0x1108FE1F, 0xFD0600F6, 0xF9F502FD, 0xFB100D1C);
	r1 = D(r1, s1_1_2, 0x03010203, 0x0F0DE8FB, 0xF608FFF8, 0x0CEB1506);
	r2 = D(r2, s1_1_2, 0x09F8EC1B, 0xF9FE1611, 0xEE0DF213, 0x11F6094D);
	r3 = D(r3, s1_1_2, 0x07F8E6CA, 0xFF161BD0, 0x05F9F41E, 0x110AF3F6);
	r4 = D(r4, s1_1_2, 0xFA060417, 0xE6F90CE4, 0x0717FD0F, 0x06031111);
	r5 = D(r5, s1_1_2, 0x140A100C, 0xFD0CF9E6, 0x120C1E5A, 0x05ECB205);
	r6 = D(r6, s1_1_2, 0x16F61612, 0xFC08091B, 0x1BF4F309, 0x01011B05);
	r7 = D(r7, s1_1_2, 0xF3ED14D6, 0xFF09FAE4, 0x0F02CFF2, 0xE9E9080E);
	r0 = D(r0, s1_2_0, 0x03FA10F4, 0x0908F80F, 0x0F05EB05, 0xE5FA1616);
	r1 = D(r1, s1_2_0, 0xFD03FCFF, 0xF2FCF3F7, 0xECFECCFF, 0xFCF5FC96);
	r2 = D(r2, s1_2_0, 0xEBEC06BB, 0xF7EB14F2, 0xF505FF1C, 0xF51306CA);
	r3 = D(r3, s1_2_0, 0x010AE5F2, 0x0B0B1A08, 0x28D40E05, 0x160B12F4);
	r4 = D(r4, s1_2_0, 0xFFFF0A11, 0xFEFDF80F, 0xECFF00F2, 0x08FBF638);
	r5 = D(r5, s1_2_0, 0xF808F507, 0x00060AFC, 0xF8F12AF5, 0x1D02F813);
	r6 = D(r6, s1_2_0, 0xFAFF07F3, 0x2D14DC2A, 0xF8FC18F0, 0x080E04F7);
	r7 = D(r7, s1_2_0, 0x201F0FD0, 0xFFF6FBF0, 0xF9130717, 0xFC060632);
	r0 = D(r0, s1_2_1, 0x0802FFDF, 0x100122EB, 0x0D0AFC0F, 0x06F0EC14);
	r1 = D(r1, s1_2_1, 0x02FB00FB, 0x00F00C0E, 0x14F7F20A, 0xE51208DF);
	r2 = D(r2, s1_2_1, 0xFB0FE81A, 0xF703CDC6, 0xFEF2C604, 0x14260403);
	r3 = D(r3, s1_2_1, 0xF8EA1B07, 0xEDFD103A, 0xE402021B, 0xF209A427);
	r4 = D(r4, s1_2_1, 0xF501E9FE, 0x000EFCF5, 0x0AFB13D7, 0x09FB10FD);
	r5 = D(r5, s1_2_1, 0xFFF62010, 0xF603F205, 0x100AFBF8, 0xEB0C0B19);
	r6 = D(r6, s1_2_1, 0xFE0E08F0, 0x04E833BD, 0xE409EDE2, 0xFFE71CD2);
	r7 = D(r7, s1_2_1, 0xF1EE383C, 0xEC0515E2, 0x1106261E, 0x0D0410E7);
	r0 = D(r0, s1_2_2, 0x0FF9FD23, 0xFF0402F9, 0x0305F907, 0x0FEE29F9);
	r1 = D(r1, s1_2_2, 0xFF00020D, 0x03F5D9F6, 0x02FBF8FB, 0xE9F30EC9);
	r2 = D(r2, s1_2_2, 0x08E6FDDB, 0x14F2FF34, 0x0CFB01C4, 0xFEFF0C07);
	r3 = D(r3, s1_2_2, 0x0C19F2F3, 0x0505E73E, 0x09FCE6DD, 0x0012F415);
	r4 = D(r4, s1_2_2, 0x0D0813F9, 0xF811FBFC, 0x04FD07EF, 0x09FD0710);
	r5 = D(r5, s1_2_2, 0xF609FD14, 0x05090305, 0x02EC0EF0, 0x16E6BA24);
	r6 = D(r6, s1_2_2, 0x02E50B16, 0x0AFAE933, 0xFCFC1E11, 0x0DEF08FE);
	r7 = D(r7, s1_2_2, 0xECF327AC, 0x06F22A2D, 0x0EFE0BF6, 0xDBFD0E2A);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x040DF6E7, 0x06FA0001, 0x0306EFFA, 0xF903F2ED);
	r1 = D(r1, s0_0_0, 0xFB0106FE, 0xFB04FBFD, 0xF7010C00, 0xF529C3E9);
	r2 = D(r2, s0_0_0, 0x0F11DB00, 0x0600ECEB, 0xF111CE18, 0xCC10DE01);
	r3 = D(r3, s0_0_0, 0xF70300F3, 0x02F4F90C, 0xFDF10C08, 0x0411E4FC);
	r4 = D(r4, s0_0_0, 0x080709F4, 0xE4F009F7, 0x0302E702, 0x1B28ECB3);
	r5 = D(r5, s0_0_0, 0xFAF2DC04, 0xF90A05FC, 0x3308F001, 0x0D0B100B);
	r6 = D(r6, s0_0_0, 0xF7F00817, 0xF61C0507, 0x0E13FBDF, 0x080ADE04);
	r7 = D(r7, s0_0_0, 0xFD0BE5FE, 0x0811F50F, 0xF6170DEA, 0xF70DFFFF);
	r0 = D(r0, s0_0_1, 0xFAFDF9FF, 0x07F8F501, 0x0706FB0A, 0xEE33E698);
	r1 = D(r1, s0_0_1, 0xF90A06FD, 0xF3FBFC06, 0x02F2F9FC, 0x03D114FD);
	r2 = D(r2, s0_0_1, 0x08030704, 0xFE15E7FF, 0x0DFA1316, 0x14070DF9);
	r3 = D(r3, s0_0_1, 0x001E1BEC, 0xFD142024, 0xDB05E21E, 0x0CF60505);
	r4 = D(r4, s0_0_1, 0xFE141308, 0x0A08F310, 0xFEFAF4DF, 0x02E5D0BC);
	r5 = D(r5, s0_0_1, 0xFAEDF703, 0x0F000002, 0x09F6F6F1, 0x00F1FD12);
	r6 = D(r6, s0_0_1, 0x00F2F904, 0x090511F1, 0xFA0C0704, 0x02E82BDD);
	r7 = D(r7, s0_0_1, 0x06251816, 0xF8EE1719, 0xF314ED0D, 0xF30F0A25);
	r0 = D(r0, s0_0_2, 0xFBF70502, 0xFD0FFEF8, 0xFCFCF1FB, 0xE609FEF5);
	r1 = D(r1, s0_0_2, 0x06FAFF03, 0x00F903F3, 0xF90CF8F5, 0xFE1BE523);
	r2 = D(r2, s0_0_2, 0x1031FD02, 0x040402F4, 0x050A01ED, 0x09290329);
	r3 = D(r3, s0_0_2, 0x0EFB0801, 0xF6DBF80C, 0x11EAEAEF, 0xF904EF06);
	r4 = D(r4, s0_0_2, 0x18E805F8, 0x06D50305, 0x01FDF405, 0x0221000E);
	r5 = D(r5, s0_0_2, 0xFC01FA14, 0x02FFFEF4, 0x031C0C23, 0xF4EEF8FD);
	r6 = D(r6, s0_0_2, 0x0111FF02, 0xFDEDECF3, 0xFDCBEE00, 0x071F0510);
	r7 = D(r7, s0_0_2, 0xF404F70E, 0x0108F3DB, 0x06F6F6F7, 0xE90B0912);
	r0 = D(r0, s0_1_0, 0xEC01DD0D, 0xF80AF8F9, 0xFD01FA0A, 0xF10909B9);
	r1 = D(r1, s0_1_0, 0x05FBF401, 0xFB0505F2, 0xE60E0AFC, 0x04F1F10F);
	r2 = D(r2, s0_1_0, 0x05FA0CF0, 0x0A12F901, 0x1C1C13D8, 0x11F8F208);
	r3 = D(r3, s0_1_0, 0x14F1F507, 0x040E02F4, 0xF0EB03FF, 0x0310080E);
	r4 = D(r4, s0_1_0, 0x05F3F707, 0x01FA0604, 0x000CFD0E, 0xCE14E0BA);
	r5 = D(r5, s0_1_0, 0xFD03F0FA, 0x08010FFD, 0x1E05F4F3, 0x19011CEC);
	r6 = D(r6, s0_1_0, 0x200CE0F6, 0xEBE50FF8, 0x090BECFC, 0xF4F71015);
	r7 = D(r7, s0_1_0, 0xF623FE01, 0x180DF5F8, 0xE7F5F803, 0xF7FA2204);
	r0 = D(r0, s0_1_1, 0x1CE709F9, 0x0FF61105, 0xFBEE0208, 0x1AFE06F6);
	r1 = D(r1, s0_1_1, 0x00FF08FD, 0x1B0306F3, 0x0F09070A, 0xF70301E8);
	r2 = D(r2, s0_1_1, 0xFFF6E5F6, 0x05030410, 0xFA03ED0E, 0x17E3FDFE);
	r3 = D(r3, s0_1_1, 0x12041903, 0x01EEDEE8, 0xF7010E10, 0xEB0103FE);
	r4 = D(r4, s0_1_1, 0xFC1E0CF6, 0xF006D7E9, 0x07EFFB15, 0x0136EFF4);
	r5 = D(r5, s0_1_1, 0x0FFBF70D, 0x01080A01, 0xECEC0AAC, 0x0E21F7FF);
	r6 = D(r6, s0_1_1, 0x0603F0F2, 0x20FA041C, 0xE6FEEEFF, 0x1905E721);
	r7 = D(r7, s0_1_1, 0xF5D6FAC3, 0x01000AFA, 0xF21506CB, 0xFE270609);
	r0 = D(r0, s0_1_2, 0x03060100, 0xEC09010D, 0x0101FD02, 0xBDF9F535);
	r1 = D(r1, s0_1_2, 0x05100106, 0xF4F7F4FA, 0x03FFFD07, 0x07EB03FB);
	r2 = D(r2, s0_1_2, 0xF5FDF611, 0xF2E6F2F7, 0xE9EEFBFE, 0xFF15EA0C);
	r3 = D(r3, s0_1_2, 0xE610030D, 0xFFF0EE0A, 0x19F1F3B8, 0x090BEA04);
	r4 = D(r4, s0_1_2, 0x0106FB0F, 0x04F70FFE, 0x0716FA29, 0xECEE101F);
	r5 = D(r5, s0_1_2, 0x07120A15, 0xF50AFAF3, 0xFB19F9F9, 0xEC0FF30E);
	r6 = D(r6, s0_1_2, 0xF8DEF5FB, 0x06E90CFC, 0xFCB5FD1D, 0xF3F60C0C);
	r7 = D(r7, s0_1_2, 0xD2150E0D, 0xE4F7EB08, 0x0FED181C, 0x17F92DFA);
	r0 = D(r0, s0_2_0, 0xFB0FF6FD, 0xF505FE09, 0x0800F808, 0x122C1106);
	r1 = D(r1, s0_2_0, 0xFFFF0602, 0x0E0602F7, 0x070CF206, 0xEFF90B16);
	r2 = D(r2, s0_2_0, 0xF1FB0A0E, 0xED0B0B02, 0x03F3F4F7, 0xF906F713);
	r3 = D(r3, s0_2_0, 0x00EA070E, 0xDEF9E210, 0xE417EBFF, 0xF015FCFC);
	r4 = D(r4, s0_2_0, 0x0C1509F9, 0x00EE0AFC, 0xF4060A09, 0xFE0E2FC4);
	r5 = D(r5, s0_2_0, 0xF7F5FDF9, 0x0300FC04, 0x03EDE618, 0x0C00F5F9);
	r6 = D(r6, s0_2_0, 0x01FE14FF, 0xE9F70C26, 0x010F00F0, 0xF00206F9);
	r7 = D(r7, s0_2_0, 0xFFFCFD08, 0x041712F4, 0xDBFC02F9, 0x04ECED18);
	r0 = D(r0, s0_2_1, 0x120717FE, 0xFB040804, 0x030FFF13, 0xFDC203EE);
	r1 = D(r1, s0_2_1, 0xF70206FD, 0xED0907FF, 0xFCFDFAFB, 0xF404F716);
	r2 = D(r2, s0_2_1, 0xFFEDF70B, 0x12FF1E00, 0x08F00D10, 0x10E7050C);
	r3 = D(r3, s0_2_1, 0xDDF3FAFC, 0x0CFA0D09, 0xEC13FB08, 0xFFFAEE12);
	r4 = D(r4, s0_2_1, 0x02F2FB05, 0x05F9FEFE, 0xF503FBE9, 0xF6291807);
	r5 = D(r5, s0_2_1, 0xFE1C020A, 0x03F104FF, 0x06080019, 0x18E30C02);
	r6 = D(r6, s0_2_1, 0xFDF5010C, 0xEF182301, 0x01F50C00, 0xE0FEF40B);
	r7 = D(r7, s0_2_1, 0x0718F4EC, 0xE623EB24, 0x0C0FF1F8, 0x0C120CF9);
	r0 = D(r0, s0_2_2, 0x0001F3FC, 0x0205FAFF, 0x08FB0403, 0x15FBF813);
	r1 = D(r1, s0_2_2, 0x00040502, 0xF5E9050C, 0x06FC04FE, 0xF902120B);
	r2 = D(r2, s0_2_2, 0x10F30308, 0x03F70104, 0xEF00FF1A, 0x0600F5F4);
	r3 = D(r3, s0_2_2, 0xDAE6F015, 0x1BEC1106, 0x24281405, 0xEDE20314);
	r4 = D(r4, s0_2_2, 0xFF04F5F4, 0xFC0AFE14, 0x04F9130A, 0xD3F1F3E8);
	r5 = D(r5, s0_2_2, 0xFAFB0FFC, 0xF90CF8FE, 0xE30CF8F5, 0x00FBF911);
	r6 = D(r6, s0_2_2, 0xF10709F7, 0x0FF11507, 0x030800F4, 0xFE010108);
	r7 = D(r7, s0_2_2, 0xE9FDFB00, 0x03FC05FB, 0x21070908, 0x050E0FDA);
	r0 = D(r0, s1_0_0, 0x140BFBEB, 0x040201FC, 0x0100FBF9, 0x181617EA);
	r1 = D(r1, s1_0_0, 0x000603FE, 0x04070500, 0xFA04FCF9, 0x0814061D);
	r2 = D(r2, s1_0_0, 0x04070EFA, 0xFFF5FD01, 0xF7000B18, 0xF90C0000);
	r3 = D(r3, s1_0_0, 0xFDF20010, 0x0DFD120B, 0x06F1FF14, 0x0C070E0C);
	r4 = D(r4, s1_0_0, 0xFC03020A, 0x0304EEF0, 0x040C0100, 0x0C0603DA);
	r5 = D(r5, s1_0_0, 0x0F04111E, 0x0EFE0C00, 0x1713120C, 0x30030602);
	r6 = D(r6, s1_0_0, 0x0911F3F3, 0x020C0015, 0x181DF905, 0x16F2E91C);
	r7 = D(r7, s1_0_0, 0xFEEFF0F8, 0x0406F603, 0x041AF404, 0x07FFF61D);
	r0 = D(r0, s1_0_1, 0xFB00F4FB, 0xFF01FDFE, 0x0000050B, 0xF1EF1100);
	r1 = D(r1, s1_0_1, 0x0A080D03, 0xF6FDFCF9, 0xFCFD1205, 0x0C371325);
	r2 = D(r2, s1_0_1, 0xF9F41520, 0x0100FA01, 0x030CFDEE, 0x0718F50C);
	r3 = D(r3, s1_0_1, 0x2FF4F402, 0x13FAE8FF, 0x0CF10CF7, 0xFE1405F2);
	r4 = D(r4, s1_0_1, 0x12FDE609, 0x0B1028F8, 0xF206FE07, 0x0B0B22E8);
	r5 = D(r5, s1_0_1, 0xF0F6FDFB, 0xFA0B1805, 0x0EFEEF04, 0xF4FB07F3);
	r6 = D(r6, s1_0_1, 0xF2F9E81D, 0xDF01010E, 0xE9F0F515, 0xEAF60E12);
	r7 = D(r7, s1_0_1, 0xF7CB171D, 0x0C08F9EB, 0xF1EBF2FB, 0xFFF317F7);
	r0 = D(r0, s1_0_2, 0x0314FEFC, 0x04FEED07, 0x03FFFDF4, 0xC6FEF305);
	r1 = D(r1, s1_0_2, 0x01000701, 0x04090A02, 0xFCFBFD00, 0xF50404FA);
	r2 = D(r2, s1_0_2, 0xE2FBE206, 0xF3F9F409, 0xF4110100, 0x0012180B);
	r3 = D(r3, s1_0_2, 0xFF08DD10, 0xF8F007F6, 0x01FCF1ED, 0xE9FBFA0D);
	r4 = D(r4, s1_0_2, 0x17141C01, 0xFFFD0905, 0xF2F9F8F8, 0x0E0CF7FA);
	r5 = D(r5, s1_0_2, 0x00EEF40D, 0x0101F1FA, 0x0AF2E712, 0xD909F40C);
	r6 = D(r6, s1_0_2, 0x05F512F9, 0x230D0709, 0xF1F7F4FA, 0x04F117FE);
	r7 = D(r7, s1_0_2, 0x19F7F8EC, 0xE9EFEB22, 0x05FED40C, 0xF20715F7);
	r0 = D(r0, s1_1_0, 0x1100FEFD, 0xFD0E0902, 0xEAFD05FF, 0x112F0681);
	r1 = D(r1, s1_1_0, 0xFDFDF600, 0x0101F70B, 0xFCF9F4FB, 0x0EFBF0F9);
	r2 = D(r2, s1_1_0, 0xDF05FAE6, 0xEEFB0B09, 0x0003F2F5, 0xFB0E06E1);
	r3 = D(r3, s1_1_0, 0xFCFF090D, 0xFDF1010C, 0xF51007F8, 0x061401F7);
	r4 = D(r4, s1_1_0, 0xFD07F0FC, 0x0705F508, 0xEFEFFA0E, 0x26160DE9);
	r5 = D(r5, s1_1_0, 0xE90CFDF5, 0xF3FAF7F7, 0x0313F4FD, 0xEF2B0AC3);
	r6 = D(r6, s1_1_0, 0x08140109, 0xF3E71010, 0x0203F5FD, 0x04F516FF);
	r7 = D(r7, s1_1_0, 0xF314EEF6, 0xFA130205, 0xF3E9FE14, 0xE908E9F5);
	r0 = D(r0, s1_1_1, 0x00F9F90D, 0xEBF700F6, 0x09D72319, 0x14093DDB);
	r1 = D(r1, s1_1_1, 0xF43C1E00, 0x19F6130B, 0x00F84300, 0x332BFD03);
	r2 = D(r2, s1_1_1, 0xF4F80401, 0xE5DAE706, 0x12B8D2FC, 0x1E0CF3F5);
	r3 = D(r3, s1_1_1, 0xFD0A02FD, 0x0CB5221B, 0x0713F6E4, 0xFBF60FFD);
	r4 = D(r4, s1_1_1, 0xFC0BF2FF, 0x060F0AE0, 0x08E9F605, 0x021E0FEF);
	r5 = D(r5, s1_1_1, 0x0D00FB14, 0xFE3BF20B, 0xF9E9EC00, 0x0001FEFC);
	r6 = D(r6, s1_1_1, 0xF908DDF2, 0xE0D4EEE4, 0x02E3D8FC, 0xF8AF0017);
	r7 = D(r7, s1_1_1, 0x211A02EA, 0x1804F6EF, 0x07FC1E1C, 0x1BEF22CB);
	r0 = D(r0, s1_1_2, 0x01060402, 0xFDF7DC08, 0xF8F9F802, 0xE3FEFEFA);
	r1 = D(r1, s1_1_2, 0x010AFA04, 0xFA05E501, 0xF5FD07FD, 0xFCCFFBE9);
	r2 = D(r2, s1_1_2, 0xF9FA08E9, 0x00F701FB, 0x030B050E, 0xDFFA080E);
	r3 = D(r3, s1_1_2, 0x061CC4F5, 0x0203FFF2, 0xF1FB0308, 0x08EE1203);
	r4 = D(r4, s1_1_2, 0xFF09E6FF, 0x03F90305, 0xFEF105F7, 0xDE18FBE4);
	r5 = D(r5, s1_1_2, 0x0512EBF8, 0x02F51C02, 0xF807FAFA, 0x0EEFF708);
	r6 = D(r6, s1_1_2, 0x13D707FC, 0xFD1CD7FB, 0x1D0F2908, 0xFBF0E807);
	r7 = D(r7, s1_1_2, 0x0EDF0CFC, 0xFADDC80E, 0x15171005, 0x132A0F03);
	r0 = D(r0, s1_2_0, 0xFF0B03FF, 0x0303FF03, 0xFEE80CFC, 0xFF2505D3);
	r1 = D(r1, s1_2_0, 0xFB04FF01, 0x0902F8FF, 0x090AFF08, 0xDAE80F2A);
	r2 = D(r2, s1_2_0, 0xF8F90C17, 0x0D020609, 0x0CF804FB, 0xFFF0060E);
	r3 = D(r3, s1_2_0, 0x140909F9, 0xDDF8F906, 0xF220052A, 0xEF0504FD);
	r4 = D(r4, s1_2_0, 0x01FD0505, 0x07030300, 0x07F10407, 0x2EF7EBCF);
	r5 = D(r5, s1_2_0, 0xFF01FD04, 0xF9FB03FB, 0xD3FF120C, 0xBF0D0014);
	r6 = D(r6, s1_2_0, 0x090301F9, 0x0BF0030C, 0x090B011A, 0x00DEF7FE);
	r7 = D(r7, s1_2_0, 0x04070209, 0x0C2A0203, 0xF0ED01F5, 0xFBF40001);
	r0 = D(r0, s1_2_1, 0x011208FB, 0xEDE20705, 0xEDCFFEFF, 0xEE2EFCFF);
	r1 = D(r1, s1_2_1, 0x000508FE, 0xFC221309, 0x04EC0EFF, 0xE3D20709);
	r2 = D(r2, s1_2_1, 0x0BDDFCFF, 0x16FBFF0C, 0x11FFDEF7, 0x15EDEDE5);
	r3 = D(r3, s1_2_1, 0xDD18FC01, 0x0BF0F615, 0xFD1219F0, 0x0BFAFE0E);
	r4 = D(r4, s1_2_1, 0x0615FA0A, 0xF7CDFA00, 0x040A0401, 0xF7F1F7F0);
	r5 = D(r5, s1_2_1, 0x15100FFC, 0xFF00FA00, 0xF1EC0FFE, 0x05C9F013);
	r6 = D(r6, s1_2_1, 0x03140CF1, 0x1513E0FC, 0x09DCFF00, 0xFCF1FDFC);
	r7 = D(r7, s1_2_1, 0xE106F1F0, 0x0BF0FB0B, 0xF316F708, 0x0F1DF92E);
	r0 = D(r0, s1_2_2, 0xFD0CF201, 0x0311DE0A, 0x03F9E5F9, 0xBFF708EB);
	r1 = D(r1, s1_2_2, 0xFE0102FE, 0x03EBECFF, 0x0802F8FB, 0x04E117FA);
	r2 = D(r2, s1_2_2, 0x05F7F4FC, 0x1104F800, 0xE61A03FD, 0x09F215F7);
	r3 = D(r3, s1_2_2, 0x0F04F0F1, 0xFE201305, 0xFAE613F1, 0x0DEBEA01);
	r4 = D(r4, s1_2_2, 0x03030BEC, 0xEAFEFF0B, 0xFEF0FD01, 0xFA0CF9F8);
	r5 = D(r5, s1_2_2, 0xF30E09FF, 0x05F40500, 0x0AEC1FDA, 0x12E2FDE6);
	r6 = D(r6, s1_2_2, 0xFAF3F012, 0xF9F7ECE9, 0x17F903F9, 0xF5EB0BF8);
	r7 = D(r7, s1_2_2, 0x07FA160D, 0x16C5FCFC, 0x0D19FCE3, 0xDC03FB00);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x15FC0409, 0xF4020003, 0x07FC1B08, 0xFCE909FC);
	r1 = D(r1, s0_0_0, 0x0CFEF9FE, 0xF9F903FB, 0x0603EE0C, 0xE004170F);
	r2 = D(r2, s0_0_0, 0xCAFD0803, 0xF3FE0A09, 0xD6D3FD1F, 0x1218EE12);
	r3 = D(r3, s0_0_0, 0x1207EF0F, 0x01F10529, 0x1B11EDFB, 0xF1FA04F8);
	r4 = D(r4, s0_0_0, 0xF8F315F8, 0x1D04F901, 0x14FC0603, 0xF9F007FF);
	r5 = D(r5, s0_0_0, 0xFCF108F8, 0xF4F8EF03, 0x0C22FE0C, 0xF518220A);
	r6 = D(r6, s0_0_0, 0x1A0607F0, 0x101DD911, 0x15E609F8, 0xDDFB0B11);
	r7 = D(r7, s0_0_0, 0x11040208, 0xFB1300F9, 0xEDF006FB, 0x0AEFDC0A);
	r0 = D(r0, s0_0_1, 0x04DB04F1, 0xE7FE0CEC, 0xFEFE0705, 0xFC04FCFF);
	r1 = D(r1, s0_0_1, 0x01040507, 0x0E0804FD, 0xF608EEEF, 0xE1E911DE);
	r2 = D(r2, s0_0_1, 0x0FFD03E7, 0xD6FAEAE4, 0xF7EF0D14, 0x0B19F3FB);
	r3 = D(r3, s0_0_1, 0xC5FDF1F7, 0xCC0F0AF3, 0x0114060A, 0xFFEDF60D);
	r4 = D(r4, s0_0_1, 0x19F5F80B, 0x2300F619, 0x170C0301, 0xEC030AEA);
	r5 = D(r5, s0_0_1, 0xFE08E404, 0xF70005F1, 0xE916FB0B, 0xFACE21DA);
	r6 = D(r6, s0_0_1, 0x1EE5FB29, 0xBD02F0E5, 0x0E04010E, 0xC52FE2C3);
	r7 = D(r7, s0_0_1, 0x1AEFFC10, 0x250908FB, 0xFC13FC04, 0x0F03DD0A);
	r0 = D(r0, s0_0_2, 0x06FEFD09, 0x0A11F914, 0x00F80801, 0xF41AFAF9);
	r1 = D(r1, s0_0_2, 0xFA0401FE, 0x0E0A01FE, 0x08F10400, 0x0004F006);
	r2 = D(r2, s0_0_2, 0x05F5FF1C, 0xFA01F10A, 0xF7EA07FE, 0xF6F9F400);
	r3 = D(r3, s0_0_2, 0x26F3210E, 0x0B0BF00F, 0xF618F7FF, 0x1319EFF9);
	r4 = D(r4, s0_0_2, 0xEAF3FEFA, 0x03FCFCFD, 0x0C0EFD01, 0x00FAF406);
	r5 = D(r5, s0_0_2, 0x0912FC03, 0xF6F70104, 0x0C1C050B, 0xFC0BE91A);
	r6 = D(r6, s0_0_2, 0xEA42D9F5, 0x0208ED03, 0x0BDF17EE, 0xECFEF5E3);
	r7 = D(r7, s0_0_2, 0xE4F9F6F1, 0xFF1DF6F7, 0xF00600FD, 0xEFD306F6);
	r0 = D(r0, s0_1_0, 0x08FC19FD, 0xF9F80700, 0x070AE7F4, 0xF70EF3D5);
	r1 = D(r1, s0_1_0, 0x030704F8, 0x06F90306, 0x05EADB01, 0x00FFF603);
	r2 = D(r2, s0_1_0, 0xF624B2F1, 0xD6EFF4FE, 0x13DDE22C, 0xF601FE03);
	r3 = D(r3, s0_1_0, 0xE500FC13, 0xFACCE5F4, 0xF91103F6, 0x0EEB0016);
	r4 = D(r4, s0_1_0, 0xFDF1FA04, 0x08FFF7F6, 0x062EDEEF, 0xF3EBFCF1);
	r5 = D(r5, s0_1_0, 0x03013505, 0xFFEF0EFF, 0x25F4D708, 0x07ED20F9);
	r6 = D(r6, s0_1_0, 0x06FE07FE, 0xEFF5FD08, 0xEAFAFA06, 0x0619FA11);
	r7 = D(r7, s0_1_0, 0xFBDA1105, 0xE7E61C0E, 0xF0140211, 0x20F8ECDE);
	r0 = D(r0, s0_1_1, 0xFC05F904, 0xF50E3703, 0xFE12D8FB, 0xD90900FC);
	r1 = D(r1, s0_1_1, 0xFC080F03, 0xF2FD2AF9, 0x040FEF03, 0xE5EB0AD8);
	r2 = D(r2, s0_1_1, 0xF910F50E, 0xE9D6C0EA, 0xFE091007, 0x16F1FB0A);
	r3 = D(r3, s0_1_1, 0xF8BB22C9, 0xF4E40CFD, 0xFBF20EF3, 0x08CBD2FF);
	r4 = D(r4, s0_1_1, 0xFC1DFBFE, 0x2FEDB002, 0x0A18E609, 0xCEF607EB);
	r5 = D(r5, s0_1_1, 0x0102F5F1, 0x07F6EEFA, 0x0AF9FBD3, 0xEAF412F8);
	r6 = D(r6, s0_1_1, 0x00F11D03, 0x1E81BFE0, 0xED0D0909, 0x1DDBFF06);
	r7 = D(r7, s0_1_1, 0x02EE031B, 0x00F712EB, 0xFE18E7EC, 0x01053310);
	r0 = D(r0, s0_1_2, 0x06FFFB00, 0xF2FF0DFD, 0x08EE0F11, 0x01ACFEDE);
	r1 = D(r1, s0_1_2, 0x0304FF00, 0x06EA0A0E, 0x000D0809, 0xE8ECF4FD);
	r2 = D(r2, s0_1_2, 0x02ED0D04, 0xFD1FF210, 0xF30F0FE5, 0x02FA0A17);
	r3 = D(r3, s0_1_2, 0xEDC91F07, 0x0DED0D03, 0xFE02FCFD, 0x1723F701);
	r4 = D(r4, s0_1_2, 0x0FF0F5FD, 0xF91CF7F2, 0x0209050F, 0xF9030213);
	r5 = D(r5, s0_1_2, 0xFFF7070A, 0x08080002, 0xFEDA0203, 0x03EAE5E8);
	r6 = D(r6, s0_1_2, 0x1314F104, 0xF6F91814, 0x10EFEFFD, 0xFC16F60C);
	r7 = D(r7, s0_1_2, 0x0A20E726, 0x1423EBFD, 0xE2F10D0B, 0x02D1150B);
	r0 = D(r0, s0_2_0, 0xF9FD04EC, 0xFF0BF8FA, 0x0610F3F9, 0xEF141805);
	r1 = D(r1, s0_2_0, 0xFF0306FF, 0xF80003FA, 0xFB2CF0FC, 0xE5FEFE29);
	r2 = D(r2, s0_2_0, 0x0534F7F3, 0x0029FA13, 0x07FA0403, 0x180B16ED);
	r3 = D(r3, s0_2_0, 0x07E91409, 0x00EC0219, 0x0FE0120B, 0xF4E1F903);
	r4 = D(r4, s0_2_0, 0x12F105F6, 0xFA030100, 0xFB0912F0, 0xFDEAF2E7);
	r5 = D(r5, s0_2_0, 0xFC07FDFE, 0x01FD0601, 0x18ECF234, 0x0FDFE614);
	r6 = D(r6, s0_2_0, 0xEB160FF0, 0x01050C0D, 0xF21DF304, 0xF2F8FC0D);
	r7 = D(r7, s0_2_0, 0xFE17DECF, 0x00ED0C35, 0x0107FFF6, 0xF5B426EC);
	r0 = D(r0, s0_2_1, 0x080C030C, 0x09000A07, 0xF8E2F6F4, 0xF6DBFE31);
	r1 = D(r1, s0_2_1, 0xFD020503, 0x00FF1706, 0x01010106, 0xFEFFF5CE);
	r2 = D(r2, s0_2_1, 0x0E05E7D0, 0xF7120FFE, 0x11E00EE2, 0x06CEEDE1);
	r3 = D(r3, s0_2_1, 0x012203E3, 0x14F025F3, 0xEE1607FD, 0x0BF8F2F8);
	r4 = D(r4, s0_2_1, 0xF405F9FD, 0x070E0608, 0x0408031F, 0xDFE8FF1E);
	r5 = D(r5, s0_2_1, 0x08EF0503, 0xF8040302, 0xE4E809EC, 0xED14E113);
	r6 = D(r6, s0_2_1, 0x0AF31714, 0x07E0E2F9, 0xFE0A04E9, 0x0DFBFC06);
	r7 = D(r7, s0_2_1, 0x0125C7F3, 0x16ECFBE2, 0x0FFDF2C5, 0x19E30702);
	r0 = D(r0, s0_2_2, 0x00FEFEF9, 0x0801F9FB, 0x03EC0AF8, 0x1AF1DCDE);
	r1 = D(r1, s0_2_2, 0xFA07FE08, 0x01FEF6EF, 0x04F603FE, 0x07010613);
	r2 = D(r2, s0_2_2, 0x0804FA1D, 0x01E50AF9, 0x02FB0AF8, 0x1AF611EA);
	r3 = D(r3, s0_2_2, 0x1B0EED08, 0xE7F8FEF9, 0xF02E06FD, 0x0115FF00);
	r4 = D(r4, s0_2_2, 0xF3E0070B, 0xF7011200, 0xFE050BF9, 0xDB13F403);
	r5 = D(r5, s0_2_2, 0xEC02000C, 0x06FC0602, 0xF607FD03, 0x101ED704);
	r6 = D(r6, s0_2_2, 0x00F804F8, 0x06EB0406, 0x050A0326, 0x060A0305);
	r7 = D(r7, s0_2_2, 0xFC22FC04, 0x00F910F0, 0xF1F7FC17, 0xFCF5E6FF);
	r0 = D(r0, s1_0_0, 0xEDFF131A, 0x120705FC, 0xF2F20807, 0x240F2973);
	r1 = D(r1, s1_0_0, 0xFDFA00F4, 0xF6FCFA14, 0xFE0202EB, 0x11FD0201);
	r2 = D(r2, s1_0_0, 0xF20FE633, 0x00FEE205, 0xF70C0A3B, 0x22FB0316);
	r3 = D(r3, s1_0_0, 0x05FDE828, 0xDFE5F201, 0x02F306EE, 0x0A0405F3);
	r4 = D(r4, s1_0_0, 0xF8090F31, 0x12FFFC3A, 0x1503EEF7, 0x1EF2123A);
	r5 = D(r5, s1_0_0, 0x1323092D, 0x02F7FEEF, 0x0DDD0A19, 0xF60B331F);
	r6 = D(r6, s1_0_0, 0xD31007EF, 0x23FCD8DD, 0x0F0BF32D, 0xEE13DB1E);
	r7 = D(r7, s1_0_0, 0xF1F3FEEB, 0xFBFF02DA, 0x1DECE638, 0xDD1604E9);
	r0 = D(r0, s1_0_1, 0xF703F9EC, 0x040003FD, 0x0A070708, 0xE0A6DAD9);
	r1 = D(r1, s1_0_1, 0x01FD0504, 0x030805F9, 0x0509FF07, 0x151A1ED7);
	r2 = D(r2, s1_0_1, 0x0FDBEEBF, 0xFEF6D8D4, 0x0BF6F4ED, 0xE41D09C4);
	r3 = D(r3, s1_0_1, 0xE906F7F0, 0x0A080C0E, 0x100728F8, 0x08F0062D);
	r4 = D(r4, s1_0_1, 0xF3F3FC7F, 0xFC2907FB, 0x00F20E0F, 0x26D8091E);
	r5 = D(r5, s1_0_1, 0xF30007CF, 0x071403F0, 0x2ADA04F8, 0xDAF30FCF);
	r6 = D(r6, s1_0_1, 0xE0DD050E, 0xBDECF0F6, 0xF6F8ECF4, 0x32FC06B5);
	r7 = D(r7, s1_0_1, 0x07EBFF08, 0x0EFA0729, 0xFE05E612, 0x0EE7FBC9);
	r0 = D(r0, s1_0_2, 0x030E171A, 0xEEFC0A03, 0x010809E4, 0x00EE173A);
	r1 = D(r1, s1_0_2, 0x0901FF03, 0x030C0FE6, 0xEDF8030C, 0x26040A1A);
	r2 = D(r2, s1_0_2, 0x0E0CFF15, 0x0B19EDE1, 0xF5FB0127, 0xF4FB064B);
	r3 = D(r3, s1_0_2, 0xF7F4FFCD, 0xF21412F0, 0xF2E7F1F4, 0x10FDF7DF);
	r4 = D(r4, s1_0_2, 0x571A0220, 0x0A0700FB, 0xFD0FFAE8, 0x2614FD21);
	r5 = D(r5, s1_0_2, 0x1EF9FB0D, 0xFAF3F8EC, 0x190417FB, 0xFF060B00);
	r6 = D(r6, s1_0_2, 0xEDFF06FE, 0xFC06252C, 0xC008F509, 0xFC02F6E5);
	r7 = D(r7, s1_0_2, 0x17E92227, 0x09F4FBDD, 0x2000EE1B, 0x33FF1BE5);
	r0 = D(r0, s1_1_0, 0x0A070401, 0xFDF1FBDE, 0x01F612F6, 0x18EA37E3);
	r1 = D(r1, s1_1_0, 0xFEFC0307, 0xFA0D0517, 0x0D07E71E, 0x0B0AECF7);
	r2 = D(r2, s1_1_0, 0xEBDF06E2, 0x0BF1FBDC, 0x0F030CFC, 0xEE09F001);
	r3 = D(r3, s1_1_0, 0xFEDEFCAF, 0x0C01F703, 0x111D18FF, 0xF9040605);
	r4 = D(r4, s1_1_0, 0xF708002A, 0x08EE201D, 0x1800DF21, 0xF2C417DC);
	r5 = D(r5, s1_1_0, 0x1CF4F6E1, 0xF9091615, 0xC6F10A22, 0xF9062AB6);
	r6 = D(r6, s1_1_0, 0xF40733F2, 0x2E0DA9FF, 0x1509FE2A, 0x0EFEE7F3);
	r7 = D(r7, s1_1_0, 0xEB1EE615, 0x1A1AEA36, 0xEC1500EA, 0xEED2E3FA);
	r0 = D(r0, s1_1_1, 0xFBF0E8ED, 0xFD000AF9, 0xEBFCFE52, 0x25E90C30);
	r1 = D(r1, s1_1_1, 0x11F9F9E0, 0x040C06F4, 0x140CF6D5, 0x0FF3D422);
	r2 = D(r2, s1_1_1, 0x09FF0003, 0x18E3DD1F, 0x17070768, 0xDAEA0622);
	r3 = D(r3, s1_1_1, 0xFB0C08D1, 0x1306EE12, 0x331907CA, 0xFDF00062);
	r4 = D(r4, s1_1_1, 0x22181961, 0xE4F9FAAD, 0x20FFFB7F, 0x16DD02EA);
	r5 = D(r5, s1_1_1, 0x21FAF821, 0xFBFAFD2F, 0x11080C2B, 0xFFF30D12);
	r6 = D(r6, s1_1_1, 0x14F5E4EB, 0x10F9E203, 0x05F60D31, 0xF5E00441);
	r7 = D(r7, s1_1_1, 0xF4F2010C, 0x09E1100B, 0xF517290D, 0x2DFAC9FD);
	r0 = D(r0, s1_1_2, 0x25FC09EB, 0x1FFDFE1A, 0x08080A20, 0x20F6FE2C);
	r1 = D(r1, s1_1_2, 0x0103FE08, 0x1F0303FA, 0x0BEFFEF4, 0xEDF9F820);
	r2 = D(r2, s1_1_2, 0x112301E2, 0x02EAF1F8, 0x050108B7, 0x1CED0B18);
	r3 = D(r3, s1_1_2, 0x0C070926, 0xD80204EA, 0x13F9EE26, 0xDB1BEDB7);
	r4 = D(r4, s1_1_2, 0xE80BFB29, 0xECFAEE00, 0xE00EF720, 0x0804001C);
	r5 = D(r5, s1_1_2, 0x05010600, 0xFA000115, 0x061123D6, 0xF820F229);
	r6 = D(r6, s1_1_2, 0x01FFFA34, 0xF4140BF8, 0xDA1D13FA, 0xFA1E0E1A);
	r7 = D(r7, s1_1_2, 0xD7FEF6E3, 0x1AED040E, 0x1403F7FF, 0xFCF513E5);
	r0 = D(r0, s1_2_0, 0xFB07F2CD, 0x05FD13F7, 0xF6F21103, 0xFDF1E739);
	r1 = D(r1, s1_2_0, 0x0100FF06, 0xFEFC0D13, 0xFCF8FC03, 0x10F0EED8);
	r2 = D(r2, s1_2_0, 0x030BE9FB, 0xF708070F, 0x0205F414, 0x0FF6F6DC);
	r3 = D(r3, s1_2_0, 0x050FEFCF, 0xF404FA10, 0xF804061A, 0x08F3BBF9);
	r4 = D(r4, s1_2_0, 0x0207F0FF, 0x03FF18E3, 0x0309B714, 0x15121E38);
	r5 = D(r5, s1_2_0, 0xFBECEB19, 0x07F60200, 0x0E281AF7, 0x1BD50A0C);
	r6 = D(r6, s1_2_0, 0x0CF9F6D9, 0x1004F11B, 0x0DE9EF04, 0xF5FAFEDF);
	r7 = D(r7, s1_2_0, 0x170BFEFC, 0xED16FCF8, 0x00FCF6C5, 0xF8F5F300);
	r0 = D(r0, s1_2_1, 0xFEF4FECA, 0x0B0AFF05, 0xF61300F7, 0x0B1DC124);
	r1 = D(r1, s1_2_1, 0xFFFD02FD, 0x0000101B, 0x0E040C07, 0xD70595F0);
	r2 = D(r2, s1_2_1, 0xFFFBEB17, 0x1418074A, 0xF70EEB1F, 0x060FE807);
	r3 = D(r3, s1_2_1, 0x0B200E36, 0xE4071C06, 0x0C00E415, 0x03F30808);
	r4 = D(r4, s1_2_1, 0xFF14070D, 0xFDF8EF08, 0xE50BF9F5, 0x12A00341);
	r5 = D(r5, s1_2_1, 0xEFF5EFF1, 0xFB0BFCF8, 0xE9F823D7, 0x1502F404);
	r6 = D(r6, s1_2_1, 0xEE1AEEE1, 0x0C0DFAF0, 0x01F2F8EE, 0x0FFFF112);
	r7 = D(r7, s1_2_1, 0x19111707, 0xFFFA0220, 0x0EE8080B, 0xD00514C1);
	r0 = D(r0, s1_2_2, 0x080E0918, 0xF20E0809, 0x110EFB00, 0x030E1116);
	r1 = D(r1, s1_2_2, 0xF60A010E, 0x0BFB0A3C, 0x06030001, 0xFBFBE1FC);
	r2 = D(r2, s1_2_2, 0x11FEE200, 0xFB1800ED, 0x0BF6FE09, 0xDBFC10D8);
	r3 = D(r3, s1_2_2, 0x04FAEF0A, 0x0BF709DE, 0xF4DCCED2, 0x0E2AF306);
	r4 = D(r4, s1_2_2, 0xF713FB10, 0xF300F521, 0x01110520, 0x0EE816D9);
	r5 = D(r5, s1_2_2, 0x041101FD, 0xF3FEFD06, 0x0601F20F, 0xFE0207F4);
	r6 = D(r6, s1_2_2, 0x010605F9, 0xFC0EF9D6, 0xF9ECF511, 0xFA0A0A06);
	r7 = D(r7, s1_2_2, 0x0DED051B, 0x0507DBF0, 0xDFF5EA01, 0x1EF70BF2);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFE0C0E0F, 0xF805F900, 0x04FBFD02, 0xF0030217);
	r1 = D(r1, s0_0_0, 0xF706FDFF, 0xFB08FCFE, 0xFE1809FF, 0xF2BFE00A);
	r2 = D(r2, s0_0_0, 0xF70C06F9, 0x05FCFC11, 0x0C03F215, 0xE9EFF622);
	r3 = D(r3, s0_0_0, 0x0BF80208, 0x0B04F80D, 0x0CFC1002, 0x0708EF07);
	r4 = D(r4, s0_0_0, 0x0C01E3FE, 0x040E06F0, 0x01020A05, 0x0E0C08B9);
	r5 = D(r5, s0_0_0, 0xFEF3EE05, 0x01FE0605, 0xEEF9FB07, 0x070ADEEB);
	r6 = D(r6, s0_0_0, 0xFF0AEF09, 0xEAB9E51B, 0xF8FFEF0C, 0x14F0EC0E);
	r7 = D(r7, s0_0_0, 0x0EFB16E6, 0xFD0C0A0D, 0xEA08ECF8, 0x01E9FFB6);
	r0 = D(r0, s0_0_1, 0x10320AE5, 0x01FD0603, 0x05E20C07, 0x0A01F13E);
	r1 = D(r1, s0_0_1, 0xF4FBFFFC, 0xFD070205, 0x06DFF9FF, 0xDCD0E8FA);
	r2 = D(r2, s0_0_1, 0x0822FC17, 0x0908F418, 0xFC11E003, 0xF6111AE9);
	r3 = D(r3, s0_0_1, 0x13FE04FB, 0xFDF7F203, 0x100C0014, 0xE1E901F3);
	r4 = D(r4, s0_0_1, 0xDFFBE3FE, 0x02C9100A, 0xFCF4FFF5, 0xF5131813);
	r5 = D(r5, s0_0_1, 0x121D05F6, 0xF44308FA, 0x0FFEF1F3, 0xFD091E07);
	r6 = D(r6, s0_0_1, 0x08F2F0E9, 0x1381F71A, 0x091A0B09, 0x0CE31106);
	r7 = D(r7, s0_0_1, 0x1BBF06F2, 0xEDCFEC0A, 0x1AF1F6F9, 0x04DFEE2F);
	r0 = D(r0, s0_0_2, 0xFB0AED08, 0x021700FD, 0x01EFF501, 0x1CE939E7);
	r1 = D(r1, s0_0_2, 0x00FBFE02, 0xFD000BFA, 0x01060106, 0xF4C4FB09);
	r2 = D(r2, s0_0_2, 0x140AEA00, 0x07EA0113, 0xF7F50A0D, 0xEAE6D8F2);
	r3 = D(r3, s0_0_2, 0x10FCF6FD, 0x0C100A0B, 0xF7F0E2F3, 0x0C0009EF);
	r4 = D(r4, s0_0_2, 0xF6F2F308, 0xFB0901E5, 0x0A05EEFF, 0x0407B1F1);
	r5 = D(r5, s0_0_2, 0x0B060C01, 0x02FEF706, 0xFD01EC13, 0xF7F0F1FA);
	r6 = D(r6, s0_0_2, 0x050805ED, 0xFEC10703, 0x0A0205F3, 0x0708EBED);
	r7 = D(r7, s0_0_2, 0x0FFE260C, 0x0AE5EE12, 0xEBF821FA, 0x0DD71820);
	r0 = D(r0, s0_1_0, 0xF80AFB0D, 0x03050E0F, 0xF5F8060C, 0x0B361CF2);
	r1 = D(r1, s0_1_0, 0xF1FF0308, 0x180206F2, 0x0AF00FF2, 0xF5DDFA07);
	r2 = D(r2, s0_1_0, 0xFBFB1804, 0x080708F8, 0x221123F2, 0x14F912D7);
	r3 = D(r3, s0_1_0, 0x0A10FF12, 0x08FCDD0B, 0xE607E8E7, 0xFB0F15FD);
	r4 = D(r4, s0_1_0, 0xF4011418, 0x0BFD0D00, 0xE2EEF605, 0x08EB1004);
	r5 = D(r5, s0_1_0, 0xF50FF1F6, 0x08FC04FF, 0x0BDE0A0C, 0x07081E01);
	r6 = D(r6, s0_1_0, 0x02FF13F5, 0xFCEFF405, 0xF0FA11FE, 0xF805F4FD);
	r7 = D(r7, s0_1_0, 0xFAFDF121, 0x1707F9F0, 0x0EF70400, 0xFCD31514);
	r0 = D(r0, s0_1_1, 0xF4FB0EF4, 0xFD0EFFEE, 0x210D14DD, 0xF8041AE5);
	r1 = D(r1, s0_1_1, 0x3E060EFF, 0xE8FF0108, 0x070E08F6, 0xBAC40A00);
	r2 = D(r2, s0_1_1, 0xF507011C, 0x1805FCE6, 0xC3F9E10E, 0x1EDDCE18);
	r3 = D(r3, s0_1_1, 0xD30703DE, 0xEE911EEF, 0xFE281C07, 0xF5D5F206);
	r4 = D(r4, s0_1_1, 0x1E1015FD, 0x2101F1F9, 0xFDEA01FA, 0xE10A15FC);
	r5 = D(r5, s0_1_1, 0xE702051B, 0xD2EDF3F8, 0x16E31CE1, 0xE504EF05);
	r6 = D(r6, s0_1_1, 0x0D0AE721, 0xFDA537E9, 0x0502EC1A, 0xC0E5E511);
	r7 = D(r7, s0_1_1, 0x1623F0E5, 0x1B102CE5, 0xC8E3FC21, 0xFCF3F4CB);
	r0 = D(r0, s0_1_2, 0x0C04F403, 0x05F7E805, 0x0706EBF7, 0x0DB5F9FB);
	r1 = D(r1, s0_1_2, 0x0500FDFF, 0xFAFB090C, 0xFCF6F3FF, 0x1BE40105);
	r2 = D(r2, s0_1_2, 0x05FCEBFD, 0x05E104F5, 0x02F7FFD0, 0xFC1BF8F6);
	r3 = D(r3, s0_1_2, 0x000AE81A, 0xF9E6DD09, 0x0CE301E9, 0x0B15F412);
	r4 = D(r4, s0_1_2, 0x00EB16EC, 0xF5040515, 0xE709EEF7, 0xFC102212);
	r5 = D(r5, s0_1_2, 0xFD050FF8, 0xE4F4FB02, 0xFD061800, 0x23F50F1A);
	r6 = D(r6, s0_1_2, 0x1005F91B, 0xF1EDE8DF, 0x08041DFD, 0xEE0CF301);
	r7 = D(r7, s0_1_2, 0xEB17100B, 0xEA07EB17, 0x181A0013, 0xF9F10CE6);
	r0 = D(r0, s0_2_0, 0xEC03FAF8, 0xFE04FC08, 0xF1011209, 0xE511F81B);
	r1 = D(r1, s0_2_0, 0xFBFDFD05, 0xF4F90609, 0x0AFAF40F, 0x06E81814);
	r2 = D(r2, s0_2_0, 0x090123F3, 0x06FD11F6, 0xF30AF6E6, 0x11F6FDF4);
	r3 = D(r3, s0_2_0, 0xF906F709, 0xFEF0F9F4, 0xF0F50C17, 0x0803FF1A);
	r4 = D(r4, s0_2_0, 0x0CFEFCFD, 0xF200F803, 0xF5FAEC02, 0x1200DF08);
	r5 = D(r5, s0_2_0, 0xFEFFFC00, 0x03FFF801, 0x23FDFDF6, 0xF300FD02);
	r6 = D(r6, s0_2_0, 0xF4051EF6, 0x000D0DF6, 0xF5FB04F6, 0x1906EBFB);
	r7 = D(r7, s0_2_0, 0xF3F40CF8, 0x08FE190C, 0x09FBF8FC, 0xF4F00908);
	r0 = D(r0, s0_2_1, 0xEE04F303, 0xFD01F609, 0xDA0BF713, 0x08F1E5B9);
	r1 = D(r1, s0_2_1, 0x02FE00FE, 0xF707FAF7, 0xF40DF408, 0x029FE6ED);
	r2 = D(r2, s0_2_1, 0x06FB3604, 0xA20B3AEF, 0x100A1A0B, 0x1BEB2101);
	r3 = D(r3, s0_2_1, 0xC7F814FD, 0x11F727F3, 0xF60FE7EA, 0x21FE0EEB);
	r4 = D(r4, s0_2_1, 0x0D00DCE5, 0x10020809, 0x1409E5F7, 0x20FECADA);
	r5 = D(r5, s0_2_1, 0xF9F5E106, 0x0805F600, 0xFCFF9BFD, 0x05FA4AEC);
	r6 = D(r6, s0_2_1, 0xF8FF13D9, 0x280BF8F5, 0x1D0AE9F0, 0xFA062210);
	r7 = D(r7, s0_2_1, 0x29ED0003, 0xBC00F7FF, 0x02FACD0E, 0x2F07E905);
	r0 = D(r0, s0_2_2, 0xF902FCF4, 0xF5FF0D05, 0x01061D0B, 0xFF0F06D9);
	r1 = D(r1, s0_2_2, 0xF90105FD, 0x2A010000, 0x0B04FFFB, 0x0CDE0AF5);
	r2 = D(r2, s0_2_2, 0xFC0A25FD, 0x11FC01F7, 0x0501CF11, 0x1A05E7EF);
	r3 = D(r3, s0_2_2, 0x0E0C1502, 0xF5063B03, 0x10FAF0FB, 0x0C021901);
	r4 = D(r4, s0_2_2, 0xF7FCEBF5, 0x0605F207, 0x160B0712, 0x160C0CE3);
	r5 = D(r5, s0_2_2, 0x06090E0E, 0x08FF0203, 0xFD0BF417, 0x2505FAE5);
	r6 = D(r6, s0_2_2, 0x08FB2D0E, 0x0606140A, 0x0AFDE608, 0x1E0000EE);
	r7 = D(r7, s0_2_2, 0xD4F6D709, 0xEB000BF1, 0xF705F7F8, 0x00F7F4FB);
	r0 = D(r0, s1_0_0, 0x04F70F11, 0xFDFAFA04, 0x0FFD05F9, 0xE9E6FEF7);
	r1 = D(r1, s1_0_0, 0x000A0104, 0xE9FF02F2, 0xE8F604FD, 0x063703F2);
	r2 = D(r2, s1_0_0, 0xDBDF1702, 0x0F10FF04, 0xD600F905, 0xFCEBE312);
	r3 = D(r3, s1_0_0, 0xF5FDDB02, 0xE1F924F2, 0x10F80506, 0xC91712F5);
	r4 = D(r4, s1_0_0, 0x030906F4, 0x0D1BDBF8, 0x0D01F5F9, 0xE5841BF5);
	r5 = D(r5, s1_0_0, 0x0BEFEBE6, 0xEAFD0904, 0xF4F5FBD1, 0xD3E6F306);
	r6 = D(r6, s1_0_0, 0x03200A07, 0xEA09FEF2, 0xD30A26F6, 0xECFCEC0D);
	r7 = D(r7, s1_0_0, 0xF60B0B07, 0x0000F20B, 0x0521EA0E, 0x81AF0F10);
	r0 = D(r0, s1_0_1, 0x0A0B12E6, 0x14080304, 0x1103F913, 0x1720E3D7);
	r1 = D(r1, s1_0_1, 0x0506FEF2, 0x01FDFA00, 0x02021105, 0xF733030C);
	r2 = D(r2, s1_0_1, 0xFADE2104, 0xF8E51002, 0x19C7E20B, 0x041223EC);
	r3 = D(r3, s1_0_1, 0x14F1E803, 0xF6D4F204, 0xECEBFEDC, 0x10130511);
	r4 = D(r4, s1_0_1, 0xEA2D0016, 0xFF21DEEA, 0x0EF31CE9, 0xF681FA10);
	r5 = D(r5, s1_0_1, 0x1D0013EC, 0xF1F9F0FB, 0x12E222DF, 0xDCF50B17);
	r6 = D(r6, s1_0_1, 0xF11E18E1, 0x05E9E736, 0x0B01041C, 0xFBFAE716);
	r7 = D(r7, s1_0_1, 0xEBF00CE7, 0xF61AEA04, 0x2B070718, 0xEE1BE710);
	r0 = D(r0, s1_0_2, 0x040903FB, 0xF403FB00, 0x0A0D00F3, 0x0230F50A);
	r1 = D(r1, s1_0_2, 0x07FC0803, 0xF0F5F3F2, 0xF9F10704, 0xFEFE0701);
	r2 = D(r2, s1_0_2, 0x07E2FCF7, 0xE6CA0610, 0x061309FD, 0x0E1E0EEC);
	r3 = D(r3, s1_0_2, 0x00F10E04, 0xF0C7F70E, 0x02EC01EA, 0x11DBFFFA);
	r4 = D(r4, s1_0_2, 0xF32EF6EA, 0xFA08F303, 0x010CF4F6, 0xF8FE04FF);
	r5 = D(r5, s1_0_2, 0x0CE8110F, 0xF803F9FE, 0xFCEC0BFA, 0xE2C2FDC0);
	r6 = D(r6, s1_0_2, 0xE1F1E2FD, 0xF9C6090A, 0xE00A1000, 0xEC2B03FC);
	r7 = D(r7, s1_0_2, 0x1E130CD3, 0xF5FF0AF1, 0x1C0F0ADD, 0xF31B17FC);
	r0 = D(r0, s1_1_0, 0xD40FED08, 0x0FFE08FE, 0x1C25FEDF, 0xD9A2F60D);
	r1 = D(r1, s1_1_0, 0x0D02FDFB, 0x11FB02EF, 0x17FFDA06, 0xD210EBCB);
	r2 = D(r2, s1_1_0, 0xFEEFE8F9, 0x1A081B0C, 0x0BED18ED, 0xBBE001EF);
	r3 = D(r3, s1_1_0, 0x02D8200D, 0xD208FAEE, 0x06EFF50A, 0xF30905F0);
	r4 = D(r4, s1_1_0, 0xFB0EFB12, 0xF500E9F5, 0xF5F7F9E4, 0xFAD90EF9);
	r5 = D(r5, s1_1_0, 0x1EFF07F5, 0x09F90403, 0xF6E11B12, 0xC0FC0600);
	r6 = D(r6, s1_1_0, 0xE0E313F6, 0xD3F6F638, 0x10FDD4F6, 0x0D0617EB);
	r7 = D(r7, s1_1_0, 0xE8020A09, 0x0206180E, 0xFD231107, 0xFB27142A);
	r0 = D(r0, s1_1_1, 0xF2F3F6E9, 0xD1EF1E25, 0xF209F94C, 0xF22A0DD3);
	r1 = D(r1, s1_1_1, 0x0103050F, 0xF7EDF8E4, 0x011FDC04, 0xF1F6F40C);
	r2 = D(r2, s1_1_1, 0x15F50F07, 0xD91EEFE6, 0x000C09D8, 0x080302F0);
	r3 = D(r3, s1_1_1, 0xB7FA1C11, 0x020C1CC2, 0x0D03EFDE, 0xF8ECA6EA);
	r4 = D(r4, s1_1_1, 0x030FFCEE, 0xFC00EA09, 0x1E0EFCFF, 0x1CDFE0EA);
	r5 = D(r5, s1_1_1, 0x010CF6E2, 0x09011018, 0xDBF114C9, 0xED081DCA);
	r6 = D(r6, s1_1_1, 0x070107F4, 0xFB2CCAFE, 0xF50714D6, 0xF73DEF20);
	r7 = D(r7, s1_1_1, 0x140516EE, 0xE121FCF5, 0xF50F0115, 0x040AFCE3);
	r0 = D(r0, s1_1_2, 0xF60BFEFF, 0x0D031504, 0x06FBEC1C, 0x13231400);
	r1 = D(r1, s1_1_2, 0xFD03FAFF, 0xF3E90AFC, 0x07FE0007, 0x06FD0A0E);
	r2 = D(r2, s1_1_2, 0x09F1FFFC, 0xEF0E07FF, 0xFCD7E8EE, 0x170D03FE);
	r3 = D(r3, s1_1_2, 0x09ED1FE6, 0x03EAF8F5, 0xEB08FA02, 0xF8BFDD1B);
	r4 = D(r4, s1_1_2, 0xF3E306FF, 0x081CF812, 0x13F00202, 0x1BEF00E2);
	r5 = D(r5, s1_1_2, 0x070FFBFE, 0xF9FD0801, 0x050017DF, 0xFD0513BA);
	r6 = D(r6, s1_1_2, 0x040C1003, 0x1BB014EE, 0xF91DDFF5, 0x12F42AF6);
	r7 = D(r7, s1_1_2, 0xC3FA2BD6, 0x0FEC13E7, 0xEE31DA13, 0xF6EF0BFD);
	r0 = D(r0, s1_2_0, 0xF004F00A, 0xF500ECFF, 0x0108F9F7, 0xD83B0EF3);
	r1 = D(r1, s1_2_0, 0x0705F904, 0xFE0C0605, 0x02FBFCF5, 0xDD05F82E);
	r2 = D(r2, s1_2_0, 0xF01AF80A, 0x0D07FA07, 0x220008EC, 0xDC08F1ED);
	r3 = D(r3, s1_2_0, 0xF7E104FC, 0xF807FE1C, 0x040A070B, 0xEE0105FB);
	r4 = D(r4, s1_2_0, 0x02FB04FA, 0x03F602FB, 0xFB010805, 0x0522F009);
	r5 = D(r5, s1_2_0, 0x020606F2, 0xFEFBFD00, 0xDEF41621, 0xC71B0907);
	r6 = D(r6, s1_2_0, 0xF923EA07, 0xFAE9EA0A, 0x0410150B, 0xF4E9FBF0);
	r7 = D(r7, s1_2_0, 0x1C0CD019, 0x0DF70BE6, 0xE6050413, 0xF9021810);
	r0 = D(r0, s1_2_1, 0x04FDFFF4, 0x07FCFC06, 0x0CCF0007, 0x09E4F200);
	r1 = D(r1, s1_2_1, 0x05FD0206, 0xF5FDF8F9, 0x04FCFE05, 0x02CF10E1);
	r2 = D(r2, s1_2_1, 0xFA070117, 0x010FEB0A, 0xF912F9E9, 0xF5E90C01);
	r3 = D(r3, s1_2_1, 0x0EF9F4FE, 0x0500060A, 0x0117FF0F, 0xF903F908);
	r4 = D(r4, s1_2_1, 0xFAF90BEF, 0xF603F90D, 0x080014F0, 0x24F80505);
	r5 = D(r5, s1_2_1, 0xFC0BF2FA, 0x03F900F4, 0x26CAF6F0, 0xEEDC0406);
	r6 = D(r6, s1_2_1, 0xF30201EE, 0x0FFF19E8, 0xF9F3FFD7, 0xFB0F0F03);
	r7 = D(r7, s1_2_1, 0x0506E0FA, 0xF0E3F4EB, 0x0316FBFA, 0x032EFFF4);
	r0 = D(r0, s1_2_2, 0x05E40B11, 0xFFF6FAFB, 0x0802FFFD, 0x0B04E615);
	r1 = D(r1, s1_2_2, 0x06FB0105, 0xF3E61303, 0xFD0FFAFA, 0xEFEE01FF);
	r2 = D(r2, s1_2_2, 0x0B0AEF06, 0xFF0EF600, 0x060C09D3, 0xF0F507CE);
	r3 = D(r3, s1_2_2, 0xF1E0FAF8, 0x0D3C1222, 0xFC4AF700, 0x03030415);
	r4 = D(r4, s1_2_2, 0xFD0606F6, 0x0BF901FF, 0xFCFBFA0B, 0xFB0603F2);
	r5 = D(r5, s1_2_2, 0x08F8FBFD, 0xF701FEFE, 0xFFE304FF, 0xFFEFED15);
	r6 = D(r6, s1_2_2, 0xFE19EE1D, 0xFAF12503, 0xFBEB0E00, 0x01FCEF06);
	r7 = D(r7, s1_2_2, 0xF3EAEBF3, 0xFCCFE8F1, 0x0438EB07, 0xEEE7012B);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-9.972e-03, 4.273e-02, 9.553e-03, -5.250e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.393e-02, 7.563e-04, -7.756e-03, 5.790e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(3.270e-02, 7.343e-02, -1.963e-02, -6.248e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(2.650e-02, -6.768e-03, -3.527e-02, 2.505e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.558e-01, -2.894e-02, 2.117e-02, -1.323e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(7.678e-03, 3.284e-02, -2.319e-03, -2.612e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.426e-02, 7.298e-02, 1.012e-02, 5.750e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(1.523e-02, 2.984e-02, -1.170e-02, -1.056e-01);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-DS-conv3
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x1707FE06, 0xF205EDF7, 0x07FDF806, 0x0504F110);
	r1 = D(r1, s0_0_0, 0xE80FF502, 0xDDFEF4E6, 0xFFFBFF01, 0x2A12E5E7);
	r2 = D(r2, s0_0_0, 0xF0F7E301, 0x00FEDF00, 0x12120DFF, 0xFE020206);
	r3 = D(r3, s0_0_0, 0x0EF714F3, 0x0706F4F5, 0x0006FDFF, 0x05FC0709);
	r4 = D(r4, s0_0_0, 0x1B01FF08, 0x10080336, 0xEC051112, 0xFC00F402);
	r5 = D(r5, s0_0_0, 0xEF1B0D14, 0xFFFAF60F, 0x0E090607, 0xE400EF05);
	r6 = D(r6, s0_0_0, 0xF3D5F00C, 0x0431C603, 0x05F4DCF9, 0x1EFC1B0C);
	r7 = D(r7, s0_0_0, 0x03021206, 0x28FDE3E7, 0x0CEF0FED, 0x21F2FF13);
	r0 = D(r0, s0_0_1, 0x16111009, 0x080CFA19, 0x05F90A06, 0xE7F2FF17);
	r1 = D(r1, s0_0_1, 0xEA11E207, 0xFD10F60B, 0x100DFF01, 0x012B0E0F);
	r2 = D(r2, s0_0_1, 0xFDDCEA15, 0x2DE4F1F9, 0x06C4C71F, 0x05040602);
	r3 = D(r3, s0_0_1, 0x0C222005, 0x0F031109, 0x000BFB00, 0x03FAF8FD);
	r4 = D(r4, s0_0_1, 0xF2ED1213, 0xE1001415, 0x0A070001, 0xFCE6020B);
	r5 = D(r5, s0_0_1, 0x1D10FFF3, 0xEAFC08EF, 0x04EAFEF6, 0x071003EF);
	r6 = D(r6, s0_0_1, 0xFFFCFFEC, 0xF4D6E3C8, 0x29F8E50C, 0xEBEB0DE9);
	r7 = D(r7, s0_0_1, 0xE6FC0E01, 0xFD21F211, 0x05DE09F3, 0xFFF3FB02);
	r0 = D(r0, s0_0_2, 0xF5141406, 0x140B0D09, 0x00FA03FC, 0xF5E30203);
	r1 = D(r1, s0_0_2, 0x03FFF322, 0xEC0702F7, 0xFAFB030B, 0x2BEFF4E9);
	r2 = D(r2, s0_0_2, 0xF6EE0BFA, 0x01070A0C, 0x81100A17, 0xFC0EFFF8);
	r3 = D(r3, s0_0_2, 0xFC04040B, 0x850003EC, 0xFC040009, 0xFF00F700);
	r4 = D(r4, s0_0_2, 0x01F60B20, 0x540DFBE7, 0xE7FCF9F7, 0x06040CF5);
	r5 = D(r5, s0_0_2, 0x030BF0FB, 0x21FDEA0D, 0x0303FF00, 0xF0FCFA02);
	r6 = D(r6, s0_0_2, 0x13FDFE0B, 0x1D09EEF0, 0xF7071111, 0x0F01F204);
	r7 = D(r7, s0_0_2, 0x09070FF7, 0x11EDEE0D, 0x07CD12E2, 0xFCFB0AF4);
	r0 = D(r0, s0_1_0, 0x08FA1504, 0xFE171F17, 0x08F800F3, 0xF616FDEC);
	r1 = D(r1, s0_1_0, 0xEDECFC0A, 0xFBFDF203, 0xFF0FF00C, 0x0F121B02);
	r2 = D(r2, s0_1_0, 0x0CFA0D01, 0x0D0E69E0, 0xE915CBF8, 0xF8F50F08);
	r3 = D(r3, s0_1_0, 0xF822D003, 0xF30FEFF1, 0x020609F6, 0x08F91BF7);
	r4 = D(r4, s0_1_0, 0xF6040AED, 0x15A1F321, 0xFEEC0F06, 0xFEF50101);
	r5 = D(r5, s0_1_0, 0x2B0F021B, 0x190BA2F0, 0x06FEE9F6, 0x0312E618);
	r6 = D(r6, s0_1_0, 0xE80CA304, 0xE40905FB, 0x060900E8, 0x1B0613F5);
	r7 = D(r7, s0_1_0, 0x1CF00AFD, 0xC1ECF7FF, 0x120EFF1A, 0xF807FF15);
	r0 = D(r0, s0_1_1, 0xF5EBF2F7, 0xF00317EA, 0x03050FFB, 0xE7FCF723);
	r1 = D(r1, s0_1_1, 0xEEF4EE14, 0x3005D91B, 0x082808F3, 0x102316F1);
	r2 = D(r2, s0_1_1, 0xFF110BF2, 0xE403D0E6, 0xE32CCCF3, 0x02DE04F6);
	r3 = D(r3, s0_1_1, 0x06F0E601, 0x1B24DC14, 0x0DF42EF0, 0x0AFC0212);
	r4 = D(r4, s0_1_1, 0x090F02F4, 0x69F10F18, 0xF8F43516, 0x1B03F2F5);
	r5 = D(r5, s0_1_1, 0x011D1103, 0x1AF8F30C, 0x05F4EAFF, 0xF103A814);
	r6 = D(r6, s0_1_1, 0xF52AF0F0, 0x251D09A2, 0xF517E7F3, 0x0806F1F4);
	r7 = D(r7, s0_1_1, 0xE8D007FA, 0x241513EC, 0x1CEC240E, 0xECF81700);
	r0 = D(r0, s0_1_2, 0xE9F0F50E, 0xFFE8E901, 0xFDF8FE00, 0x0BF103F9);
	r1 = D(r1, s0_1_2, 0xFBF4F6F1, 0x1DFCFA01, 0x020DFDFD, 0x23F105FF);
	r2 = D(r2, s0_1_2, 0xF4F30CF2, 0x0501E716, 0xFAE301F6, 0x01ED000C);
	r3 = D(r3, s0_1_2, 0xF5040215, 0x0CF20601, 0xFD01040C, 0xFD01FCFF);
	r4 = D(r4, s0_1_2, 0xF3150402, 0xE501F510, 0x06EC0D0D, 0x070A11EF);
	r5 = D(r5, s0_1_2, 0xF9F3FC03, 0x03EF0A08, 0xF6F9FE03, 0xFE0BF613);
	r6 = D(r6, s0_1_2, 0xFC02FEF5, 0x00FAFEEE, 0xE2F501E2, 0xFE33FD03);
	r7 = D(r7, s0_1_2, 0xECE9FF0E, 0xE7E6FF05, 0x060C090F, 0x2DD50F04);
	r0 = D(r0, s0_2_0, 0x01050407, 0x10F3EF06, 0xFD01F6F7, 0xFAF7120A);
	r1 = D(r1, s0_2_0, 0xF7F4EE05, 0x06F9F1F4, 0xF9FC010F, 0x0A02ECF1);
	r2 = D(r2, s0_2_0, 0xFCEB0CFB, 0x050CDB1D, 0x200D0B09, 0xF6FCFB01);
	r3 = D(r3, s0_2_0, 0xFC14090D, 0x04010905, 0xFD00FD0E, 0xFEFD07F3);
	r4 = D(r4, s0_2_0, 0x1CF806F6, 0xF1F321D9, 0xF5F702FA, 0x0900FA17);
	r5 = D(r5, s0_2_0, 0xEEFF0B07, 0x0C16EA07, 0x02060300, 0xF90DFB03);
	r6 = D(r6, s0_2_0, 0x0220DE0D, 0x01000A10, 0xE70BF30D, 0xEF02F6F5);
	r7 = D(r7, s0_2_0, 0xF426F9E4, 0x02E2F91E, 0x020CFC02, 0x4403FAFB);
	r0 = D(r0, s0_2_1, 0x16050103, 0xF2F508F6, 0x040003F8, 0x0B000EF6);
	r1 = D(r1, s0_2_1, 0x01FF090A, 0xFC08FFFF, 0x040BFB13, 0x25F20B03);
	r2 = D(r2, s0_2_1, 0x141B0C03, 0xF627EAFA, 0x3AE70411, 0xFDF5E5EE);
	r3 = D(r3, s0_2_1, 0x01E902EA, 0x040BE308, 0xFCF70F14, 0x09FA0005);
	r4 = D(r4, s0_2_1, 0xFE00F007, 0x960621F3, 0xEFFB08F2, 0xFA05FB0A);
	r5 = D(r5, s0_2_1, 0x2AFA1C02, 0xF8030005, 0x000504ED, 0xE408DD1F);
	r6 = D(r6, s0_2_1, 0x16ECFCF3, 0xF70EED1B, 0x0723F313, 0xF514EE10);
	r7 = D(r7, s0_2_1, 0x1204E611, 0x2FE91A13, 0xFC17F40F, 0x1EFF1CF1);
	r0 = D(r0, s0_2_2, 0xF7FB02F8, 0xE4EDFD19, 0xFF0402F8, 0x170D0D0B);
	r1 = D(r1, s0_2_2, 0x0C14FEF8, 0xE60209F9, 0xF20AF600, 0x1404FA13);
	r2 = D(r2, s0_2_2, 0x0204FDF7, 0x15FF04F1, 0x0A1702E9, 0xFCFFFF03);
	r3 = D(r3, s0_2_2, 0x000300F6, 0x1809F3C4, 0x01F9060E, 0xFE000313);
	r4 = D(r4, s0_2_2, 0xF0EE06FD, 0xC9FE02F7, 0x0006FAFA, 0x1600FCE3);
	r5 = D(r5, s0_2_2, 0xF0E9000D, 0x0D0E04F2, 0xFEF2FE06, 0x1DF8F8F2);
	r6 = D(r6, s0_2_2, 0x1FFE0104, 0x1600051B, 0x1A0202D9, 0xFA0AF9FC);
	r7 = D(r7, s0_2_2, 0x0BEB10F6, 0xE7ECFFFF, 0xFAF1060A, 0x03CEF702);
	r0 = D(r0, s1_0_0, 0x0DFF0D0C, 0x0DFB0409, 0xFC05F6F5, 0x07F3DBFF);
	r1 = D(r1, s1_0_0, 0x03F709FD, 0x070C08F6, 0x000B0400, 0x11F7F0FB);
	r2 = D(r2, s1_0_0, 0x0506F005, 0x190210F5, 0x00EBF0FB, 0xFB01F900);
	r3 = D(r3, s1_0_0, 0xEF05F7F9, 0x0F10FF17, 0xFCFF0306, 0xFA040501);
	r4 = D(r4, s1_0_0, 0x0BFDF9FD, 0xCBD5F4FA, 0x09F60816, 0xF9F80403);
	r5 = D(r5, s1_0_0, 0xFBE9000B, 0xE0EECDF9, 0x0F00FFFD, 0x02FD0FF9);
	r6 = D(r6, s1_0_0, 0x110FEEF9, 0x0917FEEA, 0x020326EF, 0x02FF04FE);
	r7 = D(r7, s1_0_0, 0xEF0A0AFA, 0xE5FEFDFA, 0xFB0FEE0A, 0xE7070309);
	r0 = D(r0, s1_0_1, 0x0302E5F9, 0x2AE619E9, 0x08140504, 0x050309FC);
	r1 = D(r1, s1_0_1, 0xF1F9C8F2, 0x10FBF618, 0xFCF70DF5, 0x120CFEEB);
	r2 = D(r2, s1_0_1, 0xE7FE01F7, 0xFC33FA0F, 0xF904FC13, 0x0000F300);
	r3 = D(r3, s1_0_1, 0x0FFF0211, 0x03DDFAFC, 0xF5F1FA08, 0xFBF60CFD);
	r4 = D(r4, s1_0_1, 0x07002F0A, 0x20FAE816, 0x0E000B00, 0xF005FE06);
	r5 = D(r5, s1_0_1, 0x310209FE, 0x1CEA0FF5, 0xFE0F0008, 0xFDFCED0A);
	r6 = D(r6, s1_0_1, 0x030B0EF9, 0xE8F004E8, 0x0411E8FF, 0xF2FBE8FA);
	r7 = D(r7, s1_0_1, 0x24140F04, 0x2C09FDFC, 0xF80031F6, 0xDDFD06F7);
	r0 = D(r0, s1_0_2, 0x0404FFEC, 0xFFF7FFF3, 0x040CFBFE, 0xEFFEFFEE);
	r1 = D(r1, s1_0_2, 0xFBE6FB1D, 0x05FB14FF, 0x03F8FFFE, 0x161FF6FD);
	r2 = D(r2, s1_0_2, 0x01F6E4EF, 0xEEFD1A07, 0xF0FAF803, 0x01F804FD);
	r3 = D(r3, s1_0_2, 0xF1010806, 0x0D15F9FE, 0x0104F8FF, 0xFFFC0005);
	r4 = D(r4, s1_0_2, 0xFBDBD6FF, 0x150F0E10, 0x0F02F808, 0x0702E2E2);
	r5 = D(r5, s1_0_2, 0xFA05040E, 0xFAF6120D, 0x0406F6FC, 0xFC0D0E03);
	r6 = D(r6, s1_0_2, 0xECE2F502, 0xF00FF31B, 0xFC06F5FD, 0xF3F70DFC);
	r7 = D(r7, s1_0_2, 0xF811F0EE, 0x1D200E0F, 0xFA17E4EE, 0xE7EFF2F9);
	r0 = D(r0, s1_1_0, 0x10040F06, 0xF3F1EE1B, 0x0110F8E3, 0xF104EF08);
	r1 = D(r1, s1_1_0, 0x00070417, 0x0E0A0004, 0xFDF9EE12, 0xEAF4F707);
	r2 = D(r2, s1_1_0, 0x040B0718, 0x1E031EF5, 0x27F90104, 0xFF0A1305);
	r3 = D(r3, s1_1_0, 0xEEFEE2D3, 0x16F5F615, 0x0105F4FC, 0xFAFA1602);
	r4 = D(r4, s1_1_0, 0x0AEF17F8, 0x53FFD881, 0xFFF3EFFE, 0xFF01FD2D);
	r5 = D(r5, s1_1_0, 0xE300EDE4, 0xFF00EA0B, 0xFD0DFDE3, 0x09F102FC);
	r6 = D(r6, s1_1_0, 0x0DFDD4F6, 0x170DF005, 0x07F40A02, 0x100500F3);
	r7 = D(r7, s1_1_0, 0x1E1304F4, 0xF50613FB, 0x06FBF824, 0x0BF4F40A);
	r0 = D(r0, s1_1_1, 0xE50A000D, 0x2D0419E2, 0x04400527, 0xF10B0E0B);
	r1 = D(r1, s1_1_1, 0x0BC9FBFD, 0xF330041F, 0xF304F519, 0xE1F4E818);
	r2 = D(r2, s1_1_1, 0x05F70D09, 0xE7E00AFE, 0x1BE202D5, 0x0BFE1B06);
	r3 = D(r3, s1_1_1, 0x131502C5, 0x01EF1DDC, 0x01FFFF24, 0x02FFF3ED);
	r4 = D(r4, s1_1_1, 0x06E90A04, 0x191B01E4, 0xF90B03D1, 0x0501102F);
	r5 = D(r5, s1_1_1, 0xF3150EFC, 0xF80D1601, 0x0208F326, 0x060A0B10);
	r6 = D(r6, s1_1_1, 0xF930101C, 0x0406F5FA, 0xF1F4F905, 0xFD05F808);
	r7 = D(r7, s1_1_1, 0xFF070CDA, 0x19FD16E2, 0xED0B0300, 0xF208F30D);
	r0 = D(r0, s1_1_2, 0x13020AF7, 0xF6F718EF, 0x0503F8F3, 0x000D0505);
	r1 = D(r1, s1_1_2, 0x01FB0503, 0xF323FB07, 0x01F401F4, 0x11F3D702);
	r2 = D(r2, s1_1_2, 0x0DFFEEFB, 0x0A03051A, 0x019009EC, 0xFDFB03FF);
	r3 = D(r3, s1_1_2, 0x051002F9, 0x0FC91901, 0xF90A02ED, 0xFCF603FC);
	r4 = D(r4, s1_1_2, 0x03C2FBFD, 0x13330B0F, 0xFFD6FE01, 0xFC090A0E);
	r5 = D(r5, s1_1_2, 0x01EC0BFB, 0xF11D0B0B, 0x0817170F, 0xF600040C);
	r6 = D(r6, s1_1_2, 0x11041D10, 0x21FB0E10, 0x270BE8FC, 0x0111FB1C);
	r7 = D(r7, s1_1_2, 0x0908F609, 0x05F4CE00, 0x08EF01F3, 0x1605F2EB);
	r0 = D(r0, s1_2_0, 0x05FF02FE, 0x0C06F607, 0x080BFE00, 0x01070E14);
	r1 = D(r1, s1_2_0, 0xDAE90423, 0x06090B0C, 0x180706F6, 0xE5F7010F);
	r2 = D(r2, s1_2_0, 0x11070105, 0x00EEF1E8, 0xF6FEF7F6, 0xF402F908);
	r3 = D(r3, s1_2_0, 0x080617F5, 0x0A03FF0E, 0x00FFFBFB, 0x02FD05F5);
	r4 = D(r4, s1_2_0, 0x1207F5FA, 0xFD0603FB, 0x000C0108, 0x0A01FB08);
	r5 = D(r5, s1_2_0, 0x07F506FC, 0x08F109FC, 0x0B01041A, 0x02F812FD);
	r6 = D(r6, s1_2_0, 0x010515DD, 0x06061C0E, 0x0FF20810, 0xF7FE03F5);
	r7 = D(r7, s1_2_0, 0xF3ECFEF1, 0x0208F607, 0x01F2090A, 0xF6F40104);
	r0 = D(r0, s1_2_1, 0xFD0FF3EA, 0x00F9ECF9, 0x080D03F0, 0x1B0417DC);
	r1 = D(r1, s1_2_1, 0x15F7ECEE, 0x06F4F0FE, 0xEBF916EC, 0x1308D51A);
	r2 = D(r2, s1_2_1, 0xFFF208F9, 0x02E2F52A, 0xF3FD1A14, 0xECF4EB48);
	r3 = D(r3, s1_2_1, 0x011406FD, 0x04FBFC0A, 0xFF05F6ED, 0x0D04FD05);
	r4 = D(r4, s1_2_1, 0xF50AEC1E, 0xF9F4F2FE, 0x0217FCE3, 0xF9F809F3);
	r5 = D(r5, s1_2_1, 0xFE0603F4, 0xEFED19E2, 0xF1FCF81B, 0x1802FC0E);
	r6 = D(r6, s1_2_1, 0xF814F20A, 0xE60810FD, 0x46EC1122, 0x17EDFE1F);
	r7 = D(r7, s1_2_1, 0xBEFB0527, 0x0EFADEE1, 0xF4F8FF10, 0xF6FDFDCD);
	r0 = D(r0, s1_2_2, 0x13FF04F1, 0x0C100B07, 0x05020301, 0xD2F8FE13);
	r1 = D(r1, s1_2_2, 0x11F102F8, 0xF712FEE3, 0x00000909, 0xDAFBFD0F);
	r2 = D(r2, s1_2_2, 0x1CEF040C, 0xF6E5F900, 0xF0F9FFF5, 0xF1F70A12);
	r3 = D(r3, s1_2_2, 0xF9EEF900, 0xEF03FD0B, 0x00F3000F, 0xFE00FFFE);
	r4 = D(r4, s1_2_2, 0x0502F316, 0xE407130C, 0x12FAFF03, 0x041A0108);
	r5 = D(r5, s1_2_2, 0x15F8F220, 0xFFCDF50B, 0x05FC01F6, 0xEA0EF914);
	r6 = D(r6, s1_2_2, 0xEA020001, 0xFCEA0A1F, 0xFF060F08, 0x0302F601);
	r7 = D(r7, s1_2_2, 0xEA08F2F5, 0x07D121FC, 0x15F6E613, 0x161408E7);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x00F608FA, 0x092BF2F6, 0xF906F5FF, 0xF613090A);
	r1 = D(r1, s0_0_0, 0x011316F9, 0xF1F3FA02, 0xFF02FC00, 0x0AF70DF5);
	r2 = D(r2, s0_0_0, 0xFD03FCF7, 0x1003EAE0, 0xF2EE1407, 0x03011307);
	r3 = D(r3, s0_0_0, 0xFE0BF007, 0xF6030005, 0x07FF0105, 0xFD06F503);
	r4 = D(r4, s0_0_0, 0xF9FB02FF, 0x06C21AE0, 0x0C100A04, 0xF302FAFC);
	r5 = D(r5, s0_0_0, 0x08F5FD01, 0x0F11F51A, 0x010AFD0C, 0x0C020B0B);
	r6 = D(r6, s0_0_0, 0xFB1CDD0C, 0xFAFCE509, 0x1423D80B, 0x0F01FC13);
	r7 = D(r7, s0_0_0, 0x1012F5D8, 0x06FBF1E3, 0xF4F402F1, 0x0A0CF5EF);
	r0 = D(r0, s0_0_1, 0x0AF40804, 0x1CF5FA01, 0xFE01040B, 0xE809FA07);
	r1 = D(r1, s0_0_1, 0xE91517FF, 0xFF0A2905, 0x0C091601, 0x0DFDFE02);
	r2 = D(r2, s0_0_1, 0x0C13EF05, 0x10EEFE0F, 0x11FFF305, 0xFEFCFCFF);
	r3 = D(r3, s0_0_1, 0xF1182605, 0xDE0BFB00, 0x000202F5, 0x03000A07);
	r4 = D(r4, s0_0_1, 0x0901F71A, 0xF9B615AB, 0x02080212, 0xF7F9F5FD);
	r5 = D(r5, s0_0_1, 0xFBEE1903, 0x25F40A00, 0xFFFEF4FE, 0x05FF09F4);
	r6 = D(r6, s0_0_1, 0x051401F8, 0xD903E710, 0xF807CFDE, 0x06F50006);
	r7 = D(r7, s0_0_1, 0x001323FA, 0xDEEE1CF7, 0xF7F8E0FB, 0xF50D0B08);
	r0 = D(r0, s0_0_2, 0x0F08E3FF, 0x160EE4ED, 0x02010102, 0x13110200);
	r1 = D(r1, s0_0_2, 0xFE111A06, 0x0011FD1E, 0xFF01F9F7, 0x04D418FA);
	r2 = D(r2, s0_0_2, 0x12F9F6F9, 0x24070D08, 0x3526FF11, 0x0503FB08);
	r3 = D(r3, s0_0_2, 0xF708FB13, 0x1201F104, 0xFE04F902, 0x0703F9FA);
	r4 = D(r4, s0_0_2, 0x0500EEE3, 0xF40413F7, 0x0013FDF6, 0x0613FC09);
	r5 = D(r5, s0_0_2, 0x0EF3F8FE, 0x17040203, 0x070604FC, 0x1A08EA05);
	r6 = D(r6, s0_0_2, 0x0410F3FC, 0x031321FA, 0x07FE1404, 0xEE0F02EC);
	r7 = D(r7, s0_0_2, 0x0CF90101, 0xE120E3F9, 0xF8FBFBF9, 0xDF0E06F8);
	r0 = D(r0, s0_1_0, 0x060AE908, 0xF6FD0007, 0x07FDF9F8, 0x16FEE9ED);
	r1 = D(r1, s0_1_0, 0x07FEFE0A, 0xF31027F8, 0x010E00FE, 0x060EF714);
	r2 = D(r2, s0_1_0, 0xFF15F1F9, 0x1E0708E2, 0x0BE6FFF0, 0x0703FD0C);
	r3 = D(r3, s0_1_0, 0x0005120C, 0xF3E0FEEC, 0xFC0AFE05, 0x0702FCF9);
	r4 = D(r4, s0_1_0, 0x19F5F5F8, 0xC640DE30, 0x060EECF0, 0x01CB0408);
	r5 = D(r5, s0_1_0, 0xE710FCF9, 0x0218F1F0, 0xFF0AF2F8, 0xFD040609);
	r6 = D(r6, s0_1_0, 0x0AF8FBFF, 0xE1110EDD, 0x05EAEFE8, 0xF9EC1301);
	r7 = D(r7, s0_1_0, 0xFAF0F8DD, 0x0E1FD5F1, 0x05F518F1, 0x0200140E);
	r0 = D(r0, s0_1_1, 0x0B030117, 0x15F30813, 0x040002F3, 0xDF0D2112);
	r1 = D(r1, s0_1_1, 0xF71A27F5, 0xFA05F701, 0x14F4F601, 0xE6B81429);
	r2 = D(r2, s0_1_1, 0x08F5F7FE, 0xFAF01E04, 0xE8CAFAF6, 0x0B01FE03);
	r3 = D(r3, s0_1_1, 0xE8FA090F, 0xEE010DEE, 0xFF040504, 0x0F1106FB);
	r4 = D(r4, s0_1_1, 0x05EFBDF2, 0xBFEAE3F9, 0xF615F51A, 0xFEFB0403);
	r5 = D(r5, s0_1_1, 0xF1001509, 0xEEE51107, 0x0E03FD02, 0x00ED0715);
	r6 = D(r6, s0_1_1, 0xFFF3F8EE, 0xF0EE0EF2, 0xF2FACB05, 0x0DE812F6);
	r7 = D(r7, s0_1_1, 0x2009A6E7, 0xED1D0B11, 0x0F09010B, 0x010611F6);
	r0 = D(r0, s0_1_2, 0x11FEF40A, 0x120100E8, 0xFFFD04FA, 0xED08FFFF);
	r1 = D(r1, s0_1_2, 0xE7FD0FFD, 0xFDF6EE00, 0x07F9FA0A, 0xF8E1E401);
	r2 = D(r2, s0_1_2, 0x04021C0C, 0xEC0A05E4, 0xF1EF06EC, 0xECF20101);
	r3 = D(r3, s0_1_2, 0x021200FF, 0xF90BE715, 0x0300FFF8, 0xFA000001);
	r4 = D(r4, s0_1_2, 0xE9F41209, 0xC7D81207, 0xEFF0FC0F, 0x05030BE8);
	r5 = D(r5, s0_1_2, 0xE328FCFD, 0x0704EEF9, 0x0509F70B, 0xFCF7FD05);
	r6 = D(r6, s0_1_2, 0x1311F8F2, 0x010BFAEC, 0x09060A14, 0x041BFAEC);
	r7 = D(r7, s0_1_2, 0xFB13FAC4, 0xFE0909E1, 0xF0ED0501, 0xF3120CF1);
	r0 = D(r0, s0_2_0, 0x1A1508DD, 0xF01109EA, 0x0305FCF8, 0xFEFBFEDE);
	r1 = D(r1, s0_2_0, 0x082811F6, 0x0FFFFEE7, 0x03E3FEFC, 0x0FF402F3);
	r2 = D(r2, s0_2_0, 0xFE1C0001, 0xFAF1F129, 0xF6FF0AE6, 0x000C02F9);
	r3 = D(r3, s0_2_0, 0x0DECF5D6, 0x060BF60C, 0xFC05FF03, 0x03FEFC00);
	r4 = D(r4, s0_2_0, 0x04FC0F07, 0xFC0F1505, 0x001AFB06, 0xF507FC05);
	r5 = D(r5, s0_2_0, 0x08CFF9FB, 0x04FDF1DE, 0x07EEFD0D, 0x040703F6);
	r6 = D(r6, s0_2_0, 0xF207FDF5, 0x020D0AFE, 0x11EAFB03, 0x0302EDFE);
	r7 = D(r7, s0_2_0, 0x08EC1523, 0xFBE5FDE0, 0x02F9F1FD, 0xFEFCFAEA);
	r0 = D(r0, s0_2_1, 0xF3F721F1, 0x0A0BE90D, 0xFF01FA09, 0xEC0A3507);
	r1 = D(r1, s0_2_1, 0xFA1907FE, 0xFC1B09F6, 0x0707050B, 0xF6FD28ED);
	r2 = D(r2, s0_2_1, 0x08E1F5FD, 0x02ECE40F, 0x25D9E6F4, 0x031E0011);
	r3 = D(r3, s0_2_1, 0xFE0DFC12, 0x000606F2, 0xFB0304FE, 0x010CFB03);
	r4 = D(r4, s0_2_1, 0x04FCF4FE, 0xD09B02E6, 0x03FA0704, 0x04130DFB);
	r5 = D(r5, s0_2_1, 0xF4FD02FA, 0x0DFEE9F2, 0x08FCEB01, 0xF7F607E8);
	r6 = D(r6, s0_2_1, 0x0216FD0C, 0x09F7131C, 0xEDD315E0, 0xFC010C01);
	r7 = D(r7, s0_2_1, 0x16C7CDF4, 0x2407FF12, 0x090BFE07, 0x0310081A);
	r0 = D(r0, s0_2_2, 0xED061001, 0xEF0E011B, 0x04FCFE04, 0x0D0CFEF7);
	r1 = D(r1, s0_2_2, 0xF604FEF3, 0x15FA0FED, 0x0E01F6F6, 0x091FE7EB);
	r2 = D(r2, s0_2_2, 0x06ED07FC, 0x0C0208EC, 0xEAF9FC0B, 0x0DE7FFF7);
	r3 = D(r3, s0_2_2, 0xF3F8F602, 0xF8E2EC18, 0xFAF80809, 0x06010204);
	r4 = D(r4, s0_2_2, 0x010C07FB, 0xDBF64404, 0x020FFDF9, 0xFC0D0104);
	r5 = D(r5, s0_2_2, 0xECE8EA04, 0xF2EA070D, 0x0105010C, 0x0FF800FA);
	r6 = D(r6, s0_2_2, 0xE51405FF, 0x1BF9FBEB, 0x0BE70AFE, 0xF712EE02);
	r7 = D(r7, s0_2_2, 0x030E05CE, 0xE3E3EE06, 0xF002FBFD, 0xD9EAED1E);
	r0 = D(r0, s1_0_0, 0xF405FFF3, 0x0C19DD06, 0xF902080B, 0x001AFF10);
	r1 = D(r1, s1_0_0, 0x09FDFC10, 0xFDF0E7E5, 0x01F2FCFC, 0xF5FE04CF);
	r2 = D(r2, s1_0_0, 0x26FAFD1E, 0x1DFD0827, 0x0720031F, 0xF5F90103);
	r3 = D(r3, s1_0_0, 0xE2EC04EA, 0xFB16FD1E, 0x0406FEFD, 0xFB020102);
	r4 = D(r4, s1_0_0, 0xF9F80502, 0xF1F618E9, 0xEBF70100, 0x060BFFFB);
	r5 = D(r5, s1_0_0, 0xFA0D0AF4, 0x1500F028, 0xFD0D0709, 0xEB0DFAFD);
	r6 = D(r6, s1_0_0, 0x07FEF202, 0x1CDEE707, 0x0BE4D90F, 0xED1412F3);
	r7 = D(r7, s1_0_0, 0x09F702E8, 0xEBFA1908, 0x06FE04F3, 0x141AF30B);
	r0 = D(r0, s1_0_1, 0xF9F5FCE4, 0xE002FD02, 0xFA020D00, 0xDCF701FE);
	r1 = D(r1, s1_0_1, 0x0DF7FE04, 0x070CEBE1, 0x0C00F80B, 0x13F0B8F4);
	r2 = D(r2, s1_0_1, 0x0AFE1020, 0x1A0FED01, 0x22E92815, 0xFFFF00F2);
	r3 = D(r3, s1_0_1, 0xE5FEFFE6, 0xF3E211F3, 0xFAFFFB09, 0x03FCF702);
	r4 = D(r4, s1_0_1, 0xF8FF0521, 0xD50CD6D5, 0xF6000305, 0xF60C0110);
	r5 = D(r5, s1_0_1, 0xE9031BFA, 0x00ECEEE5, 0xFE0206F8, 0x13FBF1EF);
	r6 = D(r6, s1_0_1, 0xEC0A00FC, 0xEDE6FBE9, 0x15FA1D0E, 0xF9FBF002);
	r7 = D(r7, s1_0_1, 0x190DD8E1, 0xDAF1F219, 0xE80FEDFB, 0x0A0F030A);
	r0 = D(r0, s1_0_2, 0xE11802EF, 0x0D1BE7F0, 0x00030402, 0xF008FFF9);
	r1 = D(r1, s1_0_2, 0x11E00820, 0x05ECF9F1, 0x0802F8FD, 0xFE07F203);
	r2 = D(r2, s1_0_2, 0x11E306FC, 0xEEEF09E3, 0xFEFE24F3, 0xF705050B);
	r3 = D(r3, s1_0_2, 0x08F8F7FF, 0x030807ED, 0x04060D03, 0x07FFF90C);
	r4 = D(r4, s1_0_2, 0x12FEFA04, 0x29B712E7, 0xFDEF0700, 0xF4050603);
	r5 = D(r5, s1_0_2, 0xE40B08F7, 0xEFFFFC05, 0xFDF9FDFF, 0xFD0AFBFE);
	r6 = D(r6, s1_0_2, 0xF1EDF2E8, 0xF8F70AFF, 0xFD0E04EC, 0x12FA0B03);
	r7 = D(r7, s1_0_2, 0xEE0B0707, 0x020C14FD, 0xFF0A0B03, 0x12F8F1DA);
	r0 = D(r0, s1_1_0, 0xF8FD03F2, 0x050B14FD, 0xFC020707, 0x00F406F4);
	r1 = D(r1, s1_1_0, 0x16130409, 0xF007E91D, 0x05FD03F8, 0x25F7E318);
	r2 = D(r2, s1_1_0, 0xEDF2FE2A, 0xA119FCD8, 0x001AFAF4, 0x05FFFC0C);
	r3 = D(r3, s1_1_0, 0x23FC00F4, 0xF5F8E1D9, 0x020502FD, 0xF7020DF9);
	r4 = D(r4, s1_1_0, 0x13FFE300, 0xDA00F5CC, 0x07EAF2F5, 0xF9FD140C);
	r5 = D(r5, s1_1_0, 0xED17F7D9, 0x3131FB17, 0xF9F4F9F8, 0x0802F9F0);
	r6 = D(r6, s1_1_0, 0x03FAFF21, 0x031EF3EC, 0x0B02FCE2, 0xF4090408);
	r7 = D(r7, s1_1_0, 0x020A11F5, 0x21F428FA, 0x00FE0FFA, 0x03060410);
	r0 = D(r0, s1_1_1, 0x0904FE13, 0xF1FF0EED, 0x00000103, 0x060506E8);
	r1 = D(r1, s1_1_1, 0xFCF7FC20, 0x260A0521, 0xF607FA0B, 0xF7E802FD);
	r2 = D(r2, s1_1_1, 0xED0210FA, 0x05F0E42C, 0xF6F2E905, 0xF7060403);
	r3 = D(r3, s1_1_1, 0xFA210DF9, 0x011EFCE2, 0xFEFEFB06, 0x0AF40803);
	r4 = D(r4, s1_1_1, 0xE0E609FE, 0xFCF91203, 0x05F915F2, 0x09FBDB0F);
	r5 = D(r5, s1_1_1, 0xDFF4EF0B, 0x0905E4F0, 0x1501FFFC, 0x0408FFDC);
	r6 = D(r6, s1_1_1, 0x0608E90C, 0x15051DEC, 0x0EF6F8F2, 0x0FFCEDE6);
	r7 = D(r7, s1_1_1, 0x08F80B44, 0xE5DED907, 0x101EF902, 0xCF053500);
	r0 = D(r0, s1_1_2, 0x05050C02, 0xF0EAED0C, 0xFD01020A, 0x04F6EC00);
	r1 = D(r1, s1_1_2, 0x14EEE2FA, 0x1204E90E, 0x021200FF, 0xF901F517);
	r2 = D(r2, s1_1_2, 0x07F500FE, 0x0DEFF9FF, 0xFAD80ADC, 0xFE06FEF9);
	r3 = D(r3, s1_1_2, 0xFC050A08, 0x10F80ABD, 0x0208F8FB, 0x01040001);
	r4 = D(r4, s1_1_2, 0xF605ECFE, 0x16C61302, 0x01FCFCE5, 0x08FFF907);
	r5 = D(r5, s1_1_2, 0xFAEEFDE6, 0x03F102FE, 0xF60009F6, 0x0DFBFCF1);
	r6 = D(r6, s1_1_2, 0xF0FF00FF, 0xF401FF0E, 0xFAEA0B0B, 0x1B120F13);
	r7 = D(r7, s1_1_2, 0xF90919E0, 0x0FF6F8EF, 0x0205F20D, 0xEBE3DCFE);
	r0 = D(r0, s1_2_0, 0xF3FF0AD3, 0x011103E2, 0xFEFE0A03, 0xFF011CF3);
	r1 = D(r1, s1_2_0, 0x0BF4F916, 0xFDFE01E7, 0x090909F8, 0xF60D0C0C);
	r2 = D(r2, s1_2_0, 0xF009FD0D, 0x2318F6E5, 0xF019FEFC, 0x0D0505F9);
	r3 = D(r3, s1_2_0, 0x010102F6, 0xFCFDF8E9, 0xFEFE0102, 0xFE0405FF);
	r4 = D(r4, s1_2_0, 0xFA10FCFA, 0xECCADC1A, 0x0508EC03, 0xF5F71309);
	r5 = D(r5, s1_2_0, 0x0610FE0C, 0xECF7FDF4, 0x060803F4, 0xF605EFE9);
	r6 = D(r6, s1_2_0, 0x0207FBDE, 0x0DF8F3EE, 0x07061DC8, 0xFA021216);
	r7 = D(r7, s1_2_0, 0xDB10D6E6, 0x080B07FC, 0x12EB04FC, 0xFD060011);
	r0 = D(r0, s1_2_1, 0x0403FDE3, 0x00F814FD, 0x05050108, 0x001EFAF8);
	r1 = D(r1, s1_2_1, 0xF70AF705, 0x0004FAF0, 0xFF19FEFD, 0x17FDE102);
	r2 = D(r2, s1_2_1, 0x0C0AF50C, 0x03DDEE00, 0x17250B14, 0xF1F7EA0B);
	r3 = D(r3, s1_2_1, 0xFF090C00, 0xF7FFF3F8, 0xF3FFFC06, 0x050302FC);
	r4 = D(r4, s1_2_1, 0x00F6F303, 0x0616DEE7, 0x00FC080D, 0x02FCFCF8);
	r5 = D(r5, s1_2_1, 0xE6FE21FD, 0x122E18FE, 0xFDFFFEF3, 0x041405E4);
	r6 = D(r6, s1_2_1, 0xF3E4F7F8, 0x09E8F9F2, 0xF8031E0E, 0x03F4E610);
	r7 = D(r7, s1_2_1, 0x1AEFFFFE, 0x00141501, 0x04FE03F4, 0xF60318E7);
	r0 = D(r0, s1_2_2, 0xFC0921F7, 0xF6061503, 0x0701FB01, 0x0900F000);
	r1 = D(r1, s1_2_2, 0x07F4010F, 0x0BF800F3, 0xFF01000A, 0x05050B07);
	r2 = D(r2, s1_2_2, 0xFA070103, 0x00F00BFD, 0x1607F11C, 0xFD05F8FD);
	r3 = D(r3, s1_2_2, 0x09F502FE, 0x0CFDF2E4, 0xFC020A04, 0x0700FF02);
	r4 = D(r4, s1_2_2, 0x04EB0B02, 0x26AD1AF8, 0xFA01F90E, 0x0DFE0608);
	r5 = D(r5, s1_2_2, 0xF1F50DEB, 0xEDFF03EC, 0xEE081FF6, 0x0DFEF4EF);
	r6 = D(r6, s1_2_2, 0x00F809F3, 0x0700F20A, 0xEA0C05F5, 0xF3EAF8FE);
	r7 = D(r7, s1_2_2, 0x0D0DF4E4, 0x09E8EBF6, 0x05030607, 0xF90BFAFE);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFFF3F905, 0x140B0302, 0xFEFE05FD, 0xFAFC090E);
	r1 = D(r1, s0_0_0, 0x000110F8, 0x02F7FE18, 0x0309F9FC, 0x03E5F2F6);
	r2 = D(r2, s0_0_0, 0x0112041A, 0x171410F5, 0x0EEE2818, 0x030301FC);
	r3 = D(r3, s0_0_0, 0xFBE7FF04, 0xF4E7F9E0, 0x0100FA05, 0x040804F7);
	r4 = D(r4, s0_0_0, 0xFD0B0DF9, 0x2E1B0FFF, 0xF900FAFB, 0x050006F2);
	r5 = D(r5, s0_0_0, 0x13F70603, 0x2011130C, 0xFDED000A, 0xF0FB040D);
	r6 = D(r6, s0_0_0, 0x07F707EE, 0x0114D7E9, 0x0B04FCF8, 0x0903FA04);
	r7 = D(r7, s0_0_0, 0xE218F216, 0x2F21F5D4, 0x0AFF05F3, 0x240C0F06);
	r0 = D(r0, s0_0_1, 0xF7EBEBF5, 0x0D06F706, 0xFEF90B08, 0xFAFA09E7);
	r1 = D(r1, s0_0_1, 0xF1E418FB, 0xFA13FE00, 0x0009F8F6, 0x05ED05E9);
	r2 = D(r2, s0_0_1, 0x021B01F6, 0xFFE7F408, 0xF7E6059D, 0xFCF60507);
	r3 = D(r3, s0_0_1, 0xFDEBFE08, 0x0C12C9EB, 0x070A01F8, 0x01030100);
	r4 = D(r4, s0_0_1, 0xF1FC03FB, 0xA8070CF8, 0x01EAEA13, 0x00050502);
	r5 = D(r5, s0_0_1, 0x0111EC09, 0x05070714, 0xFD0FFB05, 0xE701F8F8);
	r6 = D(r6, s0_0_1, 0x0120FEF8, 0xCFFBB614, 0xFEFEF906, 0x020DF6F4);
	r7 = D(r7, s0_0_1, 0x09EF040B, 0x0DF819EB, 0xEF05F201, 0xFB0BFAFE);
	r0 = D(r0, s0_0_2, 0xF8060510, 0x0AFCF805, 0xFC060206, 0x082E11F7);
	r1 = D(r1, s0_0_2, 0xEE0009F9, 0x00F4F810, 0x020F0B10, 0x2AE7F1F3);
	r2 = D(r2, s0_0_2, 0xE7030401, 0x0803E30A, 0x1820E3F9, 0xF9FD0405);
	r3 = D(r3, s0_0_2, 0x09F70BFF, 0x080F0603, 0xF8F4FDF8, 0xFE0DF9FC);
	r4 = D(r4, s0_0_2, 0x0D090604, 0xF8F5D3DF, 0x08F80303, 0x11FA0303);
	r5 = D(r5, s0_0_2, 0x1F0103FD, 0xFC0CF5FB, 0x09FBFAFE, 0x110AF5F1);
	r6 = D(r6, s0_0_2, 0x130DFEF9, 0x0A0BF0F6, 0xF8FCFB04, 0xFD110AF6);
	r7 = D(r7, s0_0_2, 0xFFE1F504, 0x110AFF06, 0xFB0A13FC, 0x0FD90BF9);
	r0 = D(r0, s0_1_0, 0xF202F924, 0x0416F403, 0x0103FC01, 0xF825EF02);
	r1 = D(r1, s0_1_0, 0xF2E810FD, 0x17F101FF, 0xF9F70303, 0x0B250DFC);
	r2 = D(r2, s0_1_0, 0x08E900F5, 0xFDEFE818, 0x12FF01F8, 0x01080400);
	r3 = D(r3, s0_1_0, 0x0E0C0606, 0xF1FC99E9, 0xF60403FD, 0xF806FD04);
	r4 = D(r4, s0_1_0, 0x0EF405EB, 0xF702EBC4, 0x0DF906F8, 0x14FE0303);
	r5 = D(r5, s0_1_0, 0xF50010FC, 0xF915E6E4, 0xF4F40509, 0x0C13E704);
	r6 = D(r6, s0_1_0, 0xF4E4FDF9, 0xC506DEE8, 0xFCFBEFE7, 0xF4DC1208);
	r7 = D(r7, s0_1_0, 0x1EF9E6F6, 0x120D091C, 0x0411EFF4, 0xEEFEEBEB);
	r0 = D(r0, s0_1_1, 0xFDFA1AF8, 0xFFFD080D, 0x08FA04FB, 0xF6CEEBE5);
	r1 = D(r1, s0_1_1, 0x0612260E, 0x01F90ACE, 0x1CE10421, 0xF3B02007);
	r2 = D(r2, s0_1_1, 0x1008F72C, 0xFA17FEE2, 0x81DBDF9F, 0xFA1604F6);
	r3 = D(r3, s0_1_1, 0xEF01EC02, 0x0A058113, 0xFAFF00E7, 0x0419F314);
	r4 = D(r4, s0_1_1, 0x05F5F3F8, 0xF9E010AA, 0x1201F410, 0xF00D0825);
	r5 = D(r5, s0_1_1, 0xE61B1318, 0xF0F00407, 0xFD0DF10D, 0x010CEC10);
	r6 = D(r6, s0_1_1, 0xE9FD190A, 0x18F8B6FE, 0xFE03C4F3, 0x0FEA0EF0);
	r7 = D(r7, s0_1_1, 0x0701F814, 0x08D3FA50, 0x06F30318, 0x13EB02FF);
	r0 = D(r0, s0_1_2, 0x01F3060F, 0x13FB05FD, 0xFE04FFFD, 0xF703FAF0);
	r1 = D(r1, s0_1_2, 0xE70513EE, 0xF1020202, 0xFEF8FE00, 0x2DF5001C);
	r2 = D(r2, s0_1_2, 0xF9090D04, 0xEEF0E116, 0x810EF7D0, 0x05EE05FC);
	r3 = D(r3, s0_1_2, 0xF5F808FF, 0xFB0DCBF7, 0x00EC00F9, 0xFFFC0600);
	r4 = D(r4, s0_1_2, 0xE9010B02, 0xEB15E110, 0x00F51907, 0xFFFB0807);
	r5 = D(r5, s0_1_2, 0xF1F0120B, 0x050607ED, 0x07FA0304, 0xF707DFDB);
	r6 = D(r6, s0_1_2, 0xF807F400, 0x210A0BFE, 0x0520FC1A, 0xFAE0FB12);
	r7 = D(r7, s0_1_2, 0x0EFB0216, 0x1AFEEA08, 0x0503F3FB, 0xF9DF1B01);
	r0 = D(r0, s0_2_0, 0x0602F502, 0x170DEFE2, 0x02FA0108, 0xF90503FC);
	r1 = D(r1, s0_2_0, 0x0E040102, 0xF910EEDA, 0x0AF3FB03, 0x18F7E3FE);
	r2 = D(r2, s0_2_0, 0x04FF03FD, 0xEFECD5ED, 0xF8FEFBE5, 0x0011FAE9);
	r3 = D(r3, s0_2_0, 0xFD00FA00, 0xF40DFAD0, 0x00FCFFF6, 0xF2F60100);
	r4 = D(r4, s0_2_0, 0xF81217FE, 0x30F50019, 0xF7FEFEF6, 0x0703FB17);
	r5 = D(r5, s0_2_0, 0xEF020827, 0x0BF9DA06, 0x0214F41B, 0xF0FC08FA);
	r6 = D(r6, s0_2_0, 0xF9E5F107, 0x0406F6D3, 0x01FDF2FE, 0xF9F302EE);
	r7 = D(r7, s0_2_0, 0x02E2EC15, 0xDA0BF1C8, 0xF008F405, 0xF9070803);
	r0 = D(r0, s0_2_1, 0xFBFEAE06, 0x030406E1, 0x050703FD, 0x01F80008);
	r1 = D(r1, s0_2_1, 0x13111403, 0xE8F402AC, 0x07ED00F6, 0x0B08CA9B);
	r2 = D(r2, s0_2_1, 0xF70A0308, 0xFE14F7E4, 0x9B09DEBA, 0x0AF60509);
	r3 = D(r3, s0_2_1, 0xFF0BFD02, 0x0F0BDA23, 0x14FA07FB, 0x0907F719);
	r4 = D(r4, s0_2_1, 0xF509E1E3, 0x16F80737, 0x0BF507FD, 0xFEFB1522);
	r5 = D(r5, s0_2_1, 0x22FC1300, 0xF4F5EDCC, 0xFFF7F714, 0x0509F108);
	r6 = D(r6, s0_2_1, 0xEA05F04D, 0x0CEA0913, 0x2BF0E5C5, 0x01090CED);
	r7 = D(r7, s0_2_1, 0x020AEEFE, 0xB8EC18D4, 0x1E07EE09, 0xFE1EFCFA);
	r0 = D(r0, s0_2_2, 0x0C01D7FA, 0x0E0F0618, 0x03040009, 0xF901F90D);
	r1 = D(r1, s0_2_2, 0xECF6F819, 0xF4FEFBF3, 0xFEF7EB1A, 0x0AF1F62E);
	r2 = D(r2, s0_2_2, 0xF60303F4, 0xD7FBD910, 0xEE13F8A6, 0x0D0313E3);
	r3 = D(r3, s0_2_2, 0x03FDFEE2, 0x1CF8CDEB, 0x04FB15E7, 0xFFFD0108);
	r4 = D(r4, s0_2_2, 0xFFFF0C33, 0x14180E16, 0x06F10BF9, 0x03F0EE00);
	r5 = D(r5, s0_2_2, 0x1D1A1BE4, 0x07F2FD00, 0x06F0FBEB, 0x0005DFDC);
	r6 = D(r6, s0_2_2, 0xF9EF0F06, 0x0F0AFDF4, 0xED00FFE6, 0xF800F414);
	r7 = D(r7, s0_2_2, 0xEFF1F60E, 0xEE0516F7, 0xE0FC1AFF, 0xF91B2C0B);
	r0 = D(r0, s1_0_0, 0x0F0EF9E9, 0x0B08F8F6, 0x0705FEFF, 0x18F0EDF6);
	r1 = D(r1, s1_0_0, 0x0BFCF607, 0x01210D07, 0xEF05FE07, 0xF7FFE605);
	r2 = D(r2, s1_0_0, 0x1602FAFE, 0x21F9F20E, 0x12020AFF, 0x05F9FE00);
	r3 = D(r3, s1_0_0, 0xFB04FF01, 0x18FF0AE4, 0x09FF02FB, 0x0104FAF8);
	r4 = D(r4, s1_0_0, 0xF710FF04, 0x2D290CF8, 0xF002EF03, 0xFD04F9F1);
	r5 = D(r5, s1_0_0, 0xF7200201, 0xFE07F606, 0xF809F705, 0x0709FCF6);
	r6 = D(r6, s1_0_0, 0xF0E9F3F4, 0x0711E807, 0x0205F8FF, 0xFBFB00FD);
	r7 = D(r7, s1_0_0, 0xFA0A090B, 0x1A39ED1A, 0x0AE9FF02, 0x03FFFDF6);
	r0 = D(r0, s1_0_1, 0xF7F7FC08, 0xEFEB17EF, 0x0405F904, 0x07EF0506);
	r1 = D(r1, s1_0_1, 0x0C1101E9, 0xDCE20410, 0xFCFDFFFD, 0x0212E2E7);
	r2 = D(r2, s1_0_1, 0xF60EFA05, 0x121B19FD, 0x1C0F0CF9, 0xFE0602F6);
	r3 = D(r3, s1_0_1, 0x07FDF7F5, 0xFB0AFD03, 0x09FB060B, 0x0CFFFB0C);
	r4 = D(r4, s1_0_1, 0xFBF7F403, 0xAE3CCAD4, 0xF3FB0BFD, 0xEA1003EA);
	r5 = D(r5, s1_0_1, 0x1DEB0EF9, 0xEDF80E19, 0xE8F90409, 0x19F6FD04);
	r6 = D(r6, s1_0_1, 0xFBDE09FA, 0xE0FC01FC, 0x24FE01EC, 0x07090803);
	r7 = D(r7, s1_0_1, 0xF203FEF6, 0x33DB0B12, 0x0516070B, 0xF502EF07);
	r0 = D(r0, s1_0_2, 0xFB050AF6, 0x0A05FFE8, 0x03FF0002, 0xF40601F5);
	r1 = D(r1, s1_0_2, 0xE70002E6, 0xF80DF0F7, 0x000704FC, 0xEC1002E5);
	r2 = D(r2, s1_0_2, 0xE50A03F1, 0xFB01FCFA, 0xC51B08ED, 0x04F9FFFF);
	r3 = D(r3, s1_0_2, 0xFFFAF207, 0xFFF81BEA, 0x04F605FF, 0x0AFE0905);
	r4 = D(r4, s1_0_2, 0xFE0700FF, 0x0EFAF6DD, 0xEDFEFF03, 0x0AF8ED01);
	r5 = D(r5, s1_0_2, 0x04020411, 0x13EC120A, 0xF70901F8, 0x1EFC1002);
	r6 = D(r6, s1_0_2, 0xFA020000, 0xEDE617F9, 0x00F106FD, 0x1AF8FC0D);
	r7 = D(r7, s1_0_2, 0xF2CFFB0D, 0x1706F50E, 0xF30B0405, 0xE71AEA21);
	r0 = D(r0, s1_1_0, 0x0306E112, 0x060FF8FD, 0xFFFC0B09, 0xEC09F814);
	r1 = D(r1, s1_1_0, 0xFFEF0015, 0xF9040A09, 0xEB1300F7, 0xFDD901FA);
	r2 = D(r2, s1_1_0, 0x0BF4DF0D, 0xDAEE0BF7, 0x02EC03FD, 0x08F7E311);
	r3 = D(r3, s1_1_0, 0xF7130E02, 0x0CFE16EA, 0x02FFFAFC, 0xFAF90609);
	r4 = D(r4, s1_1_0, 0x02EE0BFA, 0xF7C9FD08, 0xFB10F3FE, 0x0CFEF3F7);
	r5 = D(r5, s1_1_0, 0x02F8F1EB, 0x0E09F9EB, 0xFD060505, 0x1909FDFB);
	r6 = D(r6, s1_1_0, 0x1012F40F, 0x1BF3C60F, 0xEEFCF106, 0x0DE5FA0D);
	r7 = D(r7, s1_1_0, 0xF51416E8, 0xF1E4D4F4, 0x0BF3FDFD, 0x0BFDF1F9);
	r0 = D(r0, s1_1_1, 0xF8EBE712, 0xEE050B04, 0x09FFEF07, 0x03070426);
	r1 = D(r1, s1_1_1, 0xFCEA1500, 0x07F60FFC, 0x0DF8ED03, 0x212A1B08);
	r2 = D(r2, s1_1_1, 0x00FCEAEC, 0xF3F715FA, 0xD4E7F81D, 0x14FC050A);
	r3 = D(r3, s1_1_1, 0xF5EC2E1B, 0xEC050907, 0xFD01F5F2, 0x10F42D13);
	r4 = D(r4, s1_1_1, 0x21FFCDF4, 0x0CDBE2F1, 0xFB0C21FF, 0x09FFDB1E);
	r5 = D(r5, s1_1_1, 0x21F617F7, 0xDEFE10E1, 0x00F3F4EE, 0xD5FDF512);
	r6 = D(r6, s1_1_1, 0x0B090ECD, 0xFAFBE211, 0x04FC0EFD, 0xEF0413F1);
	r7 = D(r7, s1_1_1, 0xFEFB060D, 0xFD09FBF7, 0x0D06F7E2, 0x16D7FEEF);
	r0 = D(r0, s1_1_2, 0xF6FC05F9, 0xEC1505FA, 0xFBFE0400, 0xEB000603);
	r1 = D(r1, s1_1_2, 0xED06E602, 0x1DE5E3E4, 0xFCF406F0, 0x0D02E4FB);
	r2 = D(r2, s1_1_2, 0xFDEF030B, 0x1100F919, 0xD7031009, 0x020F0E08);
	r3 = D(r3, s1_1_2, 0x15EA06F8, 0xFE120B0E, 0x0C080812, 0xFE0607F5);
	r4 = D(r4, s1_1_2, 0xE3FE1120, 0xD9D2F80C, 0xEC00FA02, 0xF10CFF0A);
	r5 = D(r5, s1_1_2, 0xFA13EC04, 0x01F41F06, 0xFE0A07FF, 0xFA090303);
	r6 = D(r6, s1_1_2, 0x0AF01011, 0xF00F0D09, 0x050D0416, 0x09EEEB07);
	r7 = D(r7, s1_1_2, 0x0201FEF4, 0xEC0A050B, 0xFDFFFF03, 0x04F30905);
	r0 = D(r0, s1_2_0, 0xF9F60601, 0x0BE504DB, 0x03FFFEFB, 0x28FD02F4);
	r1 = D(r1, s1_2_0, 0xF30E0104, 0xD3011BF6, 0xFD0C0C0F, 0xFBE516ED);
	r2 = D(r2, s1_2_0, 0xF605020C, 0xCDEAF5E0, 0xFA0002F9, 0xFC03ED03);
	r3 = D(r3, s1_2_0, 0x1E18FDFD, 0x0BF401FC, 0xFEFB0002, 0xFD07FC03);
	r4 = D(r4, s1_2_0, 0xF4F7FCFA, 0x0A0D1C23, 0xF60F0301, 0x03EEF2F5);
	r5 = D(r5, s1_2_0, 0xE00FECFF, 0xFDFE0800, 0x0013FB02, 0x0007FF01);
	r6 = D(r6, s1_2_0, 0x2608F1D7, 0x12FFF902, 0xFCFEFCF4, 0xFC02F7FD);
	r7 = D(r7, s1_2_0, 0xE91303FA, 0x0CCCFFDE, 0x1904F900, 0xE9030CE7);
	r0 = D(r0, s1_2_1, 0x1200E906, 0x06F6F814, 0x03FC1102, 0xF61F2313);
	r1 = D(r1, s1_2_1, 0xD3FD0512, 0x201A0AFC, 0x0203220D, 0x10050105);
	r2 = D(r2, s1_2_1, 0x1209EFFC, 0xB9F9E409, 0xD004E118, 0xF8F9E7F5);
	r3 = D(r3, s1_2_1, 0x09F50205, 0x02FBE01C, 0x04FA160A, 0x06FCECF3);
	r4 = D(r4, s1_2_1, 0xFAECDEE8, 0x0008EE1C, 0xE8071806, 0x0B0C09FB);
	r5 = D(r5, s1_2_1, 0x18040BE3, 0xE9E21308, 0xE306E003, 0x18F9E1EF);
	r6 = D(r6, s1_2_1, 0x04F5231F, 0xF411F9FA, 0x14E9FE02, 0x001103FF);
	r7 = D(r7, s1_2_1, 0xDE1FBFF0, 0xD24414E1, 0x14F7FDFD, 0xF0ED18F6);
	r0 = D(r0, s1_2_2, 0xE6090405, 0xDCE80101, 0xFCFC0202, 0x0EFFF908);
	r1 = D(r1, s1_2_2, 0xFFEE010F, 0x10170515, 0xFE0105F8, 0xF20CF0F9);
	r2 = D(r2, s1_2_2, 0xFAF8F30D, 0xF1071718, 0xDCF4DA1A, 0x06010DFD);
	r3 = D(r3, s1_2_2, 0xFD0A05FA, 0xFBEE0216, 0x01FF0407, 0x05FD00F9);
	r4 = D(r4, s1_2_2, 0x0B08F8FC, 0x2C2FE112, 0xF1F30512, 0xFAFDF901);
	r5 = D(r5, s1_2_2, 0x000AEEFE, 0x05FA170A, 0xF408F2FA, 0xF1FAE8F9);
	r6 = D(r6, s1_2_2, 0xFC0A06FC, 0x04F70221, 0xFAF7010A, 0x2E0B13F7);
	r7 = D(r7, s1_2_2, 0xE5F9FD2E, 0xF8EDF31A, 0x0A0BF80E, 0xFB201606);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x010C0AF2, 0xF4FB11EC, 0xFD03030B, 0xF7FF04EF);
	r1 = D(r1, s0_0_0, 0xFB000BEF, 0x03EDE704, 0x05FA00FF, 0x190AFEFD);
	r2 = D(r2, s0_0_0, 0xF8FC0AF2, 0xED2FE7FE, 0x111BEFF2, 0xFDF50FFC);
	r3 = D(r3, s0_0_0, 0x0E0AFFEA, 0x03191FFF, 0xFF000300, 0x01020606);
	r4 = D(r4, s0_0_0, 0x120FFA05, 0xD8DCE3DF, 0x0EF909F9, 0xF017F0F9);
	r5 = D(r5, s0_0_0, 0x090600F4, 0xF3F606E8, 0xF6F6FC09, 0x00FAFEF5);
	r6 = D(r6, s0_0_0, 0x10FAEF02, 0xECD510E0, 0xFAF5FA0B, 0x04FF03F5);
	r7 = D(r7, s0_0_0, 0x0002EA0F, 0xDE10FDF3, 0x0CFA07F8, 0x09240CF6);
	r0 = D(r0, s0_0_1, 0xFAF400FF, 0x17F200F3, 0xFE000206, 0xF614F605);
	r1 = D(r1, s0_0_1, 0xFF1003DC, 0x06FFFE0E, 0xE7FE0900, 0x12BDD7FC);
	r2 = D(r2, s0_0_1, 0xDDF008EC, 0x1305180E, 0xF8F00907, 0x12FE05F1);
	r3 = D(r3, s0_0_1, 0x0901031A, 0xF60D19FF, 0xFEFE0901, 0x0307FF00);
	r4 = D(r4, s0_0_1, 0xFCF01704, 0x2DDECEB9, 0x07050304, 0xFAEFFDF9);
	r5 = D(r5, s0_0_1, 0x0301F8F4, 0x14F4FAE2, 0xFEFEFB00, 0x0804FC06);
	r6 = D(r6, s0_0_1, 0xFB0C0106, 0xE8F7FDDB, 0x08FFFB0F, 0xE6FBFAE9);
	r7 = D(r7, s0_0_1, 0x07FF0B0F, 0x0AF8F2FE, 0xFF18F30B, 0xDEEEFB04);
	r0 = D(r0, s0_0_2, 0x100C0A0C, 0xFD11FD06, 0xFBFC0003, 0xF7FF0AF9);
	r1 = D(r1, s0_0_2, 0xF80300D3, 0x0BF7E311, 0x03FB00F9, 0xDE0C2B09);
	r2 = D(r2, s0_0_2, 0xFAE813FB, 0xF2FEEFF0, 0xFCF50804, 0x06FDFB01);
	r3 = D(r3, s0_0_2, 0xF50DFF04, 0xFE0F0D18, 0x0300FE09, 0xFEFDFE02);
	r4 = D(r4, s0_0_2, 0x0A02FF07, 0xB80AB7EF, 0x050A11EE, 0xF502000B);
	r5 = D(r5, s0_0_2, 0x07F7F7EE, 0x03FBF5EC, 0x03050C05, 0x01FEFFF7);
	r6 = D(r6, s0_0_2, 0x02191E04, 0x09FD0803, 0xF6150C0B, 0xF9EFFFEA);
	r7 = D(r7, s0_0_2, 0x0AEC1703, 0x0EF6D7E3, 0xFA040500, 0xF71502FD);
	r0 = D(r0, s0_1_0, 0x12E4F20C, 0x07F20E0D, 0xF70D080B, 0x070E26FD);
	r1 = D(r1, s0_1_0, 0x08FF08F3, 0xEE15EE13, 0xFFEEEA04, 0xDB04FDDD);
	r2 = D(r2, s0_1_0, 0xED08140B, 0xE905EDFB, 0xE41014FD, 0x020110F8);
	r3 = D(r3, s0_1_0, 0xF5EDF7FA, 0x0D0B1312, 0x09FFFC0A, 0x0704060E);
	r4 = D(r4, s0_1_0, 0xFD11FCEE, 0xE7080BF2, 0xF7FE02F2, 0x0705DDF5);
	r5 = D(r5, s0_1_0, 0xF41504EC, 0xD5110015, 0xFFFC0A1A, 0x010EFE01);
	r6 = D(r6, s0_1_0, 0xE913F9EE, 0xF50C1BF9, 0xE90905FC, 0x01000410);
	r7 = D(r7, s0_1_0, 0xF901FD06, 0xF0D5D2D7, 0x1717FA07, 0xE3FB19FB);
	r0 = D(r0, s0_1_1, 0xE7F6EE07, 0xFDE8EF26, 0xFA010208, 0xF9F31EDD);
	r1 = D(r1, s0_1_1, 0x0807F0E3, 0xFBE8FC13, 0x010F0F0A, 0xF81D08F9);
	r2 = D(r2, s0_1_1, 0xD3FFF817, 0x1C0525F3, 0xE20009F6, 0xFD0CEA0D);
	r3 = D(r3, s0_1_1, 0x17FEEFED, 0xF7131504, 0xFFF60306, 0xFF090708);
	r4 = D(r4, s0_1_1, 0x15FD1BF8, 0xFB1101FE, 0xFEF21A04, 0xF808DCFD);
	r5 = D(r5, s0_1_1, 0x02F711E5, 0xFAFDFCDE, 0xE91706EF, 0xF6F30F00);
	r6 = D(r6, s0_1_1, 0x0B0A9A07, 0x0720F402, 0xD4FF2804, 0x150E10D3);
	r7 = D(r7, s0_1_1, 0xF9050C0F, 0xF7B802F5, 0xFD14F919, 0x04D1021E);
	r0 = D(r0, s0_1_2, 0xFFDD0112, 0x010AFF1A, 0x06FF0500, 0xEDF9E5EC);
	r1 = D(r1, s0_1_2, 0x16FD08CB, 0x1BEAFBFE, 0xFC02EF03, 0xFB0727E2);
	r2 = D(r2, s0_1_2, 0x00F701F9, 0x07E02615, 0xF6160ADB, 0x12F501FD);
	r3 = D(r3, s0_1_2, 0x02FC0800, 0x0CF9FF11, 0x03FA0205, 0x0400FFFF);
	r4 = D(r4, s0_1_2, 0xFC1DFCFB, 0x1FB4E424, 0xFCFC0FFC, 0x0204120B);
	r5 = D(r5, s0_1_2, 0xF00B12FE, 0x0A00EFED, 0xFFFF050D, 0xFFF40E07);
	r6 = D(r6, s0_1_2, 0xFA12F0FD, 0x0F0AF7F4, 0xEDE50A14, 0x030EEAFB);
	r7 = D(r7, s0_1_2, 0x170E05F0, 0x03100BF5, 0xE9F5E9FA, 0x0EFAED2B);
	r0 = D(r0, s0_2_0, 0x0BF9F6FC, 0x0C10F402, 0x03FD0D0B, 0xE0E811F5);
	r1 = D(r1, s0_2_0, 0xFCF008FC, 0x17F8F8F9, 0x090BF6F7, 0x051EF60F);
	r2 = D(r2, s0_2_0, 0xE518F804, 0xEF1BDD1B, 0xE5051102, 0xF5FB0803);
	r3 = D(r3, s0_2_0, 0x11F21400, 0xF41519F8, 0xFEFFFFFD, 0x07000300);
	r4 = D(r4, s0_2_0, 0xF7F6EDF4, 0x0201280A, 0xF8F5F8FB, 0x05F8080C);
	r5 = D(r5, s0_2_0, 0x0E0DF5FA, 0xE9FB2907, 0xF7FA05FC, 0x06F606FF);
	r6 = D(r6, s0_2_0, 0x01EE2307, 0xECF6110A, 0x0604EF0F, 0xF01A0902);
	r7 = D(r7, s0_2_0, 0x0013EB0C, 0xF3A3E200, 0x080613FE, 0x0113F707);
	r0 = D(r0, s0_2_1, 0xF3FF0823, 0x0BF7FBFC, 0xF9000605, 0x1D17FFEF);
	r1 = D(r1, s0_2_1, 0x0E180500, 0xF5EAEA04, 0xF809F50B, 0x07E90E0F);
	r2 = D(r2, s0_2_1, 0xEF071AFB, 0xE8F0E7E4, 0x180E2E02, 0x04020A01);
	r3 = D(r3, s0_2_1, 0x11F3180F, 0xE809142D, 0xFCFFFA01, 0x03FF0403);
	r4 = D(r4, s0_2_1, 0xD5000F06, 0x1C1111F6, 0x110A1609, 0xF001F906);
	r5 = D(r5, s0_2_1, 0x0901DCF0, 0x14FF0EF9, 0xF2FE01FE, 0x07FF0A0C);
	r6 = D(r6, s0_2_1, 0x1BE4C71D, 0x09F00E27, 0xFCF917EE, 0xEC04F501);
	r7 = D(r7, s0_2_1, 0xFBF4FF09, 0x1D0DECDD, 0xEDDC3604, 0x040FD2FE);
	r0 = D(r0, s0_2_2, 0x0CFE0C04, 0xE1F6F9E2, 0xFAFDFC00, 0xD9F4080D);
	r1 = D(r1, s0_2_2, 0x01F90FFC, 0xF5F70703, 0x0205FCF5, 0x07041D09);
	r2 = D(r2, s0_2_2, 0x07FA06EE, 0xFFFC03E9, 0x01F218DF, 0xFA0302F0);
	r3 = D(r3, s0_2_2, 0x01FD0203, 0xF0E50112, 0xF906FA04, 0x02FDFBFA);
	r4 = D(r4, s0_2_2, 0xF3FA02F2, 0xB7DE0CE6, 0xF6FC02F2, 0xFCFF1912);
	r5 = D(r5, s0_2_2, 0x210401EB, 0x14EF1800, 0xFEFB0F04, 0xF70B07FB);
	r6 = D(r6, s0_2_2, 0xEBF60907, 0xEE060B04, 0xF91A07E8, 0x0E0338DA);
	r7 = D(r7, s0_2_2, 0x09F70804, 0xEF24F8E9, 0x1AF60AFF, 0x1403F8EE);
	r0 = D(r0, s1_0_0, 0xE20BF2FA, 0x080C2200, 0x010306FF, 0x09060F04);
	r1 = D(r1, s1_0_0, 0x000808F4, 0xEDDD0F1B, 0xF30B0A0D, 0xFF080217);
	r2 = D(r2, s1_0_0, 0x05FBF6F2, 0x0123EAE9, 0xEB1119EE, 0xFEFFFBFF);
	r3 = D(r3, s1_0_0, 0x100F0C16, 0xF7FAED10, 0xFDFA01FC, 0xFFFC0603);
	r4 = D(r4, s1_0_0, 0x150B0DF5, 0xCAFB0F1A, 0x0E120506, 0xF2F9EEE2);
	r5 = D(r5, s1_0_0, 0xF0020F16, 0x0D0700F9, 0x11FF11FE, 0x1FF3FC05);
	r6 = D(r6, s1_0_0, 0xFD04FDE7, 0xE7E92709, 0x06FB1BFE, 0x12F8E71E);
	r7 = D(r7, s1_0_0, 0xFF05EA0C, 0xE41C0F22, 0xF90BDF16, 0x0F0B0E05);
	r0 = D(r0, s1_0_1, 0x01090812, 0xFC04F82D, 0x05060502, 0x09F00F0E);
	r1 = D(r1, s1_0_1, 0x06F8100D, 0xF004FBF3, 0x0FF903F6, 0xE8E8F802);
	r2 = D(r2, s1_0_1, 0x1D0F0BFE, 0xF5040A28, 0xA00003B5, 0x060901F6);
	r3 = D(r3, s1_0_1, 0xF2F5100F, 0xFC170319, 0x0A050807, 0x01030805);
	r4 = D(r4, s1_0_1, 0x19FCF701, 0xF0F9FEE0, 0x1AFFFE04, 0x0102F409);
	r5 = D(r5, s1_0_1, 0xF8050C12, 0xFD0423E2, 0x090BFB16, 0xF70CE306);
	r6 = D(r6, s1_0_1, 0xF9001E06, 0xA80C361B, 0x150BF30D, 0x0C0210EE);
	r7 = D(r7, s1_0_1, 0xFD0208FF, 0x13EA2207, 0xF704FCFE, 0xFDF1F41D);
	r0 = D(r0, s1_0_2, 0x06FAF8F3, 0x06FA01EA, 0x070202FE, 0xF01FFC1C);
	r1 = D(r1, s1_0_2, 0x0CEBF2EE, 0xD8EF04F3, 0xFAFF020E, 0x0CFB06C5);
	r2 = D(r2, s1_0_2, 0x07100113, 0xEE01050A, 0x27150AE4, 0x00F5FC03);
	r3 = D(r3, s1_0_2, 0x0DFFFDFD, 0x4208EAF2, 0x0806F5FA, 0xFEFFFFFE);
	r4 = D(r4, s1_0_2, 0x2212FCFF, 0x812EF117, 0x0308FAF7, 0xFAF60904);
	r5 = D(r5, s1_0_2, 0xF1F6FEED, 0xF7060806, 0x0003FDF4, 0x1006020B);
	r6 = D(r6, s1_0_2, 0x2A0D00FF, 0x0504E6E4, 0x0700FE01, 0xF4FB1E15);
	r7 = D(r7, s1_0_2, 0xF3D90C02, 0x1E01FF01, 0x09E7050B, 0x05F7F8F1);
	r0 = D(r0, s1_1_0, 0x0FFDEFFD, 0x21090812, 0xFDF8FEF8, 0xF9FB0EFF);
	r1 = D(r1, s1_1_0, 0x12EF0703, 0xF90E0C06, 0x070FFE04, 0x1318C1E6);
	r2 = D(r2, s1_1_0, 0x030903F0, 0x18F83A16, 0xEEFF01C4, 0x0AF6EF00);
	r3 = D(r3, s1_1_0, 0xFF09F804, 0x040727EC, 0x03060DFA, 0xFF040DFF);
	r4 = D(r4, s1_1_0, 0xFF110709, 0x25C01B23, 0xCE08F7F1, 0x06F2E8F8);
	r5 = D(r5, s1_1_0, 0x08F80311, 0x08FC120B, 0x080CFCF9, 0xEDFBF80D);
	r6 = D(r6, s1_1_0, 0xE01AEA20, 0x03FF1107, 0xFEE7160E, 0xF7FAFDFF);
	r7 = D(r7, s1_1_0, 0x02E3E3EC, 0xEEF7EC25, 0x0407EDF1, 0xE2F00806);
	r0 = D(r0, s1_1_1, 0x34F802F6, 0xFC13F7F9, 0x0207FD02, 0xFDE80E04);
	r1 = D(r1, s1_1_1, 0x1722F300, 0xEA15BE0E, 0xF706FD13, 0x2E000CDD);
	r2 = D(r2, s1_1_1, 0x07FA1908, 0x17FC12E0, 0x4D2E2101, 0x0D09EFFD);
	r3 = D(r3, s1_1_1, 0x030EE8F2, 0xF7E10314, 0x04F813F2, 0x040B050A);
	r4 = D(r4, s1_1_1, 0x0E020D0B, 0x29B1E40D, 0xF808F404, 0xFDEB050F);
	r5 = D(r5, s1_1_1, 0xF510F401, 0x0507F41A, 0x1005E70B, 0xEF18F7E8);
	r6 = D(r6, s1_1_1, 0xE7CEE6FE, 0xE5F30814, 0x15FFED0C, 0x08FEEDFF);
	r7 = D(r7, s1_1_1, 0xFC0A030E, 0xE7F327FE, 0xFFF1FC01, 0x21F60C09);
	r0 = D(r0, s1_1_2, 0x1D090FF2, 0x110115FF, 0x0506FFFE, 0xEEF6F9F7);
	r1 = D(r1, s1_1_2, 0x1EE10CF2, 0xF3FBEAEF, 0xFF00FAFF, 0x0FFEF5EC);
	r2 = D(r2, s1_1_2, 0x111003F7, 0xEBF90910, 0x3E1E1918, 0xF807FA02);
	r3 = D(r3, s1_1_2, 0x0FEE0808, 0x02030001, 0xFA0D0F09, 0xFF070C02);
	r4 = D(r4, s1_1_2, 0xF1F40EF7, 0xCFE70B38, 0xFE090BF7, 0x05F8F5EC);
	r5 = D(r5, s1_1_2, 0xFEFC121C, 0x180BEEF5, 0xFE0608FC, 0x0208F41C);
	r6 = D(r6, s1_1_2, 0xD8F0FE11, 0x0203EFF7, 0x0AF90CF3, 0xE8E9E9FB);
	r7 = D(r7, s1_1_2, 0x1B0300FE, 0x0CF40B03, 0xF6EB04F9, 0x0514E7D0);
	r0 = D(r0, s1_2_0, 0x080A09F3, 0xF502130B, 0x01FA00F9, 0xF9F1FF00);
	r1 = D(r1, s1_2_0, 0xFD1405FB, 0x0EFAFD14, 0x03EDF7FA, 0xF2F6FBF8);
	r2 = D(r2, s1_2_0, 0xF9F80E11, 0xF6F3F3F5, 0x0F020008, 0x090707F3);
	r3 = D(r3, s1_2_0, 0x0BF6F2F1, 0xF819010F, 0xFD01010F, 0xFCFFFE02);
	r4 = D(r4, s1_2_0, 0xFD06FCFC, 0x0FD7F5DC, 0xEFFDFAF4, 0x03FF0608);
	r5 = D(r5, s1_2_0, 0xF0B102FC, 0x101901E3, 0xF7FDF7F4, 0xEF00FE05);
	r6 = D(r6, s1_2_0, 0x0806EAF9, 0x07041AED, 0x070F0C0C, 0xFD00F204);
	r7 = D(r7, s1_2_0, 0xE524FE0E, 0x3BEC5714, 0x160E0B07, 0x2403FFF1);
	r0 = D(r0, s1_2_1, 0xEE10FD10, 0xE0F4F212, 0xFEFA0A02, 0x17F8F3E6);
	r1 = D(r1, s1_2_1, 0x0BECFC0B, 0xF4F2F707, 0xFDE803F7, 0x06FFFB0A);
	r2 = D(r2, s1_2_1, 0x09EFF1E7, 0xDFED1107, 0x00EBF412, 0xF40E200D);
	r3 = D(r3, s1_2_1, 0x0408FFFF, 0x0AEC01F3, 0x05090201, 0xFA060706);
	r4 = D(r4, s1_2_1, 0xFE010E02, 0xE6EA0F2C, 0xF6FDF103, 0xE7000EFC);
	r5 = D(r5, s1_2_1, 0xF007FE00, 0x05FBF209, 0x010DF208, 0xF6FF0913);
	r6 = D(r6, s1_2_1, 0x0A2AF0FF, 0x01FB0B14, 0xF904F9EC, 0x0BE50702);
	r7 = D(r7, s1_2_1, 0x02E8E907, 0x35FC0BE9, 0x02EBFDF1, 0xEEEBDCE5);
	r0 = D(r0, s1_2_2, 0xFB18FB08, 0xF7E10FF0, 0xFD0001FB, 0xFDF1F502);
	r1 = D(r1, s1_2_2, 0x0DF20002, 0xFEE5F0E0, 0xF8000701, 0x040DF7F0);
	r2 = D(r2, s1_2_2, 0xFF000402, 0x031CF0E8, 0x10F502FF, 0x10FAF901);
	r3 = D(r3, s1_2_2, 0x02FDFC05, 0x04010700, 0x01040008, 0xFE0301FF);
	r4 = D(r4, s1_2_2, 0x07000100, 0x3AECF120, 0x03FF07F4, 0xFD07F8F0);
	r5 = D(r5, s1_2_2, 0x1C030F01, 0x0EF20B04, 0xFD0303FF, 0x060A0CFA);
	r6 = D(r6, s1_2_2, 0xF51307E6, 0x1A12140C, 0xEDFD0114, 0x24180C1E);
	r7 = D(r7, s1_2_2, 0xE7EEF908, 0x16EC13EA, 0x07F6020E, 0x13F4F9F0);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(3.767e-02, 7.716e-03, 8.570e-03, -1.568e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(1.546e-02, -3.210e-02, -1.240e-04, 1.313e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(4.110e-02, -1.504e-03, 4.941e-02, 1.556e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.838e-02, -6.797e-03, -7.976e-03, -8.230e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(2.897e-02, 1.389e-02, 1.969e-02, -2.066e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-4.106e-02, 6.122e-02, 4.334e-02, 4.798e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(1.399e-02, 2.422e-02, 4.509e-02, 9.966e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(2.155e-02, 3.209e-02, -3.329e-02, -1.630e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-DS-conv4
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF1F7FAFB, 0xF906F203, 0x08B8D7D2, 0x10F91DF9);
	r1 = D(r1, s0_0_0, 0x0405FEF7, 0x0A0205F0, 0xEEEAF508, 0xF5160615);
	r2 = D(r2, s0_0_0, 0x1A0F170B, 0x020200FE, 0x00F8FEFC, 0xFA0DF0F1);
	r3 = D(r3, s0_0_0, 0xF308F708, 0xFD0602EB, 0xFA0322F0, 0x02FB03FB);
	r4 = D(r4, s0_0_0, 0x0107FC08, 0xF3F7F70B, 0xFD023917, 0x09FEE90A);
	r5 = D(r5, s0_0_0, 0xE4100605, 0xF8FE06EF, 0x00EEF307, 0x05080109);
	r6 = D(r6, s0_0_0, 0x06F9FB00, 0x1DE306CD, 0x0002F708, 0x060F1FE3);
	r7 = D(r7, s0_0_0, 0x0BF125F7, 0x080AF520, 0xF8F0F601, 0x00010504);
	r0 = D(r0, s0_0_1, 0xEAEAECFD, 0x03100212, 0x08F2D611, 0xE6F402F1);
	r1 = D(r1, s0_0_1, 0xFB010DF4, 0x0D130BED, 0xFAF1EBD8, 0x050C28E6);
	r2 = D(r2, s0_0_1, 0xEEFFEF17, 0xFF0100F8, 0xFBFF0101, 0x04FB09DA);
	r3 = D(r3, s0_0_1, 0xFF0C070C, 0xFE0309F3, 0x181616F4, 0xFBCCFDEF);
	r4 = D(r4, s0_0_1, 0xF5030102, 0x05F5EEF6, 0xFF0BE40E, 0xF1EA091C);
	r5 = D(r5, s0_0_1, 0xFDEF2902, 0x01F0FDFB, 0xF2F5ED1B, 0x04F5FF02);
	r6 = D(r6, s0_0_1, 0xF80606F3, 0x0BE4E213, 0xFB0C00EF, 0x2812FE1F);
	r7 = D(r7, s0_0_1, 0x01F0E4F9, 0x17131511, 0x22F4F5FC, 0x0AF9FF13);
	r0 = D(r0, s0_0_2, 0xF30CFFF8, 0xF2ECFE01, 0xEEE21813, 0x02DCF500);
	r1 = D(r1, s0_0_2, 0xFF0D03FF, 0xFB1408DB, 0xF50FEFFE, 0xF5FAEC17);
	r2 = D(r2, s0_0_2, 0x110DFB0D, 0x03000500, 0xFDFD0A01, 0x05F60EF9);
	r3 = D(r3, s0_0_2, 0x040900FD, 0x030D000C, 0xFB07FB12, 0x030D00FA);
	r4 = D(r4, s0_0_2, 0x06040703, 0x002000FC, 0x25FDDCF6, 0x13F705F8);
	r5 = D(r5, s0_0_2, 0xB5FB1581, 0xFE09FCE8, 0x08F703F4, 0x040B0100);
	r6 = D(r6, s0_0_2, 0x0510FA05, 0xF2CB37E7, 0x0816FDFE, 0x0105F41D);
	r7 = D(r7, s0_0_2, 0xF7FEFD01, 0x051A0BF9, 0xFFFA0204, 0xFCFAF501);
	r0 = D(r0, s0_1_0, 0xF4F7F5E4, 0xF109F807, 0xF4F22D2F, 0x0A02042A);
	r1 = D(r1, s0_1_0, 0x05FBFE00, 0x00110538, 0x02DDE1DD, 0xF900F11A);
	r2 = D(r2, s0_1_0, 0xFD0804E9, 0x020200FC, 0xF1FD0007, 0xF0000B09);
	r3 = D(r3, s0_1_0, 0xFD1604FE, 0x09110E0B, 0xF4FE0309, 0x06FCF801);
	r4 = D(r4, s0_1_0, 0xFC04F6FB, 0xFDF810FB, 0xFEEA182B, 0x0DF511F2);
	r5 = D(r5, s0_1_0, 0x15160C02, 0x070B0DFE, 0x0DECDC02, 0xFE0C08F8);
	r6 = D(r6, s0_1_0, 0xF60CF7EF, 0x1FF52B0C, 0xFFFDFEF5, 0xCDF845FE);
	r7 = D(r7, s0_1_0, 0x1A1413E2, 0x2CFC000B, 0x08FE05FE, 0x0CFA04FE);
	r0 = D(r0, s0_1_1, 0x0DDE04F4, 0x052AEA06, 0xF7A81DF2, 0x0214F9FA);
	r1 = D(r1, s0_1_1, 0x08E7F0FE, 0x102405E7, 0xFD10E804, 0x01E605FB);
	r2 = D(r2, s0_1_1, 0x1E17E606, 0x0823FCFC, 0xF3F4F2F3, 0x1CCECEF6);
	r3 = D(r3, s0_1_1, 0x0BFC011E, 0xFBDF03FE, 0xEC06000A, 0xF711FCFF);
	r4 = D(r4, s0_1_1, 0x0100F90F, 0x03DCFC04, 0xD5F0F0F4, 0xF41EEB08);
	r5 = D(r5, s0_1_1, 0x37111607, 0xF7F10610, 0x02FC0307, 0x06E5010B);
	r6 = D(r6, s0_1_1, 0x00DA08FA, 0x139214D7, 0xFEF20805, 0xDDF0FE1B);
	r7 = D(r7, s0_1_1, 0xFFF61112, 0xE7F505E3, 0xFC150B0F, 0x0424FC04);
	r0 = D(r0, s0_1_2, 0xF3D4F1F0, 0x05E70F01, 0xFBE31510, 0xFF00F20B);
	r1 = D(r1, s0_1_2, 0xFF1FFE0B, 0x0EDDF21E, 0xFDF30D0C, 0x160205EF);
	r2 = D(r2, s0_1_2, 0x03EB15ED, 0x02EA01FD, 0x0620FBEE, 0x0BEAF705);
	r3 = D(r3, s0_1_2, 0xF2EE0CF2, 0xF3F204FB, 0xF5FDF10A, 0xF900040C);
	r4 = D(r4, s0_1_2, 0x020AFB00, 0x00D7FD0B, 0xFCEFF50E, 0xF3FD0D11);
	r5 = D(r5, s0_1_2, 0xEEDAE6E7, 0x0E2B0200, 0x0BF40303, 0x010E03FE);
	r6 = D(r6, s0_1_2, 0x0C010907, 0x22E5D8E3, 0xF73E0312, 0xF0E5392A);
	r7 = D(r7, s0_1_2, 0xE6EBF9FB, 0x03040DEB, 0x0B11070A, 0xFB08FE00);
	r0 = D(r0, s0_2_0, 0xF903FA09, 0xFD0B07F0, 0x05F4D004, 0xE80CF6FB);
	r1 = D(r1, s0_2_0, 0x0DFF0101, 0x020E19CC, 0x040603FE, 0x2C18050B);
	r2 = D(r2, s0_2_0, 0x22020B0E, 0x0500FCFF, 0xF80A02F5, 0xF4FC1529);
	r3 = D(r3, s0_2_0, 0xFFFE0808, 0x03F10302, 0x05ED0602, 0xF9010200);
	r4 = D(r4, s0_2_0, 0xF2FF0700, 0x05030509, 0x03F109F3, 0x15FB08F7);
	r5 = D(r5, s0_2_0, 0x040521FE, 0xF9FFF8FD, 0xE3EEECFF, 0x0502FD04);
	r6 = D(r6, s0_2_0, 0xF8FF04FF, 0x10F7F609, 0xF9F80901, 0xF408E6FE);
	r7 = D(r7, s0_2_0, 0x0200F110, 0x20F8F2F3, 0x1608F605, 0xFEF5F7F6);
	r0 = D(r0, s0_2_1, 0xFE1D03F7, 0xFDF4F4F5, 0x01FD0901, 0x0200FE03);
	r1 = D(r1, s0_2_1, 0x0EFB0208, 0xEB0708F5, 0x04F8010C, 0x3EF6F40B);
	r2 = D(r2, s0_2_1, 0x27FF1A04, 0x08FFFCFE, 0x07F2FA04, 0x1209F2FF);
	r3 = D(r3, s0_2_1, 0xF8FFF5F2, 0x170F020A, 0xEE0206DB, 0xFEFF0202);
	r4 = D(r4, s0_2_1, 0xF90E0506, 0xFAE40EF1, 0xD20FF527, 0x1B12020D);
	r5 = D(r5, s0_2_1, 0x0E0E00F1, 0x00CDF1E4, 0xF4F00414, 0x0005FE00);
	r6 = D(r6, s0_2_1, 0xEFFB1201, 0x0DF80104, 0xFDFDFA0E, 0x1696D1E2);
	r7 = D(r7, s0_2_1, 0x12090401, 0x16110206, 0x05FA17FB, 0x07F7F60E);
	r0 = D(r0, s0_2_2, 0xF5F6FF00, 0xFC0A06EF, 0x0200FEE1, 0x0C00FCEF);
	r1 = D(r1, s0_2_2, 0x01F700FE, 0xF6E0F7EE, 0x05FC0103, 0x0C1AFF02);
	r2 = D(r2, s0_2_2, 0x0A03FE18, 0x0200FC05, 0x0102F2F6, 0x0C07FE00);
	r3 = D(r3, s0_2_2, 0x0D03F6F8, 0xFFEDFBF5, 0xEFF6FFF2, 0xFD030101);
	r4 = D(r4, s0_2_2, 0xFB06FB0D, 0x03FF0908, 0xD5EDF217, 0x08FD130E);
	r5 = D(r5, s0_2_2, 0x26E2DAC4, 0x0113FCF9, 0xF8FC010B, 0x0300FDFC);
	r6 = D(r6, s0_2_2, 0x07EAF30D, 0xFEEB010C, 0xFE0DFB05, 0x21E51ABE);
	r7 = D(r7, s0_2_2, 0xF3F70F12, 0xFFE106EF, 0xF919F1F4, 0x040EFBF4);
	r0 = D(r0, s1_0_0, 0xFE1818F2, 0x11FFF9FC, 0xFCFB0D1C, 0x0A00E5F4);
	r1 = D(r1, s1_0_0, 0x000001F4, 0x0BDF0A00, 0x03050C01, 0x07D0122B);
	r2 = D(r2, s1_0_0, 0x1009FA02, 0xFDFF00FC, 0x09F4F5FE, 0xF7031406);
	r3 = D(r3, s1_0_0, 0x11F5FB07, 0x0016F3FF, 0xF301ECFA, 0xF6FE0003);
	r4 = D(r4, s1_0_0, 0x08F60401, 0x0AF20306, 0x1EEC030A, 0x1CF815F2);
	r5 = D(r5, s1_0_0, 0x050AFF05, 0x0308E4EF, 0x0604F609, 0xF8FEFF02);
	r6 = D(r6, s1_0_0, 0x0E04DDFE, 0xE1090B1C, 0x02FD0602, 0xD605D8EF);
	r7 = D(r7, s1_0_0, 0x0BF9F9E7, 0x0FED13FA, 0xF301FF09, 0xF60BF7FD);
	r0 = D(r0, s1_0_1, 0x07FF03F6, 0x05F30405, 0x081208EF, 0x1AFFDFF0);
	r1 = D(r1, s1_0_1, 0x08FDFD08, 0x070C06F8, 0xF3020FF7, 0x0C25F2F4);
	r2 = D(r2, s1_0_1, 0x05DA0919, 0x05030300, 0xFEFCFB08, 0x1805F0E4);
	r3 = D(r3, s1_0_1, 0xF4EFFBF0, 0xFC19F811, 0xFA0B09FE, 0xFB0213F3);
	r4 = D(r4, s1_0_1, 0x020204FE, 0xF80D0E01, 0xE72200DE, 0xD7F60407);
	r5 = D(r5, s1_0_1, 0x1CE9CD21, 0x0304FF1A, 0xF40503FF, 0x0007FEFC);
	r6 = D(r6, s1_0_1, 0x030300FE, 0xF112140D, 0xFAF00C04, 0x20181A17);
	r7 = D(r7, s1_0_1, 0x020109FC, 0xF1BB250A, 0x16151622, 0x01F8FD00);
	r0 = D(r0, s1_0_2, 0x10EF0A21, 0xFF0DF0FE, 0xFC07F5F7, 0xF1EF07E2);
	r1 = D(r1, s1_0_2, 0xF8FA0302, 0x04D7FA07, 0x0A0102F3, 0xDB00F5F4);
	r2 = D(r2, s1_0_2, 0x0AF40403, 0xFFFD0001, 0xFB14E30E, 0xD0F1FA17);
	r3 = D(r3, s1_0_2, 0x06FBFE0A, 0x0DFEEDEE, 0x05F4E4F8, 0x0004F909);
	r4 = D(r4, s1_0_2, 0x04F80604, 0xFAFCFB09, 0x151400EB, 0x03F91AF9);
	r5 = D(r5, s1_0_2, 0xE4CB01D5, 0xECFFF2EE, 0xFA0E01F3, 0xFAFE0304);
	r6 = D(r6, s1_0_2, 0x12F1F90A, 0x0139FD07, 0x090AFCFA, 0xDF06DB0C);
	r7 = D(r7, s1_0_2, 0x0F000A18, 0xEDE913FB, 0xEE14DCEC, 0xF80AFDF8);
	r0 = D(r0, s1_1_0, 0xEBFAF8ED, 0x0BF605FE, 0x00070F16, 0x13F4F106);
	r1 = D(r1, s1_1_0, 0x11020901, 0x01201019, 0xE8DF01EE, 0x070100BB);
	r2 = D(r2, s1_1_0, 0xE31CD4ED, 0xFFFC04FC, 0x0A1301F2, 0xF5F8ED00);
	r3 = D(r3, s1_1_0, 0xF118ECEB, 0xF00003F1, 0x06F801FE, 0x07040401);
	r4 = D(r4, s1_1_0, 0x0DF7110D, 0xFD050FF8, 0xFBF90CFF, 0xF7161D14);
	r5 = D(r5, s1_1_0, 0xF6F20AEF, 0xFFFFF503, 0x0614F5F4, 0xFDFCF8F3);
	r6 = D(r6, s1_1_0, 0x130385F5, 0xDD0B13DC, 0xFCFD0205, 0x32DBF30E);
	r7 = D(r7, s1_1_0, 0xFD0AF5DB, 0xFA13FFF1, 0x110410E9, 0xF70B01FD);
	r0 = D(r0, s1_1_1, 0x030EF8D3, 0x00220B14, 0xE9F9C734, 0x071DDDF0);
	r1 = D(r1, s1_1_1, 0xFAF1F701, 0xF0B70214, 0x0B171701, 0x06A005E1);
	r2 = D(r2, s1_1_1, 0x03C30CF3, 0x070D1000, 0xFEE0F308, 0xC8F3A814);
	r3 = D(r3, s1_1_1, 0x170917F6, 0x0705F703, 0xFD120A27, 0x0A0503FA);
	r4 = D(r4, s1_1_1, 0x12E90901, 0x0AF40713, 0xA9F9C006, 0x0F0800E6);
	r5 = D(r5, s1_1_1, 0x0FEB1D00, 0xEDF5152C, 0x09FA0AF0, 0x03F40A02);
	r6 = D(r6, s1_1_1, 0xE5BACEFE, 0xBAFF9DE3, 0xF2030514, 0x45B72DF7);
	r7 = D(r7, s1_1_1, 0xFDEE07DB, 0x05F2FF07, 0x1010282A, 0x02270813);
	r0 = D(r0, s1_1_2, 0xFEFEF3EC, 0x0B1EFB01, 0x0C01E821, 0x07111ADF);
	r1 = D(r1, s1_1_2, 0xF6F611F7, 0x1908FC0B, 0xFE000E09, 0x2601F813);
	r2 = D(r2, s1_1_2, 0x19B7EDF1, 0x000A0201, 0xFF14F50B, 0x0707EC0A);
	r3 = D(r3, s1_1_2, 0xF3090F04, 0x1111FF13, 0x10F806FC, 0x00FC0A07);
	r4 = D(r4, s1_1_2, 0x0BFF1004, 0x07FF0E15, 0x0E07EADC, 0x06FFF61A);
	r5 = D(r5, s1_1_2, 0xEFDCFEB1, 0x04F30AF7, 0x060C17FF, 0xFB0403FE);
	r6 = D(r6, s1_1_2, 0xF3F9DBF3, 0x03E0FEFC, 0x0315FD06, 0x46FD0BE4);
	r7 = D(r7, s1_1_2, 0x05ED0B08, 0x0FF7DEFE, 0x040511EE, 0x040BECF4);
	r0 = D(r0, s1_2_0, 0xF403F9FC, 0x06070B04, 0x0BF5ED14, 0xFE00F005);
	r1 = D(r1, s1_2_0, 0xFB0001FB, 0x0610FDFC, 0x10F70C03, 0x07F9F100);
	r2 = D(r2, s1_2_0, 0x09FFFAE5, 0x07FA0403, 0xE90905E2, 0x0CCAF3E5);
	r3 = D(r3, s1_2_0, 0x090100F5, 0x0906FBF1, 0xEC030703, 0xF902FDFF);
	r4 = D(r4, s1_2_0, 0x0BFCFBEA, 0xF60BF3F3, 0x2AC8F6CA, 0x0EF61011);
	r5 = D(r5, s1_2_0, 0xEC11F80A, 0x00F500DA, 0x1B0BFC07, 0xFBFE0007);
	r6 = D(r6, s1_2_0, 0x0605120A, 0xEAE7EAF8, 0x00FF050D, 0xDDEFDBE8);
	r7 = D(r7, s1_2_0, 0x15E8F201, 0x0DED00FE, 0xF5FA050D, 0xED0B0C09);
	r0 = D(r0, s1_2_1, 0xFE09040C, 0x111308FF, 0x0A0AEBE2, 0x0401FF20);
	r1 = D(r1, s1_2_1, 0xF803FC02, 0xF7FAC3FE, 0x0007EC08, 0x28CD2201);
	r2 = D(r2, s1_2_1, 0x06FAFADF, 0x0DF60B01, 0xFC051AFF, 0x02EA0E1B);
	r3 = D(r3, s1_2_1, 0x04130609, 0x10E10F0C, 0xBBF7D2F7, 0xFC03FCFF);
	r4 = D(r4, s1_2_1, 0x110AF305, 0xF0131011, 0xE2FBF7D7, 0xFC0C0008);
	r5 = D(r5, s1_2_1, 0x39D5EF12, 0x09141E13, 0x0300EAF0, 0xFEFDFF02);
	r6 = D(r6, s1_2_1, 0x101AF50D, 0x0A03EB04, 0x050609FD, 0x07134FCD);
	r7 = D(r7, s1_2_1, 0xFBFBE8D5, 0x0DE61107, 0x16E306ED, 0xFEFC0401);
	r0 = D(r0, s1_2_2, 0x0204F905, 0xFBF60E00, 0xF41EE304, 0x1DF2F50A);
	r1 = D(r1, s1_2_2, 0xF802FD00, 0xF6F6FDEA, 0xFFED1100, 0x15F80216);
	r2 = D(r2, s1_2_2, 0xDCE010F5, 0x010602FC, 0x08F3F809, 0x01F50C1B);
	r3 = D(r3, s1_2_2, 0xFB020802, 0x0909F8FA, 0xEF04F7F8, 0xF6F7FA06);
	r4 = D(r4, s1_2_2, 0x0BF6F0F9, 0xF305FAFD, 0xE80C05EE, 0x1E0405FC);
	r5 = D(r5, s1_2_2, 0xD3FAF4F2, 0xF606F6E7, 0x0015F8FB, 0xFC040402);
	r6 = D(r6, s1_2_2, 0x15FE14FD, 0x1DFEFADE, 0xFFFBEDF6, 0xF1EDF81D);
	r7 = D(r7, s1_2_2, 0x16040A00, 0x06EF13FE, 0xF809FF0E, 0xF706FA04);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x16F70404, 0xFD0AF707, 0x2917F6E1, 0x0EE40E0C);
	r1 = D(r1, s0_0_0, 0x0800FC01, 0x0B1A12FF, 0x2804D8F3, 0xF4C61CFA);
	r2 = D(r2, s0_0_0, 0xF50120FA, 0x0A020103, 0x0E06F809, 0x27F70D09);
	r3 = D(r3, s0_0_0, 0xEEFDFC0C, 0x0CFD00FE, 0xF90FEE08, 0x110108F6);
	r4 = D(r4, s0_0_0, 0x09F80607, 0x0808F7FE, 0xF7F0EBCB, 0x12F7F1FF);
	r5 = D(r5, s0_0_0, 0x15EF07E8, 0x00F5EF00, 0xEFF9F302, 0xFF070508);
	r6 = D(r6, s0_0_0, 0xE9A40AF7, 0x0C0B23F0, 0xFAF901FC, 0xE4F6F9E0);
	r7 = D(r7, s0_0_0, 0x0EEA0806, 0x0407E504, 0xEE0408FC, 0xF50003F8);
	r0 = D(r0, s0_0_1, 0x1915FFF7, 0xF2FEF6F9, 0x07DD1503, 0x09F80B0F);
	r1 = D(r1, s0_0_1, 0x08FEF9F9, 0xD90817FD, 0x0AEDE0FE, 0x9DA481F8);
	r2 = D(r2, s0_0_1, 0xDB051BF4, 0x10FD02F9, 0xEE0F0B02, 0xCFF4090F);
	r3 = D(r3, s0_0_1, 0xF5F9F9F1, 0xF0102BFB, 0xEB0814FD, 0x2A0B0508);
	r4 = D(r4, s0_0_1, 0xFE0DFFFF, 0x1203F803, 0x03F49CEB, 0x190C00F4);
	r5 = D(r5, s0_0_1, 0x19200D2F, 0xEDF504EF, 0xFCFB0B02, 0x01FD0101);
	r6 = D(r6, s0_0_1, 0xFAFE01FA, 0x1A03E4FA, 0xFF06FF06, 0x03F8F703);
	r7 = D(r7, s0_0_1, 0xFB0AF9F7, 0xDA000B10, 0xD90215FF, 0xEBF8FB0B);
	r0 = D(r0, s0_0_2, 0x1D0606E9, 0xF9FE0806, 0xFEF51E17, 0xFB180204);
	r1 = D(r1, s0_0_2, 0x08FF0100, 0xEC05190B, 0xFEE50304, 0xFA020403);
	r2 = D(r2, s0_0_2, 0xE4FF04F2, 0x020100FB, 0xFB00F7FF, 0x0801F616);
	r3 = D(r3, s0_0_2, 0x02FEF412, 0xEB0204FE, 0x04F9F006, 0x03FF08FF);
	r4 = D(r4, s0_0_2, 0x09FF04FE, 0xF9040F0B, 0xFD1307FE, 0x12F31D07);
	r5 = D(r5, s0_0_2, 0xEF0ADD81, 0x07DF08E4, 0x0E0003F8, 0x000100FD);
	r6 = D(r6, s0_0_2, 0xFCC7F907, 0x0705F705, 0xF50601F7, 0xF0FBFD00);
	r7 = D(r7, s0_0_2, 0x08FDFFFA, 0xF9FE0907, 0xEB001B00, 0xFA080705);
	r0 = D(r0, s0_1_0, 0x02F9F6FC, 0xE311E206, 0x02F3330A, 0x11DA01E9);
	r1 = D(r1, s0_1_0, 0xFB000600, 0x0DEEF60A, 0x0F0613FB, 0x11E82207);
	r2 = D(r2, s0_1_0, 0x0306FFF7, 0x010203FE, 0x04100D0E, 0xF22AFFF1);
	r3 = D(r3, s0_1_0, 0x11FDEE00, 0x0BFA0F0B, 0x1CC10C19, 0xFC020101);
	r4 = D(r4, s0_1_0, 0xFC03030D, 0x12060A0B, 0x0AF819FD, 0xFD08FFFC);
	r5 = D(r5, s0_1_0, 0x0DEBE60A, 0xFFFEFC0B, 0x201F05E6, 0x0AFEF900);
	r6 = D(r6, s0_1_0, 0xEDDF0DFE, 0xFFE24414, 0xF60A0407, 0xEF000113);
	r7 = D(r7, s0_1_0, 0x14C001F1, 0x02FC0CE3, 0x0717EE02, 0x03F102F8);
	r0 = D(r0, s0_1_1, 0xF5F81225, 0xF7E702E6, 0xFCFC0D32, 0xFCF600E7);
	r1 = D(r1, s0_1_1, 0x2004FF07, 0xF7E707F5, 0xF7EA0A06, 0xF8F318D2);
	r2 = D(r2, s0_1_1, 0xF2011904, 0x06050005, 0xF706F3E9, 0x0900E8C5);
	r3 = D(r3, s0_1_1, 0x07FCFBF2, 0x18E7180A, 0xCBE3F21B, 0xFDF20614);
	r4 = D(r4, s0_1_1, 0x090AF9FD, 0xF90E170C, 0xE0C9F40C, 0xBE07F6E7);
	r5 = D(r5, s0_1_1, 0xFE0A030C, 0xF6F2F70C, 0x170203DA, 0x0CFF020A);
	r6 = D(r6, s0_1_1, 0x06FD0A11, 0x08F42924, 0xF7FEF8DF, 0x02E3FEFA);
	r7 = D(r7, s0_1_1, 0xF3F2211B, 0x09040106, 0x10032604, 0xF9F9FBE7);
	r0 = D(r0, s0_1_2, 0x0EF4F807, 0x0206F8FA, 0x0D0717EF, 0xF0E700E3);
	r1 = D(r1, s0_1_2, 0xFC010206, 0x1C0A030D, 0x00EADCF4, 0xF4FC010B);
	r2 = D(r2, s0_1_2, 0xD71617FD, 0x03050503, 0xFE0613F5, 0x1D04F106);
	r3 = D(r3, s0_1_2, 0x02060105, 0x000CEFF2, 0xFB0FFDF7, 0x07FBFBFE);
	r4 = D(r4, s0_1_2, 0x03000400, 0x04FC0A09, 0x081DE0FC, 0xF2F7FE18);
	r5 = D(r5, s0_1_2, 0xD6E4DA04, 0xFDDEF5EC, 0x0A032210, 0x03030501);
	r6 = D(r6, s0_1_2, 0xFED8FC05, 0xFB0A000A, 0x080402EF, 0xF9E81EFA);
	r7 = D(r7, s0_1_2, 0x0705FDF7, 0xFBFD02F4, 0x05F30FFD, 0xF4FEFBEF);
	r0 = D(r0, s0_2_0, 0xF80702F2, 0x0C0FF3EF, 0x29FC1CDA, 0xF3090201);
	r1 = D(r1, s0_2_0, 0x05FE080F, 0x0BEEF531, 0x0BECFF21, 0x02BB0B0F);
	r2 = D(r2, s0_2_0, 0xF60412F5, 0x01040001, 0x16F9100A, 0x1023E5DF);
	r3 = D(r3, s0_2_0, 0x01F5F3FA, 0xF8FC00FE, 0x0D05FC1F, 0x0105FEFA);
	r4 = D(r4, s0_2_0, 0xF70EFA05, 0x01030E15, 0xF6FF00FC, 0xF7FFFEF1);
	r5 = D(r5, s0_2_0, 0xE4F022CF, 0x02090106, 0xFE1807EF, 0x04000200);
	r6 = D(r6, s0_2_0, 0xF2B6FF03, 0x03F3140E, 0x010902FC, 0x1EC14D28);
	r7 = D(r7, s0_2_0, 0xEF01FAE4, 0xFFF211EB, 0x10FA2A05, 0x070302F9);
	r0 = D(r0, s0_2_1, 0xF5F30208, 0x0B1EFEBA, 0x070517F5, 0xEDF2FCFC);
	r1 = D(r1, s0_2_1, 0x0AF30E13, 0xFF12F106, 0xFCF3F928, 0xFFB801F3);
	r2 = D(r2, s0_2_1, 0x03151720, 0xFFFF0104, 0x000D0E0B, 0x20CAF818);
	r3 = D(r3, s0_2_1, 0xE4EBFD22, 0xFC03FB16, 0xF939F2CD, 0x000301FC);
	r4 = D(r4, s0_2_1, 0xF913F615, 0xFE18FDF6, 0xFF85FC30, 0xEC0DF4FA);
	r5 = D(r5, s0_2_1, 0xECEF16ED, 0xF2E8FDF9, 0xFDF8FEF7, 0xFE05FEFA);
	r6 = D(r6, s0_2_1, 0x1208030F, 0xF505100E, 0x0908FCFB, 0x0B1005F4);
	r7 = D(r7, s0_2_1, 0xDDD40E36, 0x060D000A, 0xFE030BCD, 0x07F503E2);
	r0 = D(r0, s0_2_2, 0x0EFDFC06, 0x00F906F7, 0x0701FD16, 0xFFF8150A);
	r1 = D(r1, s0_2_2, 0xFF0CFE00, 0x0F1005F6, 0x0716EAF7, 0xF4E32706);
	r2 = D(r2, s0_2_2, 0xF405FCFA, 0x000400FC, 0x0204FE0E, 0x0CF2FE05);
	r3 = D(r3, s0_2_2, 0x0303EF02, 0xFA08FC03, 0xE50904E8, 0xFE0201FE);
	r4 = D(r4, s0_2_2, 0xF80CEBFC, 0x04090F04, 0x30FEFF04, 0xF3FE08F1);
	r5 = D(r5, s0_2_2, 0xC9430DAB, 0x03D8F0F0, 0xFE0EFAFC, 0xFE03FFFE);
	r6 = D(r6, s0_2_2, 0x028E0FF7, 0xFDE5EAF5, 0xFB070002, 0x0EC907AD);
	r7 = D(r7, s0_2_2, 0x0F01FB02, 0x0BF6F7FC, 0xF2151B0E, 0xFA0010FF);
	r0 = D(r0, s1_0_0, 0x0211EBFA, 0x07F405FD, 0xFFFCCA01, 0xE5F0EC0B);
	r1 = D(r1, s1_0_0, 0xFBE8F704, 0x0B18CD0B, 0x140A090E, 0x0102CCE0);
	r2 = D(r2, s1_0_0, 0xFFFB1C13, 0xFB02FDFF, 0x060105FD, 0xF0171CFE);
	r3 = D(r3, s1_0_0, 0x01F8FB01, 0x02F7F703, 0x1505D8FA, 0x0217FA04);
	r4 = D(r4, s1_0_0, 0xFC040DFB, 0x1210F700, 0xFD2710D8, 0xFA0BF2F8);
	r5 = D(r5, s1_0_0, 0xEBFFF514, 0xFBEC0A09, 0x04FF1B06, 0x020DF5FC);
	r6 = D(r6, s1_0_0, 0x05000A09, 0x150B0E12, 0xF9FC1303, 0x0B0F10EB);
	r7 = D(r7, s1_0_0, 0xFB0D1309, 0xF30602D5, 0x07EFFBF4, 0x0301FB04);
	r0 = D(r0, s1_0_1, 0x0DE801FD, 0x0EFCFFF2, 0x0308BFFF, 0xE50100FE);
	r1 = D(r1, s1_0_1, 0x03F30403, 0x0112E2FD, 0x0BF8FAFB, 0xF0EA0508);
	r2 = D(r2, s1_0_1, 0xF9EF21EA, 0xFF03FD04, 0xFDF70BFA, 0x151117F5);
	r3 = D(r3, s1_0_1, 0xF6F200EE, 0xFD02F602, 0x1A202202, 0x0AFD0407);
	r4 = D(r4, s1_0_1, 0x15FFF9FB, 0x070705FA, 0x100C0932, 0xEEFAEF14);
	r5 = D(r5, s1_0_1, 0x2312F50C, 0x0DE307FC, 0x06090801, 0x0F03FD00);
	r6 = D(r6, s1_0_1, 0x09D5FB0B, 0xF60000FD, 0x00FC03FB, 0x2603D9DD);
	r7 = D(r7, s1_0_1, 0x1CFA0CFF, 0xEDF6FED6, 0xFDFE05EC, 0xEC041402);
	r0 = D(r0, s1_0_2, 0xF5F10BEF, 0x1705FCF6, 0xE3FACEF2, 0xFD0502FA);
	r1 = D(r1, s1_0_2, 0x06FCFC04, 0x1611EBEF, 0x110DF5F2, 0xE201050B);
	r2 = D(r2, s1_0_2, 0xF2F5DCEF, 0xFAFDFF04, 0x0304FE05, 0xFD16F7FA);
	r3 = D(r3, s1_0_2, 0xFC04FCFF, 0xFEFCFD0D, 0x110EF509, 0xFB0404F9);
	r4 = D(r4, s1_0_2, 0xFCFFFE00, 0x0701F5FC, 0xFCE723F9, 0x08FAEF01);
	r5 = D(r5, s1_0_2, 0xFB1BEEED, 0xFF0303FE, 0xFD080B11, 0xFCFFFE00);
	r6 = D(r6, s1_0_2, 0x08FB05F5, 0xFFF3EF09, 0xFF0BF805, 0xF5F3F614);
	r7 = D(r7, s1_0_2, 0x03FE01FE, 0x02F1EEF3, 0x0A0A01FA, 0x01F30202);
	r0 = D(r0, s1_1_0, 0x05E90AF2, 0xF9E6E7FC, 0xDC0B94E5, 0xFCFBFE15);
	r1 = D(r1, s1_1_0, 0x25F105F7, 0xF31CDC0E, 0xFA23F7FA, 0xF707B5D8);
	r2 = D(r2, s1_1_0, 0x11080203, 0xFB0D02FF, 0xF6F10FF0, 0x11FE17EE);
	r3 = D(r3, s1_1_0, 0x04FAF403, 0x01F90104, 0xED2F0109, 0xFEF80504);
	r4 = D(r4, s1_1_0, 0x0DFD16F7, 0xF0F1F903, 0xF904EFD4, 0x0DEEEFF3);
	r5 = D(r5, s1_1_0, 0x071F19DB, 0xF8100B0E, 0x08F0130F, 0x01260600);
	r6 = D(r6, s1_1_0, 0x17DB0307, 0xDCEDD823, 0xFCFC0BF2, 0xC91D9920);
	r7 = D(r7, s1_1_0, 0x021F0519, 0xF4F90305, 0xFFFBF6F4, 0xFD0EF005);
	r0 = D(r0, s1_1_1, 0xEFFE03C4, 0xF218F8E6, 0x2FFADAD6, 0x2CDEF828);
	r1 = D(r1, s1_1_1, 0x25F8F70A, 0xE8EEDFCA, 0xF401E3F7, 0xF50209EA);
	r2 = D(r2, s1_1_1, 0x121AF8BD, 0xED23FA03, 0x2AF3FB01, 0xFFFEE1D0);
	r3 = D(r3, s1_1_1, 0xFE25E1D7, 0x0F04F818, 0xFF0F0002, 0xFE0604F9);
	r4 = D(r4, s1_1_1, 0x1EEE0DDD, 0xE71AFAE3, 0xDFF9DC0F, 0xECC0E6DC);
	r5 = D(r5, s1_1_1, 0x9E0F9EEF, 0x2CF3E9F0, 0xF6E21B0B, 0x2FF5FE06);
	r6 = D(r6, s1_1_1, 0x418A1004, 0xCD1812D2, 0x11EEFDFF, 0xFE37F504);
	r7 = D(r7, s1_1_1, 0xECE9E8DF, 0x090904E2, 0xD5280D04, 0xDD03FF15);
	r0 = D(r0, s1_1_2, 0x0DFA14F2, 0xFF080F04, 0xFCF1DAE9, 0x100A1500);
	r1 = D(r1, s1_1_2, 0x11F4FF02, 0x1701E4E0, 0x14F2D3E0, 0xEE010009);
	r2 = D(r2, s1_1_2, 0xDE01F7EA, 0x0808FBFC, 0xEDF7F5FC, 0x150606EC);
	r3 = D(r3, s1_1_2, 0x14FCF71A, 0x1B07F404, 0x02FD0BF4, 0x03F909F6);
	r4 = D(r4, s1_1_2, 0x0C01FDFD, 0xFA08F602, 0xFDF4FCE8, 0xDA04F6FE);
	r5 = D(r5, s1_1_2, 0xD1AFDC13, 0xD6EEE2F7, 0xFA0103F6, 0x1500FDFD);
	r6 = D(r6, s1_1_2, 0x07090F03, 0xFB13242A, 0xFBF10701, 0x160FE60C);
	r7 = D(r7, s1_1_2, 0x01F70C03, 0x00FF0301, 0x0BFEF2EE, 0xE205050A);
	r0 = D(r0, s1_2_0, 0xF902F905, 0x0311FEF9, 0xF3F20101, 0x05070506);
	r1 = D(r1, s1_2_0, 0x03F3F0F9, 0x020FEDD7, 0x0F05FDF9, 0xE5F213DA);
	r2 = D(r2, s1_2_0, 0xE8DEFC07, 0xFC050300, 0x0EFEEBF2, 0xEE0AEFDF);
	r3 = D(r3, s1_2_0, 0xF5FA0DFF, 0xFAEF03FE, 0x06F2000B, 0xFA04FF01);
	r4 = D(r4, s1_2_0, 0xF0F1FDF4, 0x03FA070E, 0x0B05FB10, 0xFD0101F3);
	r5 = D(r5, s1_2_0, 0xFBE9EFD7, 0xF9041004, 0xFFFA0C08, 0x01020002);
	r6 = D(r6, s1_2_0, 0x02F1030A, 0xFAFFFC0A, 0x050AFE07, 0xA5EAF210);
	r7 = D(r7, s1_2_0, 0xF50D28FF, 0x0D23FA0F, 0xEE11F1EF, 0x0DF8FCFF);
	r0 = D(r0, s1_2_1, 0xFAFEFB06, 0x1006F204, 0xDBFF0FFB, 0xF3F0FAF6);
	r1 = D(r1, s1_2_1, 0xFFF5F60A, 0xECDAFBAF, 0xF500C808, 0x2815F71C);
	r2 = D(r2, s1_2_1, 0x04FB00F9, 0x04FDFFFF, 0x040904D6, 0xF808ACF1);
	r3 = D(r3, s1_2_1, 0x17F4F2EE, 0xE9FFFFF6, 0x00DD1B0F, 0x0405F708);
	r4 = D(r4, s1_2_1, 0xE8FB07D3, 0xEFFD0BF9, 0x0BEBD5E8, 0x16DCE20C);
	r5 = D(r5, s1_2_1, 0x1DE020E5, 0xF9FBFEFF, 0x23FE0312, 0x04050102);
	r6 = D(r6, s1_2_1, 0x10D21609, 0xF80AE0FF, 0xEF0806F7, 0xF0263D81);
	r7 = D(r7, s1_2_1, 0xFE0D0702, 0x0408E617, 0x1E06FC0A, 0x1F140026);
	r0 = D(r0, s1_2_2, 0xFD00FF0C, 0x000402FC, 0xE2FA11E9, 0x07080A0B);
	r1 = D(r1, s1_2_2, 0x09FDFE04, 0x0109F9F8, 0xF703ED01, 0x0D06E8DD);
	r2 = D(r2, s1_2_2, 0x0505F8F6, 0xFAFD0100, 0xFB030307, 0x2009ED0C);
	r3 = D(r3, s1_2_2, 0xF90114E2, 0xE0FEFFF8, 0xF31128ED, 0x0406F5FC);
	r4 = D(r4, s1_2_2, 0x020803F1, 0xF702F800, 0xF90D12FD, 0xD515DEFC);
	r5 = D(r5, s1_2_2, 0x061BB9F9, 0xF6F0ECFD, 0x06130E04, 0xFCFE00FF);
	r6 = D(r6, s1_2_2, 0xE81105FB, 0xFC0F0AFF, 0xF804FB02, 0xC416C2B4);
	r7 = D(r7, s1_2_2, 0xF0041005, 0x0E0A0FFC, 0xF602F2F4, 0xFFFBF908);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0AFBFEFE, 0x07F90B04, 0x200A10F5, 0xDEDE0A03);
	r1 = D(r1, s0_0_0, 0xFDF8FD0B, 0x01FA4002, 0x11F4E40F, 0xF11AEEE5);
	r2 = D(r2, s0_0_0, 0x0EFC14F8, 0xFC020401, 0x0403EDEF, 0xF41409EE);
	r3 = D(r3, s0_0_0, 0x0A0512F1, 0xFE021906, 0xEC00FBF5, 0x0100F7FD);
	r4 = D(r4, s0_0_0, 0x02FCF803, 0x0BEEE40D, 0xEB163006, 0x140205FC);
	r5 = D(r5, s0_0_0, 0xD705DBE9, 0x000A160C, 0xFEEFD5F8, 0xF70502F9);
	r6 = D(r6, s0_0_0, 0x06FFF808, 0x1C02B605, 0x0004090B, 0xF90403EA);
	r7 = D(r7, s0_0_0, 0xF5FF16FE, 0xE50FE102, 0x11011AF1, 0x02FEFBFC);
	r0 = D(r0, s0_0_1, 0xFDFF09F3, 0x0A09F9E8, 0x0B08FF08, 0xFC25150A);
	r1 = D(r1, s0_0_1, 0x13FEFA0F, 0x04072BF0, 0x000108F7, 0x05F00528);
	r2 = D(r2, s0_0_1, 0xF214D802, 0x06FEFF0C, 0xFC04F5D0, 0x06FAECC6);
	r3 = D(r3, s0_0_1, 0x04050000, 0xFC04FEFC, 0x00ED18FD, 0x12EFFE08);
	r4 = D(r4, s0_0_1, 0x0207E8FB, 0x040609F9, 0xF221E108, 0xFC04F2FE);
	r5 = D(r5, s0_0_1, 0x040532E5, 0x17E123F7, 0x0F01FF00, 0xFD060804);
	r6 = D(r6, s0_0_1, 0x15FCCEE0, 0x1E04AA04, 0xF700F7F4, 0xEF060D26);
	r7 = D(r7, s0_0_1, 0x10F8BB11, 0x001813E8, 0x050D06EC, 0xF9030FFC);
	r0 = D(r0, s0_0_2, 0xFD020103, 0x08F5E004, 0xE024D6EF, 0x05F72FFA);
	r1 = D(r1, s0_0_2, 0xF906FAFD, 0x04FB3BD9, 0xF90DE4FD, 0xF907F9FB);
	r2 = D(r2, s0_0_2, 0xF6100FEE, 0x0102F600, 0x0306F3EB, 0x18131CE8);
	r3 = D(r3, s0_0_2, 0x16F70EF7, 0x07051202, 0xFF0900FF, 0xFBF60701);
	r4 = D(r4, s0_0_2, 0xFE06F906, 0xF208FEF7, 0x060C1406, 0x0F0B0109);
	r5 = D(r5, s0_0_2, 0xB22AD3F8, 0x0503FD09, 0x00F8F7F1, 0x0100F502);
	r6 = D(r6, s0_0_2, 0xF90EE6F4, 0xFA0A29E6, 0x020610F3, 0x1FE032FC);
	r7 = D(r7, s0_0_2, 0x01F80101, 0x0C1614F1, 0xEC0BFE04, 0x03F80B03);
	r0 = D(r0, s0_1_0, 0x1105DF09, 0xE908FF01, 0xE2F0E60C, 0x110804F6);
	r1 = D(r1, s0_1_0, 0x01F5F6FE, 0xE2E61ADA, 0xFA17F8F0, 0xCA0B24F4);
	r2 = D(r2, s0_1_0, 0xE9FFE5F4, 0xFDFEFC01, 0x080706FB, 0xEB1619E2);
	r3 = D(r3, s0_1_0, 0x00F40F1A, 0x03FE17F0, 0xE8F6D604, 0x1206FC05);
	r4 = D(r4, s0_1_0, 0x0312FCFB, 0xF607D7FD, 0xE9E001F6, 0xEEFAF734);
	r5 = D(r5, s0_1_0, 0x1401F92E, 0xF608D7FA, 0x10E6E9E8, 0xF705010F);
	r6 = D(r6, s0_1_0, 0x0EF10705, 0xF2E7C304, 0xFB00F7F8, 0x1508E7FA);
	r7 = D(r7, s0_1_0, 0xC80A14F0, 0x05E4FA05, 0x04F6EBFA, 0x0C0907FA);
	r0 = D(r0, s0_1_1, 0x11FC1A0B, 0x01FA13F7, 0x1A0B21DC, 0xA20BF204);
	r1 = D(r1, s0_1_1, 0x0604F60F, 0xCFF314C3, 0xFAF31E11, 0x011512F5);
	r2 = D(r2, s0_1_1, 0xFFF8F0FE, 0x1601F408, 0x10120AC0, 0x23FB03D9);
	r3 = D(r3, s0_1_1, 0x0B19FB22, 0xDF09E3F1, 0xF11A06CD, 0x12F50B00);
	r4 = D(r4, s0_1_1, 0xF708DB04, 0x060F0903, 0xE6CCB204, 0xEFF01A1C);
	r5 = D(r5, s0_1_1, 0xECCB0A11, 0x01FBE3FC, 0xEFEA06FC, 0x0808F506);
	r6 = D(r6, s0_1_1, 0xFF1605FC, 0x0ABCDB06, 0x02FC04E1, 0x050C1507);
	r7 = D(r7, s0_1_1, 0x1B0C0010, 0x0DE4E304, 0xEBF400F5, 0x08FBFFFF);
	r0 = D(r0, s0_1_2, 0xFBFFE00B, 0x11F5E901, 0x132311E4, 0xFFEDDD17);
	r1 = D(r1, s0_1_2, 0xEC04EF03, 0x350724DE, 0xFCE8E7FC, 0xFBF12DFE);
	r2 = D(r2, s0_1_2, 0xB8011C0F, 0xFEF701FB, 0xF2EEFAFE, 0x05FC1402);
	r3 = D(r3, s0_1_2, 0x07F9F809, 0x18F90A03, 0xF90502F9, 0x0C00FD00);
	r4 = D(r4, s0_1_2, 0x0F05FAF8, 0x090306F9, 0xFE0241E6, 0xF114D814);
	r5 = D(r5, s0_1_2, 0x24A7161C, 0x06EEFE0E, 0xF8F11608, 0xF9FEFB00);
	r6 = D(r6, s0_1_2, 0x09E3FDFE, 0xE8F1EA22, 0xF804FDED, 0x11FF261A);
	r7 = D(r7, s0_1_2, 0x05FDF9FC, 0xEFE8E6F1, 0xF516DAFF, 0xF209FA03);
	r0 = D(r0, s0_2_0, 0x0A0B2604, 0xFFEC0809, 0x1B1825DA, 0x0B082F05);
	r1 = D(r1, s0_2_0, 0xF9F411EC, 0xF1FDEF0A, 0x00D2CFFC, 0xD0FE0014);
	r2 = D(r2, s0_2_0, 0xFBFBD301, 0xFF010BFC, 0xFC0AE7F9, 0x12E710C9);
	r3 = D(r3, s0_2_0, 0x0BFBF30E, 0x05020B04, 0x13FF0DE9, 0xFFFEF901);
	r4 = D(r4, s0_2_0, 0xFB05FE0A, 0x11F7EE05, 0x14E9E513, 0xF412F920);
	r5 = D(r5, s0_2_0, 0xDD17F2D4, 0x2614FFF5, 0x0205C6FB, 0x04FA06FC);
	r6 = D(r6, s0_2_0, 0xFCFAFDEF, 0x0CE63000, 0x04040DF3, 0x00F9BBFA);
	r7 = D(r7, s0_2_0, 0x1DEFFE0A, 0x05E8F0F5, 0x0307FCE3, 0x0206FDFF);
	r0 = D(r0, s0_2_1, 0xF3F0FFF6, 0x0317E407, 0x15F8EBF7, 0x09FDEFFC);
	r1 = D(r1, s0_2_1, 0x0AF7ECFD, 0xF1F8E9E4, 0xF1EF18E9, 0xE8021305);
	r2 = D(r2, s0_2_1, 0xF7EB3E03, 0x06050A03, 0xF5F21C0C, 0x24F9DAF5);
	r3 = D(r3, s0_2_1, 0xE502DC08, 0x08E7F212, 0x0EFF17E2, 0xFFFBF4FB);
	r4 = D(r4, s0_2_1, 0xE206DA0B, 0xE6051DFC, 0x23E2311B, 0xF1D8FDF5);
	r5 = D(r5, s0_2_1, 0x244231CF, 0x010BFF26, 0x2E37FD0C, 0x0D020802);
	r6 = D(r6, s0_2_1, 0xFDED2DEC, 0x14FCF0FF, 0xFD04F4F2, 0x01A781CF);
	r7 = D(r7, s0_2_1, 0xF4F9D50A, 0x02EB160A, 0xFF1A03EF, 0x03060902);
	r0 = D(r0, s0_2_2, 0x0E0621F9, 0x02FE0804, 0xE20E1805, 0x17001302);
	r1 = D(r1, s0_2_2, 0x040603F7, 0x2D2438FA, 0x131AE8F4, 0xF4DA310B);
	r2 = D(r2, s0_2_2, 0x2001F204, 0xF9060001, 0xFD02150F, 0x1CF02408);
	r3 = D(r3, s0_2_2, 0xEB1DFCF8, 0x05080C00, 0x2A00180B, 0x07FBFCFB);
	r4 = D(r4, s0_2_2, 0xF9000608, 0x1304E4F6, 0x09EAF3E5, 0x0BE5000C);
	r5 = D(r5, s0_2_2, 0x81F61D02, 0xF902E412, 0xEFDAFEF1, 0xFDFFFB05);
	r6 = D(r6, s0_2_2, 0x1900E5FE, 0xFBE200F7, 0x06F2E8F9, 0x14A84C1F);
	r7 = D(r7, s0_2_2, 0x0A07F901, 0x1001F7ED, 0xFCEC0208, 0x0DFCFEFE);
	r0 = D(r0, s1_0_0, 0xF310FBF5, 0x000C16F1, 0xD8F81504, 0xE6E4FF0B);
	r1 = D(r1, s1_0_0, 0x02F7F7FA, 0x0B03FA10, 0x1607F7FF, 0x081FFBE7);
	r2 = D(r2, s1_0_0, 0xE0F51629, 0xFB00FD03, 0xF3FDFE21, 0xFA101616);
	r3 = D(r3, s1_0_0, 0xFEE7110C, 0xEC00FD10, 0xE6FB0AF6, 0x0A03FFF8);
	r4 = D(r4, s1_0_0, 0x0B080208, 0x030C0C05, 0xFC05032B, 0xF82313F6);
	r5 = D(r5, s1_0_0, 0x091014FC, 0x05F7F8F3, 0x2A0911F7, 0xFDF60003);
	r6 = D(r6, s1_0_0, 0x1703F80D, 0x0D00EA11, 0x010A0406, 0x09DFF1F0);
	r7 = D(r7, s1_0_0, 0xF20E02EC, 0x060705DE, 0x170807FB, 0xF7FC05FD);
	r0 = D(r0, s1_0_1, 0xF413F705, 0x0BF90A0B, 0x150108E9, 0xDA271200);
	r1 = D(r1, s1_0_1, 0x0206FE0E, 0x06281717, 0xFE1C0017, 0xF7E41717);
	r2 = D(r2, s1_0_1, 0xDA0205C2, 0xFF070004, 0x0FF50405, 0x111414F6);
	r3 = D(r3, s1_0_1, 0xE4F8FB02, 0x02F3120F, 0xE30305FB, 0x021DF5FC);
	r4 = D(r4, s1_0_1, 0xFF10F7F4, 0xF31CF601, 0xF3000B26, 0xFE270BF3);
	r5 = D(r5, s1_0_1, 0x1D2229FF, 0x1800FE0D, 0x0A00FD09, 0xFDFF0403);
	r6 = D(r6, s1_0_1, 0xF407FDFC, 0xD8F8F3E0, 0x03EE03FD, 0x02CE1413);
	r7 = D(r7, s1_0_1, 0xE615FEF2, 0x1EF9ECE8, 0xE11107EE, 0x0DE90A06);
	r0 = D(r0, s1_0_2, 0x05F9F118, 0xFDF0FEFC, 0x09DD2CF7, 0x08F20ADF);
	r1 = D(r1, s1_0_2, 0xF7FBFCFB, 0x000A0C05, 0xDFFF23EA, 0x09E2090B);
	r2 = D(r2, s1_0_2, 0x040FFA17, 0xF90702FF, 0x12EAF301, 0x010FE72B);
	r3 = D(r3, s1_0_2, 0x0F10FD06, 0x030405FE, 0x0DDB0102, 0x000A0101);
	r4 = D(r4, s1_0_2, 0x04F900FF, 0x0607F606, 0xEF04E910, 0xFB11EA04);
	r5 = D(r5, s1_0_2, 0x04EAED2E, 0x0605110C, 0xE502FD06, 0xF90002FD);
	r6 = D(r6, s1_0_2, 0xF1F6FE0F, 0xE61CF620, 0x08F6FB02, 0x00F22518);
	r7 = D(r7, s1_0_2, 0x12FFFE04, 0x0C11ED17, 0x03D60D0A, 0x0CF70302);
	r0 = D(r0, s1_1_0, 0xFDFB0005, 0xF1F6F7E8, 0x31031C0D, 0x1FE708EC);
	r1 = D(r1, s1_1_0, 0x1701F905, 0x28F3160B, 0x1613FCD7, 0x0F0F00FA);
	r2 = D(r2, s1_1_0, 0x13FA06F6, 0xFC0700FF, 0xF8FDFB01, 0x1209F8EC);
	r3 = D(r3, s1_1_0, 0x00E70E03, 0xF6F10305, 0xE3E11EF9, 0xF7FEF906);
	r4 = D(r4, s1_1_0, 0x0403050E, 0xD5EFF5F3, 0x05DF25E9, 0x0220050E);
	r5 = D(r5, s1_1_0, 0xE008D906, 0xF0F7FB09, 0x08FB01E6, 0xF704FF05);
	r6 = D(r6, s1_1_0, 0x0AF300FF, 0xEAFBDFCE, 0x14FDFEFD, 0x1D38F0FA);
	r7 = D(r7, s1_1_0, 0xE4FDFBEE, 0xFA00F10A, 0xF1050DEC, 0xFE0A00F9);
	r0 = D(r0, s1_1_1, 0xFCF2FC07, 0x03E1F60D, 0x01E6EBD9, 0x040618F4);
	r1 = D(r1, s1_1_1, 0x031719F5, 0x08EAFD02, 0x021A20DC, 0x1DC21508);
	r2 = D(r2, s1_1_1, 0xDC010BFC, 0xFC06F7FF, 0x01F80407, 0x0D25FCE0);
	r3 = D(r3, s1_1_1, 0xC4F91108, 0x05F404F5, 0xCAD911E7, 0x030D0A05);
	r4 = D(r4, s1_1_1, 0xEA08F8FF, 0xF507EDF8, 0x34122E0E, 0x02E716EB);
	r5 = D(r5, s1_1_1, 0x0B0DEC02, 0x09FD10F1, 0xE7DDE900, 0xF3FAF704);
	r6 = D(r6, s1_1_1, 0xF0FCF006, 0xF9D8DB81, 0x0B0F0AFC, 0x0CDE2BD3);
	r7 = D(r7, s1_1_1, 0xD0F5FAF2, 0x1316F0EF, 0xBED20807, 0x0EF4080B);
	r0 = D(r0, s1_1_2, 0x13F510F4, 0xFDF0F00C, 0x050903E4, 0xFE04091E);
	r1 = D(r1, s1_1_2, 0xF6FFFF05, 0xD5E61603, 0xEEEC16EE, 0xDD09091F);
	r2 = D(r2, s1_1_2, 0x1EFAFF07, 0xFCF6FEFC, 0x041E0C05, 0xDD0910F8);
	r3 = D(r3, s1_1_2, 0x08F6FC08, 0x0F01F80B, 0x17F7D8FC, 0xFCFC0D03);
	r4 = D(r4, s1_1_2, 0xFEF9DF0C, 0x09F9FA0E, 0xF8FFF5F1, 0x1C0104F1);
	r5 = D(r5, s1_1_2, 0xB6FA1B06, 0x070B1411, 0xE4EB0815, 0xFCFFFA01);
	r6 = D(r6, s1_1_2, 0x0F050912, 0x12F91481, 0x10090D0A, 0xF2210A01);
	r7 = D(r7, s1_1_2, 0xEDE2F7FC, 0xF70C030D, 0x2517E8F5, 0x030B0EFD);
	r0 = D(r0, s1_2_0, 0x1600F206, 0xEEFAFFFA, 0xFC060BEC, 0x0306FA0C);
	r1 = D(r1, s1_2_0, 0x0A03F808, 0x1EF9F404, 0x0EF609F9, 0xDD0AF00D);
	r2 = D(r2, s1_2_0, 0x090202E5, 0x0002FA03, 0xE00C0309, 0x1ED6F70F);
	r3 = D(r3, s1_2_0, 0xF7FC00FC, 0x0C0504F3, 0x14EEFF02, 0x01FEFD01);
	r4 = D(r4, s1_2_0, 0x0300F8F9, 0x0D0106F2, 0xDDE801F2, 0xE7FC05F8);
	r5 = D(r5, s1_2_0, 0x0D0803E9, 0xF115F107, 0xF8050AF8, 0x03FD0000);
	r6 = D(r6, s1_2_0, 0xFE0608FE, 0x19EBFA12, 0xF4010307, 0xF00F2121);
	r7 = D(r7, s1_2_0, 0x11FC06F2, 0x010403FE, 0x080511FE, 0x050A0EF9);
	r0 = D(r0, s1_2_1, 0x12FDE8FE, 0xF3FFFAF4, 0x0EF8FBF4, 0x07F7F806);
	r1 = D(r1, s1_2_1, 0xF6F703FC, 0xBADC1E05, 0xF0E1FFF9, 0x0B26F5EA);
	r2 = D(r2, s1_2_1, 0xFE20EFF5, 0x0100FE05, 0xF90A0EF2, 0x0A020B08);
	r3 = D(r3, s1_2_1, 0xFC2011FB, 0x0205F50E, 0x0302D2FB, 0x04FEFFF9);
	r4 = D(r4, s1_2_1, 0x1E0DF50F, 0x00F5E4FA, 0x04011519, 0xF9FE17F9);
	r5 = D(r5, s1_2_1, 0x0B1E09FA, 0x20F2F409, 0xFB20ECFB, 0xFF0101F9);
	r6 = D(r6, s1_2_1, 0x14F5FA04, 0x13F21FF9, 0x03FD0301, 0x0AE103D0);
	r7 = D(r7, s1_2_1, 0x1720F2F3, 0xF4F80312, 0x100AFDF0, 0xFBFD14F0);
	r0 = D(r0, s1_2_2, 0xF3E7090F, 0xFAFBE9F9, 0xFE0FFC00, 0x02190D08);
	r1 = D(r1, s1_2_2, 0xF6FBFEFE, 0x010C1B12, 0xD8ECFA06, 0x0E0400FB);
	r2 = D(r2, s1_2_2, 0x0C090BED, 0xFA03FF00, 0x0103FB08, 0xE3DD0002);
	r3 = D(r3, s1_2_2, 0x0DEAE3E9, 0xFBF7FA14, 0x2B24E512, 0x04FB07FD);
	r4 = D(r4, s1_2_2, 0x07030008, 0x0AF70508, 0xD4E6020C, 0x06FFF7FE);
	r5 = D(r5, s1_2_2, 0xFB12D220, 0x011807FC, 0x090D06FC, 0x0407FDFF);
	r6 = D(r6, s1_2_2, 0xFDFBFE00, 0x01EF3D13, 0xFF16FDF5, 0xF6E0F512);
	r7 = D(r7, s1_2_2, 0xFCFEE8F5, 0xEDEA0509, 0x100803FD, 0x0A04F301);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF8FBF0F8, 0x051D00F6, 0xFDFC1607, 0xF203030A);
	r1 = D(r1, s0_0_0, 0xF8F701FF, 0x01170C04, 0xF2DDFAD0, 0xEBF21BED);
	r2 = D(r2, s0_0_0, 0x07D41B03, 0x02FE0203, 0x09EEF1FD, 0x09E0FEF6);
	r3 = D(r3, s0_0_0, 0xFF0906FA, 0xFB0A0704, 0x001A0E08, 0xFCFDFBFC);
	r4 = D(r4, s0_0_0, 0xF8EBFCF9, 0xF907FC02, 0xF5F411F1, 0xF5EAE7F3);
	r5 = D(r5, s0_0_0, 0xDAD8F709, 0x12F50102, 0x00FFFFF6, 0x00FF0305);
	r6 = D(r6, s0_0_0, 0x09F61000, 0xCE0807E1, 0x0304F5FF, 0xE71C15F9);
	r7 = D(r7, s0_0_0, 0xFB12FF0E, 0x1609F908, 0xE2F8FBFF, 0x00080400);
	r0 = D(r0, s0_0_1, 0xF60A08F7, 0x090B02EF, 0xFF24FA00, 0xF800E807);
	r1 = D(r1, s0_0_1, 0xFBF400FD, 0x0107DDE5, 0x1103F5F3, 0xF51BC6F5);
	r2 = D(r2, s0_0_1, 0xF0DB0CF9, 0x01FCFF01, 0x0EFA0FF2, 0xF6F7FCD4);
	r3 = D(r3, s0_0_1, 0xF7F6EFE1, 0x0D0F10FF, 0xFF11FD05, 0x0B12FF07);
	r4 = D(r4, s0_0_1, 0xFAF9030D, 0xEF020BF9, 0x07343CE4, 0x1405250D);
	r5 = D(r5, s0_0_1, 0x27FD0C21, 0x120BFFF4, 0x00F900FA, 0x0003FB05);
	r6 = D(r6, s0_0_1, 0xFD0AFA04, 0xC0F8FF1A, 0xFFFD0B06, 0x0514DAEE);
	r7 = D(r7, s0_0_1, 0xCBFE070F, 0xD7EAFDE9, 0xF8F110EB, 0x03F2F407);
	r0 = D(r0, s0_0_2, 0x0611ED1D, 0x01FD03E4, 0x0EDF0232, 0xEFF907EC);
	r1 = D(r1, s0_0_2, 0xFD030308, 0xF4E717AC, 0x091002F4, 0x15F60F0A);
	r2 = D(r2, s0_0_2, 0xF301FE0B, 0x02030504, 0x09F80206, 0x0C06EDDA);
	r3 = D(r3, s0_0_2, 0x161A02EA, 0x12F10F00, 0xFF0EFD1E, 0xFD05FFFE);
	r4 = D(r4, s0_0_2, 0x06F6FF0B, 0xF5F3F7EB, 0xF7160AF4, 0xF0E5FC04);
	r5 = D(r5, s0_0_2, 0x0F1C020F, 0x0116EEF7, 0x0905070B, 0x00090705);
	r6 = D(r6, s0_0_2, 0x0607F3FD, 0xF2010DE4, 0x0609FE08, 0xFEDF0DEE);
	r7 = D(r7, s0_0_2, 0x020E0614, 0xFA0709C8, 0xFAFB0CF1, 0xF5010507);
	r0 = D(r0, s0_1_0, 0x0A1C01F5, 0x12F40F06, 0x050013F8, 0x13F7EC08);
	r1 = D(r1, s0_1_0, 0xFFFF0500, 0x15FCE606, 0x16EEFF0B, 0x12F8EF0F);
	r2 = D(r2, s0_1_0, 0xE6F807FE, 0x08F7FDFE, 0xF1FCF201, 0x090CE4F2);
	r3 = D(r3, s0_1_0, 0xFD01F5EB, 0x070A05F6, 0xC6F7F912, 0x020403FD);
	r4 = D(r4, s0_1_0, 0x04F308FA, 0xF1F30CFA, 0x04DAFC20, 0xF8F8ECFA);
	r5 = D(r5, s0_1_0, 0x2221DC0B, 0xEEF301F8, 0xFF120D00, 0xFEFAFC00);
	r6 = D(r6, s0_1_0, 0xDF07100C, 0xF5E70D0C, 0x0506FC0B, 0x1381210E);
	r7 = D(r7, s0_1_0, 0x07F7FE00, 0x0D090AFF, 0xEAF60607, 0xEF1D0A04);
	r0 = D(r0, s0_1_1, 0x1603EB15, 0xEFF709F1, 0x1AFC381C, 0x18F0D61E);
	r1 = D(r1, s0_1_1, 0x02FD0619, 0xEE08B8EA, 0x01FA0208, 0x220CF51B);
	r2 = D(r2, s0_1_1, 0xF42C0717, 0x00FD040C, 0x0AFAFF01, 0x06E129E2);
	r3 = D(r3, s0_1_1, 0x0AFAF4E5, 0xF501F7E6, 0xEECFEAF5, 0x0912FBFD);
	r4 = D(r4, s0_1_1, 0xFE0712E9, 0x05FE07CC, 0xFF03FA20, 0x06FC23E8);
	r5 = D(r5, s0_1_1, 0xE4FF0023, 0x091F0EFB, 0x12F0ED1C, 0xFDF70508);
	r6 = D(r6, s0_1_1, 0x0E08132C, 0xE7090308, 0x040605FE, 0x092CAD41);
	r7 = D(r7, s0_1_1, 0xFF1606E2, 0xF6E2F5F1, 0x0D0B10E7, 0x0417E7FE);
	r0 = D(r0, s0_1_2, 0xF70C0900, 0x12F2F3ED, 0xE0E6DAEC, 0xED06EDEF);
	r1 = D(r1, s0_1_2, 0x01FB0C0E, 0x1210F2F7, 0x0E01160E, 0xFBFD0005);
	r2 = D(r2, s0_1_2, 0x11F2F406, 0xFF000507, 0xF705FC02, 0x0B220910);
	r3 = D(r3, s0_1_2, 0x04FBE701, 0x03FF0F02, 0x08FE0C19, 0xFE030104);
	r4 = D(r4, s0_1_2, 0x00FD03FA, 0xF50302CF, 0x07FA1318, 0xE7EB14AE);
	r5 = D(r5, s0_1_2, 0xEB30D5AA, 0x0A10FA02, 0x050D0C10, 0x01FD0205);
	r6 = D(r6, s0_1_2, 0x0D0C0807, 0xE80EF526, 0x08000C16, 0x0DCBF43C);
	r7 = D(r7, s0_1_2, 0xFFFC0A1E, 0x0504E4D7, 0x0C0DE7DB, 0xFAF80BFA);
	r0 = D(r0, s0_2_0, 0xF80F03FE, 0x00FC08EE, 0x0DDDDB09, 0x04F9FCF6);
	r1 = D(r1, s0_2_0, 0xECF40501, 0x0CEFF706, 0xEFF9EDFF, 0x1AF9F004);
	r2 = D(r2, s0_2_0, 0x0DFB0DF3, 0xFBFBFEFE, 0x0BFFFB01, 0x07FF1A10);
	r3 = D(r3, s0_2_0, 0xF5EF12F4, 0xF1020007, 0x0FF9EBFD, 0x040405FF);
	r4 = D(r4, s0_2_0, 0xFEFA0903, 0xF20CF60E, 0x1B1F462C, 0xFEFEF712);
	r5 = D(r5, s0_2_0, 0xFD1521E8, 0xFA13F0F9, 0x0A031805, 0xFAFFFEFF);
	r6 = D(r6, s0_2_0, 0x0DF6FF07, 0xF023EE08, 0xFFFDFC01, 0xA8AB27E6);
	r7 = D(r7, s0_2_0, 0xEE0DF803, 0xFD1514F3, 0x0502FD00, 0xF9FDF801);
	r0 = D(r0, s0_2_1, 0xF504ED08, 0x01F911F3, 0x210EF2EF, 0xF0FD00FE);
	r1 = D(r1, s0_2_1, 0xFCFCFF19, 0x061FE517, 0xEE08E914, 0x071AF31C);
	r2 = D(r2, s0_2_1, 0x15E4110D, 0x08030106, 0x05FBF402, 0xF405F411);
	r3 = D(r3, s0_2_1, 0x09FDFA07, 0xFB0FFAF9, 0x11E304F5, 0xF60000FE);
	r4 = D(r4, s0_2_1, 0x02051909, 0xFE080AFE, 0x02EAF507, 0xE323EE0A);
	r5 = D(r5, s0_2_1, 0x12CB2817, 0xF6EF1109, 0xFB01FF0C, 0x03FDFCFF);
	r6 = D(r6, s0_2_1, 0xEBF00CF6, 0x09ECF1FF, 0xFFFB0E01, 0x013FCBDB);
	r7 = D(r7, s0_2_1, 0xF7E5D325, 0xFC0203FF, 0x15F501EE, 0xF5ED02F2);
	r0 = D(r0, s0_2_2, 0xFC0DF20C, 0x05F4F3EA, 0xFDF6F3F3, 0xFDFDF809);
	r1 = D(r1, s0_2_2, 0x07FF030E, 0xFC0F2301, 0x0C1EF607, 0xF3FDEB07);
	r2 = D(r2, s0_2_2, 0x10FE03F4, 0xFE010508, 0x06F5FE0A, 0xFBF4E510);
	r3 = D(r3, s0_2_2, 0x05F402F3, 0xFA071003, 0x14DDF7ED, 0x0103FF01);
	r4 = D(r4, s0_2_2, 0x080707FC, 0x09F805E4, 0x1A0BF71F, 0xD91B17F1);
	r5 = D(r5, s0_2_2, 0x2F3A8708, 0xF4E3F6EF, 0x08E5EF1C, 0x00FC0504);
	r6 = D(r6, s0_2_2, 0xF3F41006, 0x1E1C1026, 0xFEFDF704, 0x191027EC);
	r7 = D(r7, s0_2_2, 0x09EB1428, 0x11222303, 0x000DFDF6, 0xFA00F9F8);
	r0 = D(r0, s1_0_0, 0xF4FA041B, 0xF9FE0600, 0x0EE6DFEB, 0xFEF9D708);
	r1 = D(r1, s1_0_0, 0x0708FA04, 0x12F70E03, 0x15E91017, 0xFAF81808);
	r2 = D(r2, s1_0_0, 0xEBF3EEDD, 0x060200FC, 0xFEF707F5, 0x06EF0BEA);
	r3 = D(r3, s1_0_0, 0xEAFD11F2, 0x030F0007, 0xF211FAF4, 0x00FF0403);
	r4 = D(r4, s1_0_0, 0xFCF4F4FB, 0xF903FD06, 0xBF00EB07, 0x010BE90D);
	r5 = D(r5, s1_0_0, 0x32FAE801, 0x10F9FB08, 0x0609110B, 0x07FF04F7);
	r6 = D(r6, s1_0_0, 0x05F0FE1B, 0xED001FF4, 0x0302FF01, 0x12FBC9DA);
	r7 = D(r7, s1_0_0, 0x08E9E9F5, 0x9F0D0F02, 0xF0071CF0, 0xF4FEFB10);
	r0 = D(r0, s1_0_1, 0x1309050C, 0x02060C08, 0x34F6E927, 0xFDFFF8E8);
	r1 = D(r1, s1_0_1, 0x00FC060B, 0xF0E9FCE9, 0x0FE9F2FE, 0xE8150D3B);
	r2 = D(r2, s1_0_1, 0xF52AF803, 0x0402FCFF, 0x04FF1DE4, 0xF3E706CF);
	r3 = D(r3, s1_0_1, 0xE7F8FD12, 0x0502F3F2, 0xF01309D7, 0xF6020010);
	r4 = D(r4, s1_0_1, 0xFE0E1303, 0x0008EF0E, 0x13ECF30D, 0xEF05E9FB);
	r5 = D(r5, s1_0_1, 0x2143EA09, 0x0708FE02, 0x02F41703, 0x02FF03FF);
	r6 = D(r6, s1_0_1, 0x0E0309F8, 0x150000F9, 0x080A02FF, 0xE40308F2);
	r7 = D(r7, s1_0_1, 0xFA02FB1C, 0xEB14E1FE, 0x00D9F1D1, 0xFCF2F10F);
	r0 = D(r0, s1_0_2, 0x040003FB, 0x06F8FC0B, 0x34F7FDC6, 0xE90822F7);
	r1 = D(r1, s1_0_2, 0xFEFE0F00, 0x0DEAE4E8, 0x18FEFD01, 0xF808AD0D);
	r2 = D(r2, s1_0_2, 0xEB02EFF8, 0x02010502, 0xFD0E0EE7, 0x05EE0CCC);
	r3 = D(r3, s1_0_2, 0xEE01EBF4, 0x000EEC09, 0x01E717E7, 0xF8F9FF01);
	r4 = D(r4, s1_0_2, 0xFFFAEEF6, 0xF400E3F9, 0xF4F622FC, 0xF2E6D617);
	r5 = D(r5, s1_0_2, 0x1E8112E3, 0x15EF180F, 0xFCF9110D, 0xFF010703);
	r6 = D(r6, s1_0_2, 0x0704FAFA, 0xE0EAFAFD, 0xF10400ED, 0xF2E0E934);
	r7 = D(r7, s1_0_2, 0x090BEFF8, 0xF30BE408, 0xF3FA0705, 0xFA0909F8);
	r0 = D(r0, s1_1_0, 0xF603F400, 0xF4D2010C, 0x17AA00FD, 0xF1FF0009);
	r1 = D(r1, s1_1_0, 0x0CF5FF03, 0x0103EFD8, 0x08FD04F6, 0xFD0801F4);
	r2 = D(r2, s1_1_0, 0x1E01EF09, 0x06000101, 0xFFF710F6, 0xDC2A10E5);
	r3 = D(r3, s1_1_0, 0xFC08E5F8, 0x25E2FAE9, 0x25EEFEF3, 0xFAFFFF03);
	r4 = D(r4, s1_1_0, 0xF6080CFE, 0x0FECF5E0, 0x1026E4FB, 0xECF70008);
	r5 = D(r5, s1_1_0, 0x191804E8, 0x0FFFFDFD, 0xE8FD0CEE, 0x050DFA05);
	r6 = D(r6, s1_1_0, 0x071704F3, 0x22FBF7F4, 0xE80209FF, 0x33E30421);
	r7 = D(r7, s1_1_0, 0x26FDF1FB, 0xEEFDEA05, 0x02D7F9FA, 0x05FCFC0A);
	r0 = D(r0, s1_1_1, 0xF210D901, 0xFFE6F9FB, 0x1EF028EC, 0xFBFA03F7);
	r1 = D(r1, s1_1_1, 0x07FBF9FA, 0xF50E1AE4, 0x26F81200, 0xFD10FD19);
	r2 = D(r2, s1_1_1, 0xED090403, 0x02050202, 0xEFF30AED, 0x3BF1ACD0);
	r3 = D(r3, s1_1_1, 0x06181AFE, 0x0AFB0D06, 0xFA070BFD, 0xFBFAFDFD);
	r4 = D(r4, s1_1_1, 0xEF08FBF1, 0xE50AF807, 0x1C17E20B, 0x10F8EAFA);
	r5 = D(r5, s1_1_1, 0x3907220F, 0xE0F33B0A, 0xF6FDF8FB, 0x00FD02FA);
	r6 = D(r6, s1_1_1, 0xE60E0500, 0x03EC0A11, 0xE9FAFB02, 0x251510F3);
	r7 = D(r7, s1_1_1, 0xFF051A11, 0xE100FF09, 0xE9EDF704, 0xFCFFFA06);
	r0 = D(r0, s1_1_2, 0x06F70308, 0xF9FDF013, 0x2107F3CC, 0xFE03F50B);
	r1 = D(r1, s1_1_2, 0x01FD07F7, 0xE302E4CD, 0x10190209, 0xEAF50C2C);
	r2 = D(r2, s1_1_2, 0xEC24EEF5, 0xFFFA05FA, 0x070010F7, 0x09E2FEF0);
	r3 = D(r3, s1_1_2, 0xF10D0B02, 0x0008F8EA, 0xF2FC13F0, 0x0307FF09);
	r4 = D(r4, s1_1_2, 0xF20307F7, 0x020EE700, 0x15F0F2F4, 0x0C05FA25);
	r5 = D(r5, s1_1_2, 0xF003ED0D, 0x0B12FE0F, 0x11EB1804, 0xFFFD0AFC);
	r6 = D(r6, s1_1_2, 0xE30509F0, 0xF5E3160C, 0x0F010AE0, 0xEEAD0C04);
	r7 = D(r7, s1_1_2, 0xE4F40008, 0xFA0B000C, 0xF70EED16, 0x06020100);
	r0 = D(r0, s1_2_0, 0x020A0313, 0x08EFE803, 0xFC0CDDD9, 0x0AF9E702);
	r1 = D(r1, s1_2_0, 0x13120602, 0xF3FC07FA, 0x14F60107, 0x0A06F1EB);
	r2 = D(r2, s1_2_0, 0x29080D01, 0x03010002, 0x0D03F7E3, 0xFDE70702);
	r3 = D(r3, s1_2_0, 0xF50608FF, 0x0A16FAF9, 0xF30C1902, 0xFCFD0100);
	r4 = D(r4, s1_2_0, 0xFC0B01EE, 0x0DF9FD02, 0x0FED2D0C, 0x0008EA0E);
	r5 = D(r5, s1_2_0, 0xFD16F8E4, 0x0BF2FB05, 0x09F1EEF5, 0xFEFDFE01);
	r6 = D(r6, s1_2_0, 0x0CFCEF0F, 0x28122F18, 0x01F80501, 0xE8FDC1EF);
	r7 = D(r7, s1_2_0, 0x0F01EB15, 0x0305161C, 0xE4FEF4F0, 0xFA060FFB);
	r0 = D(r0, s1_2_1, 0x0CF5F30E, 0x00F7F904, 0x13FCDCF9, 0xF216E902);
	r1 = D(r1, s1_2_1, 0x010213F7, 0xF50816FD, 0x000A06FF, 0xEDCB0CF9);
	r2 = D(r2, s1_2_1, 0x0D03DEEC, 0x010204FD, 0x0FFE07F3, 0xFCEE28DB);
	r3 = D(r3, s1_2_1, 0xF4F723FA, 0x18110F16, 0xDC1ECFE8, 0xFCFBFD02);
	r4 = D(r4, s1_2_1, 0x03FEFEF4, 0xFD10FE07, 0x2301F2FE, 0xE5F9E5F8);
	r5 = D(r5, s1_2_1, 0x0A16DF0E, 0x110EF1EA, 0xF3ECEFF9, 0xFE000600);
	r6 = D(r6, s1_2_1, 0x0DF5F0F2, 0x122A190D, 0xF6FCF6FD, 0x1DE981C2);
	r7 = D(r7, s1_2_1, 0x0D01F306, 0x090D120D, 0x020D0EF7, 0xEC07F706);
	r0 = D(r0, s1_2_2, 0xF70CFF10, 0xFAF2FAFF, 0x16EF0FE3, 0x15FFEC0E);
	r1 = D(r1, s1_2_2, 0x010402FF, 0xFB0121F2, 0xFA0CDC0A, 0xF7010B1F);
	r2 = D(r2, s1_2_2, 0xF6F91C09, 0x01020205, 0x03FF05FE, 0xFAF41BFC);
	r3 = D(r3, s1_2_2, 0xFA0DF900, 0x0009F0FA, 0xF30202FD, 0xFCFF04FC);
	r4 = D(r4, s1_2_2, 0xFC00FBFB, 0xFE01E307, 0x0AE630D0, 0xE8EDB209);
	r5 = D(r5, s1_2_2, 0xF092B2FB, 0x0A050E08, 0xE4040709, 0x04000105);
	r6 = D(r6, s1_2_2, 0x0BFF05FF, 0x000815F8, 0xFCFBFEFD, 0xD5811F07);
	r7 = D(r7, s1_2_2, 0xF608F511, 0xFFEC04E9, 0x07010703, 0x04F7F7F8);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(4.242e-03, 1.679e-02, -7.271e-02, 2.667e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(1.568e-02, -4.918e-02, -1.192e-02, -9.224e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(3.506e-02, 3.934e-02, 2.123e-02, -2.798e-04);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(1.932e-02, 1.321e-02, -2.894e-02, 2.900e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(8.153e-03, 5.766e-02, -4.576e-02, 2.172e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-3.978e-02, -1.678e-02, 1.501e-02, 5.712e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-7.720e-02, -8.273e-03, -3.747e-02, 1.725e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(7.124e-03, 5.075e-02, 7.354e-04, -2.282e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-DS-conv5
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFEFF02FC, 0x1605EBCB, 0xE5F6060D, 0xFFF1F1FC);
	r1 = D(r1, s0_0_0, 0xF206FA07, 0xFDFCF80E, 0xDEEC1025, 0xF5F8F1E4);
	r2 = D(r2, s0_0_0, 0x01F708FE, 0x09FE08FD, 0x0602FFF9, 0xFF02FDFE);
	r3 = D(r3, s0_0_0, 0xF215F8FC, 0xEDF7E42B, 0x0000FCF5, 0xE522ED1F);
	r4 = D(r4, s0_0_0, 0x81411581, 0xFF0101FE, 0x06E4F917, 0x07F509FC);
	r5 = D(r5, s0_0_0, 0xF5F300EC, 0x0004FCFE, 0x0411FA04, 0x0DF8F20F);
	r6 = D(r6, s0_0_0, 0xE4BC140E, 0x02030007, 0xFFFEFF05, 0x100907F7);
	r7 = D(r7, s0_0_0, 0xFE06F9F9, 0xFE0AFAFD, 0x0F0F0600, 0xFFFEF0FD);
	r0 = D(r0, s0_0_1, 0xFFFD0302, 0xEE06CD3A, 0xE32C1909, 0x08060304);
	r1 = D(r1, s0_0_1, 0xEFFDE609, 0x270F02DB, 0x2904D8CD, 0xF900F9D6);
	r2 = D(r2, s0_0_1, 0xFB0700F1, 0x090AFF07, 0x01F819F8, 0xFB11F6F2);
	r3 = D(r3, s0_0_1, 0xFDEF0EFF, 0xE40B0FEA, 0xF7FAF80A, 0x02F61CF7);
	r4 = D(r4, s0_0_1, 0xA7B5D7DF, 0xFE000401, 0x090CF8E6, 0x040908FA);
	r5 = D(r5, s0_0_1, 0xF105DCED, 0x11F90501, 0xFC00E703, 0x040D2BEF);
	r6 = D(r6, s0_0_1, 0x01FD07E0, 0xFC04F205, 0x02020804, 0x0EF6FF05);
	r7 = D(r7, s0_0_1, 0xEFEF14EE, 0xFEFFFE08, 0x00E9EBF3, 0xFC0709E3);
	r0 = D(r0, s0_0_2, 0x0004FF00, 0xF5DF2EBE, 0x26F4EE21, 0x080BFF08);
	r1 = D(r1, s0_0_2, 0x151003FA, 0x04142BEC, 0xD3812622, 0xFAD300EC);
	r2 = D(r2, s0_0_2, 0xFEF60D07, 0xFB12FEFF, 0x0919E9F4, 0xFCF4F9F8);
	r3 = D(r3, s0_0_2, 0x00F605FC, 0x04F6F60B, 0x0D080DFC, 0x06F600F3);
	r4 = D(r4, s0_0_2, 0x81C5818C, 0x00FFFAFB, 0x05F7FA04, 0xFAF801FE);
	r5 = D(r5, s0_0_2, 0xF114D0F9, 0xFFF3010A, 0x00EEFBC9, 0x04050D10);
	r6 = D(r6, s0_0_2, 0x00E10007, 0x020C04F9, 0x01FC0503, 0x06150806);
	r7 = D(r7, s0_0_2, 0xFAEE0804, 0xFF0302F9, 0x03FEFDFB, 0xFCD81EFB);
	r0 = D(r0, s0_1_0, 0xFEFCFEFB, 0xEBEE1A07, 0x3109E902, 0x09E701F8);
	r1 = D(r1, s0_1_0, 0xFD0B1308, 0x18A6F822, 0xFFED01F1, 0xE7F306ED);
	r2 = D(r2, s0_1_0, 0x0BFA04F6, 0xFEFF01F1, 0x0E1117F5, 0xF6EDFCFF);
	r3 = D(r3, s0_1_0, 0xFD02140C, 0xE091E0E8, 0xEF0BE6D2, 0xEAFEE80C);
	r4 = D(r4, s0_1_0, 0x00F9EDF1, 0xFBFBFAFD, 0x04D4FA26, 0x040CE3FF);
	r5 = D(r5, s0_1_0, 0xE1D702E0, 0x0C040A09, 0xE7EBFDEE, 0xFE07FBF0);
	r6 = D(r6, s0_1_0, 0x02E5C5F4, 0xF915FD01, 0x01050405, 0x090DF3E8);
	r7 = D(r7, s0_1_0, 0x150701E0, 0xF2F2FCFC, 0x09E5FE03, 0xFF05E9D3);
	r0 = D(r0, s0_1_1, 0x02FA0400, 0xECDCF10E, 0xD9F8F7F6, 0xF501FC07);
	r1 = D(r1, s0_1_1, 0xFF320113, 0xF9E20BCF, 0xF984ED84, 0xEC01FA0F);
	r2 = D(r2, s0_1_1, 0x0CE1F7F5, 0x01F200FC, 0x06EBBDFF, 0x020806FD);
	r3 = D(r3, s0_1_1, 0x000C090A, 0xE6E11616, 0xFCFE03B0, 0x01F1C80A);
	r4 = D(r4, s0_1_1, 0x0D2DC8E6, 0x010307F9, 0x13240104, 0x13E8FFF3);
	r5 = D(r5, s0_1_1, 0xF2E5CADF, 0x17080F07, 0xECF60FFD, 0x05EBE3F6);
	r6 = D(r6, s0_1_1, 0x0F0E06E2, 0x09F1210C, 0xFDF9EFFC, 0xF71D1981);
	r7 = D(r7, s0_1_1, 0x06F9E3D0, 0x0009F900, 0xEEF9E8E2, 0x00EFE381);
	r0 = D(r0, s0_1_2, 0x00F70401, 0xF4FE0206, 0x02111903, 0x0BDBEF03);
	r1 = D(r1, s0_1_2, 0xF4120409, 0xDC8133E7, 0xCDC80E26, 0xF2F300EC);
	r2 = D(r2, s0_1_2, 0x02DF0D13, 0xFD0EF8FA, 0xFBE1FEF6, 0x010CF7F4);
	r3 = D(r3, s0_1_2, 0xF732F708, 0x172107FE, 0xEAF6F7AB, 0x0A14FC1A);
	r4 = D(r4, s0_1_2, 0xF11A0EF9, 0x01F7FBFC, 0x03F5F9EC, 0xFEF90A1D);
	r5 = D(r5, s0_1_2, 0x08BFFC98, 0xFB0901FF, 0x110CFEE7, 0x09DF03F9);
	r6 = D(r6, s0_1_2, 0xFDBA0D29, 0x02DF0209, 0x00F90301, 0x06F3EDBE);
	r7 = D(r7, s0_1_2, 0x06160F15, 0x0706F2F7, 0xF8180BF3, 0xFE10FBD5);
	r0 = D(r0, s0_2_0, 0x0304FF04, 0xE728B6E6, 0x11C901F6, 0x03F505F7);
	r1 = D(r1, s0_2_0, 0xF50A120F, 0x1500EA04, 0x2295DC26, 0xFBF0FE05);
	r2 = D(r2, s0_2_0, 0x02ECF603, 0x0320F0F2, 0x031BFCF2, 0xF700FAF5);
	r3 = D(r3, s0_2_0, 0x09FA04F5, 0x050BEEDE, 0xFAE50BDB, 0xD01D3D33);
	r4 = D(r4, s0_2_0, 0xF9FF0A1A, 0xFD03FFFC, 0xFBFAEA04, 0xF21AFD02);
	r5 = D(r5, s0_2_0, 0xE1DBFFFC, 0x09FA08F2, 0xCD2B01E8, 0x04D1072D);
	r6 = D(r6, s0_2_0, 0x11EAEDFA, 0xFAF4050A, 0x01030203, 0xF2EBFAE0);
	r7 = D(r7, s0_2_0, 0x22F9FE09, 0xF912FDF0, 0x00F4F607, 0xD0E101BA);
	r0 = D(r0, s0_2_1, 0x04FEF803, 0x28EBCA06, 0xE0F381D6, 0x0223F8F3);
	r1 = D(r1, s0_2_1, 0x0B0A0F03, 0xFB33FE19, 0xC944EEEA, 0x0204F0F5);
	r2 = D(r2, s0_2_1, 0xF1FFEE07, 0xFE16EAF3, 0x0918F2DC, 0xFF0009F0);
	r3 = D(r3, s0_2_1, 0xFDDB0423, 0xF916DA2C, 0xF2F5FB00, 0xF4E1DC48);
	r4 = D(r4, s0_2_1, 0xE801F1EA, 0x040002FC, 0x0AED0309, 0xFA0AFC03);
	r5 = D(r5, s0_2_1, 0x0BF5161E, 0x0A05FFF6, 0x04D701C8, 0x0D000AE0);
	r6 = D(r6, s0_2_1, 0xE0200341, 0x040608F5, 0x0103F40B, 0x01F80BF7);
	r7 = D(r7, s0_2_1, 0xF5ED0204, 0x0CFCFF0A, 0xF61C0505, 0xD10D0181);
	r0 = D(r0, s0_2_2, 0xFAFCFD01, 0xF3FCF9FA, 0xD8FB181E, 0x0DECFEEC);
	r1 = D(r1, s0_2_2, 0xFAFD02FB, 0xDC8183DC, 0x18CB1F0F, 0xF4F9090A);
	r2 = D(r2, s0_2_2, 0xFEEF070A, 0xF3F0FAEE, 0xF411FDEA, 0x03F70407);
	r3 = D(r3, s0_2_2, 0xFE1FFF0B, 0x1D53FC04, 0x0EF507CA, 0xEA45E8F6);
	r4 = D(r4, s0_2_2, 0xFA0106FF, 0xFAFA0306, 0x00F80AE8, 0x0BFE09EA);
	r5 = D(r5, s0_2_2, 0x04F1F6F7, 0x0CFA02F8, 0x0200060C, 0x00E40B11);
	r6 = D(r6, s0_2_2, 0x1718F815, 0x02080207, 0xFDFD00FF, 0x0429071D);
	r7 = D(r7, s0_2_2, 0x0D0DFBF7, 0xF90805FC, 0xF2E9F90B, 0x04E6FDD4);
	r0 = D(r0, s1_0_0, 0xFFFEFE02, 0xFFD32503, 0x2C17C13B, 0xF5F91106);
	r1 = D(r1, s1_0_0, 0xFDEE09FC, 0xFEEF32F3, 0xF21D04EE, 0xFEF207FD);
	r2 = D(r2, s1_0_0, 0xF40400FD, 0x06070800, 0xFD03FAF0, 0xFAFC02F3);
	r3 = D(r3, s1_0_0, 0xF6F60908, 0xD00C060C, 0xEA0B02F9, 0xF3EA0908);
	r4 = D(r4, s1_0_0, 0xB1164ED6, 0x01FD0008, 0x05E71A03, 0xFCFFFB01);
	r5 = D(r5, s1_0_0, 0xE7FF0607, 0x0203F6FF, 0x08FD00FD, 0x1105FAF7);
	r6 = D(r6, s1_0_0, 0x0609EE1E, 0xFA020BF4, 0xFA0004FF, 0x0EFBF506);
	r7 = D(r7, s1_0_0, 0xFC060007, 0xF6FD0AFC, 0x06D2FD0E, 0x0CFD0816);
	r0 = D(r0, s1_0_1, 0x0501FDFE, 0x25B6EEF8, 0x1DF4E000, 0xF5EC0409);
	r1 = D(r1, s1_0_1, 0xFC0517FB, 0x12F11625, 0x07DBEC13, 0xEA030BDF);
	r2 = D(r2, s1_0_1, 0x12F6EB14, 0xF4FE0E01, 0xFF24FC10, 0xF3050DF7);
	r3 = D(r3, s1_0_1, 0xFEF9F307, 0xEFF3ECFB, 0xEB01F906, 0x0101EEE1);
	r4 = D(r4, s1_0_1, 0x00FFFFEA, 0xFD05FF04, 0x13E30BF8, 0x07FFFC0E);
	r5 = D(r5, s1_0_1, 0xD807FF0B, 0x0403F6DE, 0x07FE11FB, 0x061204F7);
	r6 = D(r6, s1_0_1, 0xEEFA05FB, 0xFDF20106, 0xFD05FBFE, 0xFBFF0FE9);
	r7 = D(r7, s1_0_1, 0xF617F20C, 0xFCFE0AF5, 0x0ACD030F, 0x26F4F213);
	r0 = D(r0, s1_0_2, 0xFF03FCFC, 0xDEDD0B12, 0x0EEAA8FE, 0x02000BFA);
	r1 = D(r1, s1_0_2, 0x0007100E, 0x15F214F5, 0x20EC100F, 0x07DF1AFD);
	r2 = D(r2, s1_0_2, 0x0704FDFB, 0xF6FF0501, 0x01FBE715, 0xF7F8FE15);
	r3 = D(r3, s1_0_2, 0x0601FBFD, 0xF5F4FCF5, 0x03F70F09, 0x0CF3F4FB);
	r4 = D(r4, s1_0_2, 0xDEB217F5, 0xF905FC03, 0x0EF52B06, 0x0004FFEC);
	r5 = D(r5, s1_0_2, 0xEFCEF416, 0x02FF04F7, 0x00F40CF2, 0xFF0A08ED);
	r6 = D(r6, s1_0_2, 0x030517E9, 0xFFF30900, 0x030500FB, 0xE710F9F1);
	r7 = D(r7, s1_0_2, 0xFE100C01, 0xFDF8FD02, 0x0702FFF2, 0x07160FEE);
	r0 = D(r0, s1_1_0, 0xFE00FF02, 0xA802BE0E, 0xD4E816F3, 0x0EF8E4FA);
	r1 = D(r1, s1_1_0, 0x11FF0A11, 0x09EE971F, 0xE2FEFE10, 0x00F40DFE);
	r2 = D(r2, s1_1_0, 0x040003FB, 0xF9F71404, 0x0216FBF7, 0xF701090F);
	r3 = D(r3, s1_1_0, 0xF9000302, 0x14FEE424, 0xF9F904ED, 0x161FF608);
	r4 = D(r4, s1_1_0, 0x051DDAFB, 0xFE03FF03, 0x0AE3EC0A, 0x0200F4FA);
	r5 = D(r5, s1_1_0, 0xDDFD0118, 0x0B01F8F3, 0x010509F2, 0x1A13FBF7);
	r6 = D(r6, s1_1_0, 0x0C1000F8, 0xF8F6070A, 0x00FF0204, 0xFEF901F4);
	r7 = D(r7, s1_1_0, 0x01F9FD03, 0xF5FB0604, 0xEBD30EF3, 0xFAFF09FD);
	r0 = D(r0, s1_1_1, 0x0A04FAF8, 0xF6F2CD01, 0x0FEEFE04, 0x17F7E403);
	r1 = D(r1, s1_1_1, 0xF4ED0902, 0x06EB1905, 0x05F7F508, 0xECEE0104);
	r2 = D(r2, s1_1_1, 0x0BFCEE14, 0x00FAF034, 0x0109010F, 0x00E4040B);
	r3 = D(r3, s1_1_1, 0x07FF0DEA, 0xF92C160C, 0x05F9FEE3, 0x010C2D13);
	r4 = D(r4, s1_1_1, 0x190D230B, 0xFF00FA0D, 0x1DADE108, 0x00000307);
	r5 = D(r5, s1_1_1, 0xE0ADE800, 0xFD0DFCE8, 0xF7FF0FF9, 0xFE070F16);
	r6 = D(r6, s1_1_1, 0xF80ADB10, 0xEF0D0AED, 0x0808FB0A, 0xF12E1CF9);
	r7 = D(r7, s1_1_1, 0x05FEE1F5, 0xE8FC03E6, 0x00CDF3FC, 0x09F9FAE2);
	r0 = D(r0, s1_1_2, 0xFE0007FB, 0xF611A927, 0x8103EE1C, 0x01FD04F3);
	r1 = D(r1, s1_1_2, 0xFAF40004, 0x4700F2CF, 0x13E50AF3, 0xFF03FCFD);
	r2 = D(r2, s1_1_2, 0xFB040B00, 0xF6F1060C, 0x0116FAFD, 0xF9ECEC02);
	r3 = D(r3, s1_1_2, 0xFBF8F509, 0xF9FC02FE, 0x03F51409, 0x04F31C05);
	r4 = D(r4, s1_1_2, 0xFC0F11EF, 0xFBF6050C, 0x11CB0C00, 0xFD13141C);
	r5 = D(r5, s1_1_2, 0xFDCC0704, 0x080105F4, 0x03FB0D09, 0xF81C05F9);
	r6 = D(r6, s1_1_2, 0x0B0F1CF9, 0x0700F70A, 0xFF080304, 0xECF9FD1E);
	r7 = D(r7, s1_1_2, 0xFC0405E5, 0x02FD0807, 0x100709EF, 0x0AF92004);
	r0 = D(r0, s1_2_0, 0xFCFBFB01, 0xF6D4F814, 0x09E61404, 0x07FC0304);
	r1 = D(r1, s1_2_0, 0xFE05F302, 0xEECBEDF6, 0x14EFFE02, 0x0601FFF7);
	r2 = D(r2, s1_2_0, 0x00FA06F8, 0xEAF9F301, 0x0304F900, 0x030AFCFD);
	r3 = D(r3, s1_2_0, 0xFB02FAFA, 0x8FFBE5EF, 0xFDF41509, 0x0D0BE5F7);
	r4 = D(r4, s1_2_0, 0xF8E50A0A, 0xFDFF0002, 0x14E10B08, 0xF5F70EFC);
	r5 = D(r5, s1_2_0, 0xEEDE070D, 0x010400FE, 0xDBF70F02, 0xF8FDE0F6);
	r6 = D(r6, s1_2_0, 0x06EC0300, 0xFEFD1902, 0xFA01F8FD, 0x0CFDE2FF);
	r7 = D(r7, s1_2_0, 0xFBFB0505, 0xF6FBFEFF, 0x04E1FC03, 0xF3EF10FD);
	r0 = D(r0, s1_2_1, 0x03FD0400, 0xE7AAA5EE, 0x270712FE, 0xEFDA0BF3);
	r1 = D(r1, s1_2_1, 0xF814F20D, 0xFDDF99ED, 0x0AF72612, 0x09F70509);
	r2 = D(r2, s1_2_1, 0x0305EE08, 0xE8F4F7FE, 0xF701FE0F, 0x04F80D06);
	r3 = D(r3, s1_2_1, 0xFE1A0003, 0x2C0001F9, 0xDB0405E3, 0xD3E3F912);
	r4 = D(r4, s1_2_1, 0x12051803, 0x03F80205, 0xFBEAF406, 0xE8EBF806);
	r5 = D(r5, s1_2_1, 0xD105CFEC, 0xFCFA07FD, 0x1907FBFB, 0x11ECFAFC);
	r6 = D(r6, s1_2_1, 0x13041AF7, 0xF21002F6, 0x07090602, 0xFC10FB08);
	r7 = D(r7, s1_2_1, 0xF708E904, 0xEE02EFF9, 0x20E6DB00, 0xE6FF14F9);
	r0 = D(r0, s1_2_2, 0x02FDFFFB, 0xD9EBD906, 0x3AF82FEC, 0x05E2F708);
	r1 = D(r1, s1_2_2, 0x0312FEF2, 0xD0441602, 0xD3EFF909, 0x04FC0707);
	r2 = D(r2, s1_2_2, 0x01ED0C09, 0xF3E3FB01, 0xFF031103, 0x0CF6F801);
	r3 = D(r3, s1_2_2, 0xFA1015F3, 0xEFFE1AED, 0x16E8FB05, 0x06F8DAEE);
	r4 = D(r4, s1_2_2, 0xFAF810FB, 0x02F800FF, 0xF4DDF4E6, 0xF6EDE8FD);
	r5 = D(r5, s1_2_2, 0xD107EB07, 0x04FCF8FC, 0xFCF500FD, 0x17070CFC);
	r6 = D(r6, s1_2_2, 0xE7ECEEFC, 0xFD060305, 0xFC00FFF9, 0x0308F9FB);
	r7 = D(r7, s1_2_2, 0x09081706, 0x0208FEF9, 0xF9031407, 0xFEF00303);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFFFF0303, 0x1CEAC303, 0x04E705F3, 0x0013F806);
	r1 = D(r1, s0_0_0, 0x01FEF8FE, 0x07F41612, 0xE901FC02, 0xF60B0C0D);
	r2 = D(r2, s0_0_0, 0x01FC0BFB, 0xF901FF10, 0xF807FC01, 0xF006130A);
	r3 = D(r3, s0_0_0, 0x0BF9FFE5, 0x0FFC26FA, 0xFC05F901, 0x0808F001);
	r4 = D(r4, s0_0_0, 0x9702E4E1, 0x01FFFC03, 0xE1FBF9E2, 0x0300060C);
	r5 = D(r5, s0_0_0, 0xEEF20B17, 0x06000AFA, 0x040DF205, 0x010004F1);
	r6 = D(r6, s0_0_0, 0x18F904DC, 0xFB05F0F5, 0xFB02F8FA, 0x171206FF);
	r7 = D(r7, s0_0_0, 0x160403DE, 0xFD05E20A, 0xE8EEFE05, 0x08FE1300);
	r0 = D(r0, s0_0_1, 0xFE010208, 0xEBFC170F, 0x06050E4F, 0xF8030608);
	r1 = D(r1, s0_0_1, 0x00F801F4, 0x1D04F917, 0x160D04E9, 0x0F1109F8);
	r2 = D(r2, s0_0_1, 0x10F818F7, 0x010DF405, 0x06FDFF15, 0xF7F8F205);
	r3 = D(r3, s0_0_1, 0x0CEA0AF2, 0xE015FF08, 0xFEF7EA00, 0x080D15E8);
	r4 = D(r4, s0_0_1, 0xF967B499, 0x0002FF07, 0x9C00FD01, 0x06F40504);
	r5 = D(r5, s0_0_1, 0xF70AF90B, 0xFAF803F3, 0x0909F8EF, 0xF3FBEC17);
	r6 = D(r6, s0_0_1, 0xE42E060D, 0x0BFEFEF1, 0xFE0007FE, 0xE618120D);
	r7 = D(r7, s0_0_1, 0x0CF418F6, 0x030504F5, 0xFBFE0702, 0x16F60CF4);
	r0 = D(r0, s0_0_2, 0xFFFDFD03, 0x060EE424, 0xCC021C27, 0x0A05F7FB);
	r1 = D(r1, s0_0_2, 0x03E706EF, 0xAEDCF82C, 0xD70502D0, 0x07F515FC);
	r2 = D(r2, s0_0_2, 0xFBFCFD08, 0xFFFF0104, 0x0DFFF1FF, 0x040AFF05);
	r3 = D(r3, s0_0_2, 0x0DFF09FF, 0xFF03F41B, 0x090FFF08, 0x0CFB0408);
	r4 = D(r4, s0_0_2, 0xBBDCBB0E, 0x02FEFF05, 0xD9EF0AFD, 0xF2010207);
	r5 = D(r5, s0_0_2, 0x01030BFF, 0xF9F608F9, 0xFF15F405, 0xF3FEF601);
	r6 = D(r6, s0_0_2, 0x02FEE902, 0x00F90AFC, 0xFFFCF900, 0x0D11FD08);
	r7 = D(r7, s0_0_2, 0xEBE3F808, 0xFF0708F7, 0xF3F9F402, 0xE8021204);
	r0 = D(r0, s0_1_0, 0x0400FE03, 0x1EF0EAEE, 0xFFEA05CE, 0xEE0316DB);
	r1 = D(r1, s0_1_0, 0xFDF8FE02, 0xF8F815FE, 0x11F3F4ED, 0x0EF8F304);
	r2 = D(r2, s0_1_0, 0x0405FA04, 0xFE0CF402, 0x0909F605, 0x0105EA01);
	r3 = D(r3, s0_1_0, 0x050304DA, 0xFA81C3D6, 0xF2F80BFE, 0xDA0F09FF);
	r4 = D(r4, s0_1_0, 0xEFFEE20B, 0x04000600, 0xC3F00EFB, 0xE907F2F0);
	r5 = D(r5, s0_1_0, 0xFDFF2102, 0xFF0A0006, 0x04F6F2FC, 0xF6D40AF8);
	r6 = D(r6, s0_1_0, 0xC0CA21EE, 0x04F6F8F5, 0x05FDFE00, 0xE7FDF40C);
	r7 = D(r7, s0_1_0, 0xE4FF03F6, 0x040321FE, 0xEA01EE05, 0xFDFF01FF);
	r0 = D(r0, s0_1_1, 0xFA084AFD, 0x0117250C, 0xC4B20EFC, 0xC8F205F0);
	r1 = D(r1, s0_1_1, 0x04F8F506, 0xA4090ED0, 0xDCD2EEFF, 0x0C08E40D);
	r2 = D(r2, s0_1_1, 0x09FFE1FF, 0x0BFEFF03, 0x04F4F6E8, 0xF7FE410F);
	r3 = D(r3, s0_1_1, 0xF4FA0DFA, 0x08BDF61B, 0x09E1ED10, 0xD411F2F2);
	r4 = D(r4, s0_1_1, 0xDBF43BEB, 0x010ED7FE, 0xD5FBDAFD, 0xF7DF05E8);
	r5 = D(r5, s0_1_1, 0x09FE1B06, 0xF9F53111, 0x0FE119EF, 0xF003EF09);
	r6 = D(r6, s0_1_1, 0x1101F208, 0x02EE37E9, 0xFBF1EB02, 0x160FF60E);
	r7 = D(r7, s0_1_1, 0xF3FAD500, 0x04030306, 0xE9FEEE01, 0x0A02CAF5);
	r0 = D(r0, s0_1_2, 0x02010CFE, 0x0CFBEFF7, 0xDB12E6CF, 0xF5FF02FD);
	r1 = D(r1, s0_1_2, 0xFAFDF30D, 0x97D2070A, 0x141AF607, 0x02F0EBFF);
	r2 = D(r2, s0_1_2, 0x00081B01, 0x00000C0A, 0xEFF307F4, 0x06FB0D01);
	r3 = D(r3, s0_1_2, 0xFCFA00F7, 0xF015150D, 0xFA0F0802, 0xE41731F2);
	r4 = D(r4, s0_1_2, 0xEB0EF5F0, 0x04020100, 0xF9EFF401, 0xF6ED05F6);
	r5 = D(r5, s0_1_2, 0x07EE1803, 0x00040AFB, 0xFD101503, 0xEC08FDFB);
	r6 = D(r6, s0_1_2, 0xF609FF08, 0x04F50BFE, 0x01020605, 0x0BED09F8);
	r7 = D(r7, s0_1_2, 0xF709F8FD, 0xFFFEFA06, 0xF1F6F400, 0xFFFDF916);
	r0 = D(r0, s0_2_0, 0xFD030401, 0x08DFCFF6, 0x3628240D, 0xF4F8FAF6);
	r1 = D(r1, s0_2_0, 0xE80506FA, 0xE1EF04E7, 0x140F24F6, 0x02FCFD0D);
	r2 = D(r2, s0_2_0, 0x0E0105FF, 0x0300140B, 0xFE0C0BF7, 0x0AF7FD0E);
	r3 = D(r3, s0_2_0, 0x01070104, 0xB4B1DF19, 0x1A02F6FC, 0x81E1CD00);
	r4 = D(r4, s0_2_0, 0xF7F90612, 0x03FDFF01, 0xF2FC170B, 0xFF030BFF);
	r5 = D(r5, s0_2_0, 0x07020806, 0xF903FC05, 0x0FF2FF10, 0xFBE9EE15);
	r6 = D(r6, s0_2_0, 0xF32920F5, 0x10F7F0FD, 0xFE070305, 0x2002F0FD);
	r7 = D(r7, s0_2_0, 0xF71317ED, 0x01EFF20D, 0xF1F8FC05, 0x1EECFC1A);
	r0 = D(r0, s0_2_1, 0x01030805, 0x1001D11C, 0x1106090E, 0x0410130C);
	r1 = D(r1, s0_2_1, 0x0805F2FD, 0xE6F9BEBE, 0xE8F21C0C, 0x040B170D);
	r2 = D(r2, s0_2_1, 0xF7F3030A, 0x0A011805, 0xF0121CE8, 0x07FFF90D);
	r3 = D(r3, s0_2_1, 0xF9F1DEF7, 0xEA391DD2, 0x0DE1010E, 0x81FEBCF2);
	r4 = D(r4, s0_2_1, 0x0F07080A, 0x0400FF06, 0x17F8ED00, 0x1DF1EDE3);
	r5 = D(r5, s0_2_1, 0x10EDE712, 0xFF0506FA, 0x0808ED01, 0xF3150403);
	r6 = D(r6, s0_2_1, 0x09EC0EEE, 0x09FAF401, 0xFC031CF6, 0x0209FB04);
	r7 = D(r7, s0_2_1, 0x05FC00FC, 0x0FF90107, 0xF701FA01, 0x20DEF6FF);
	r0 = D(r0, s0_2_2, 0x04F6FC05, 0x08EFE317, 0x2AC21B07, 0xFB1309F6);
	r1 = D(r1, s0_2_2, 0x13FF07F1, 0xEEEF17BE, 0xF60407F1, 0x06FE0206);
	r2 = D(r2, s0_2_2, 0xF8FB130C, 0x05FF0004, 0x0D0504D1, 0x0001010A);
	r3 = D(r3, s0_2_2, 0x000309FE, 0x0EF11212, 0x05FA07F9, 0xC846EB02);
	r4 = D(r4, s0_2_2, 0x05F40A17, 0x02F8F805, 0x09EFD1F1, 0x08F5FFF5);
	r5 = D(r5, s0_2_2, 0xFEEF0303, 0x02080402, 0x0AF200FC, 0xFFFC0AFD);
	r6 = D(r6, s0_2_2, 0x030C0509, 0x01FFFFF6, 0x01020202, 0xF90D0505);
	r7 = D(r7, s0_2_2, 0x040519F7, 0xF8FFF2FE, 0x0100FAFF, 0x01010901);
	r0 = D(r0, s1_0_0, 0x0002FCFD, 0x130EFFF4, 0xE6EBF01C, 0x0B050101);
	r1 = D(r1, s1_0_0, 0x04FD01EA, 0x0530FEEF, 0x03F50527, 0xF803F905);
	r2 = D(r2, s1_0_0, 0xFB0EFD01, 0xFCFC0104, 0xFEF7F5FE, 0x04FBF9EF);
	r3 = D(r3, s1_0_0, 0x03FE0502, 0xE93C020C, 0x00FB0401, 0xF6E6FAEA);
	r4 = D(r4, s1_0_0, 0x0DE6EF81, 0x0100FCF8, 0x13F50902, 0x0A0403FC);
	r5 = D(r5, s1_0_0, 0x09F80CE0, 0xF300020E, 0x0A08FA07, 0xFCFC0305);
	r6 = D(r6, s1_0_0, 0x0FEB10F5, 0xFF090102, 0x0101FE03, 0x0413FFF4);
	r7 = D(r7, s1_0_0, 0xF4F3FDF5, 0x070902FF, 0x19D80B0F, 0xF8090611);
	r0 = D(r0, s1_0_1, 0xFB0304FF, 0xE5290114, 0xF792062C, 0x04FD0600);
	r1 = D(r1, s1_0_1, 0xFE02F6D3, 0x09E6F21F, 0x2EDD00FB, 0xF1FAF2F8);
	r2 = D(r2, s1_0_1, 0xF709FAFA, 0x090808F0, 0xFE08FC0A, 0x0CFE0101);
	r3 = D(r3, s1_0_1, 0xFC070900, 0x1DD8010B, 0x130AFEFF, 0x0CEAEFF1);
	r4 = D(r4, s1_0_1, 0xE713C1F9, 0x0504FCFC, 0x17D7F900, 0x05F70109);
	r5 = D(r5, s1_0_1, 0x111413E4, 0xFAE9FF05, 0x0608FF03, 0x08F7FA04);
	r6 = D(r6, s1_0_1, 0x13ECF8FD, 0x03FF0301, 0xFCFFFE03, 0xF60DF9FB);
	r7 = D(r7, s1_0_1, 0x0AEC040D, 0x010D08F8, 0x0DC612F9, 0x10F3F206);
	r0 = D(r0, s1_0_2, 0x04FBFE03, 0xFA1703CD, 0xF5F50AA9, 0xFE08F5F8);
	r1 = D(r1, s1_0_2, 0xFD0B0506, 0x10070BFA, 0xF20C0BF1, 0x00FE010F);
	r2 = D(r2, s1_0_2, 0xFC0B03F8, 0xFF03FFF9, 0x16EB0501, 0xFF0AFFF6);
	r3 = D(r3, s1_0_2, 0x020BFD00, 0x0F051512, 0x010900F3, 0x0101E2FB);
	r4 = D(r4, s1_0_2, 0x0F1018F1, 0x03000000, 0x08EB0007, 0xFEFBFEFB);
	r5 = D(r5, s1_0_2, 0x13060CF6, 0xF8FBFE01, 0x04F3F200, 0x08F611FD);
	r6 = D(r6, s1_0_2, 0x02F70F14, 0x01FD02FF, 0x00FDFD05, 0xF20CF1FE);
	r7 = D(r7, s1_0_2, 0x00F60C0F, 0x06030108, 0x05DE000A, 0x090A0E05);
	r0 = D(r0, s1_1_0, 0xFE030401, 0x1C11050D, 0x0EC612E1, 0x07DF0D05);
	r1 = D(r1, s1_1_0, 0x0D0105E3, 0xF9F0E512, 0xE8F6FCF2, 0xF7FE0A02);
	r2 = D(r2, s1_1_0, 0x0E05F90B, 0x0802070D, 0xF8FBFBFE, 0xE5F9F708);
	r3 = D(r3, s1_1_0, 0x07FEFAEE, 0xFE12A806, 0x06030709, 0xE7FD001D);
	r4 = D(r4, s1_1_0, 0xE7F4F0FA, 0xF804FF03, 0xDFFCF70F, 0xF6010E12);
	r5 = D(r5, s1_1_0, 0xF4E905F3, 0x08090205, 0x1503F001, 0xE6EAF1F9);
	r6 = D(r6, s1_1_0, 0xBC0F0F10, 0x03FAF9FB, 0x03FCFD05, 0x140AF4FF);
	r7 = D(r7, s1_1_0, 0xF9F524F6, 0xF200FBFB, 0x43D4FC05, 0x07020907);
	r0 = D(r0, s1_1_1, 0xF7020201, 0x09FF0DF5, 0xF4B9DEF9, 0xFEE8FAF2);
	r1 = D(r1, s1_1_1, 0xF0E9F9F0, 0x07DDFF18, 0x15AAF5F7, 0xAEFB0DFD);
	r2 = D(r2, s1_1_1, 0xF80808F8, 0xFF14FCF7, 0xF7F20013, 0x310F05FD);
	r3 = D(r3, s1_1_1, 0x081401EE, 0x340009EE, 0x1603F8EC, 0x10D2080A);
	r4 = D(r4, s1_1_1, 0xE623F216, 0xF1040C00, 0xFAAA1CF6, 0x22140FFC);
	r5 = D(r5, s1_1_1, 0xF6BD0AC7, 0x1803FC18, 0x1705FE05, 0x0CF0F804);
	r6 = D(r6, s1_1_1, 0x0B15E9FF, 0x13F2FC07, 0x040106FB, 0xEA03FEEA);
	r7 = D(r7, s1_1_1, 0x05FD27E0, 0x02F815F9, 0x02E01EDE, 0x05FB03EC);
	r0 = D(r0, s1_1_2, 0xFC02FE00, 0x0CEA0C05, 0xF826C7DF, 0xF4F7FB06);
	r1 = D(r1, s1_1_2, 0x0201FF05, 0xE8F8ECE5, 0xEC090CFC, 0xEDF30B04);
	r2 = D(r2, s1_1_2, 0xFC090EF8, 0x020204FB, 0x1719ECF3, 0x00FB0EFE);
	r3 = D(r3, s1_1_2, 0x010304F5, 0x031E08F5, 0x21FCF9F2, 0x0AF007ED);
	r4 = D(r4, s1_1_2, 0x06FAFCFD, 0x04000601, 0x0BE0F6F1, 0x02F906F6);
	r5 = D(r5, s1_1_2, 0xF3ED2A01, 0xFDFFF9FF, 0x0102F20F, 0x0109F7F2);
	r6 = D(r6, s1_1_2, 0xFEFE0100, 0xF9020BFC, 0xFFF8F9F9, 0xF7200711);
	r7 = D(r7, s1_1_2, 0x051106F0, 0x0BF80807, 0xE5E60BEF, 0xF600F8FD);
	r0 = D(r0, s1_2_0, 0x06FE0204, 0x0415FF0A, 0x0D0AF1E7, 0xFFF604E8);
	r1 = D(r1, s1_2_0, 0x04ED0CFB, 0xFDFE04E8, 0xED061A07, 0xF6FFF5FB);
	r2 = D(r2, s1_2_0, 0xFEFFFAFE, 0x160109F5, 0xFFFE00FB, 0x0002F5FC);
	r3 = D(r3, s1_2_0, 0xEFFBFB00, 0xA9E381BF, 0x0EEA05E7, 0xDD09D6EF);
	r4 = D(r4, s1_2_0, 0x14FC0807, 0xFA01FF02, 0x00F40507, 0xF9F80BE4);
	r5 = D(r5, s1_2_0, 0x03EE01F0, 0x05090300, 0x2610FE02, 0xE8F6FBEA);
	r6 = D(r6, s1_2_0, 0xD7131513, 0x0602F7FC, 0x11FDFEFD, 0x050218FB);
	r7 = D(r7, s1_2_0, 0xF6FF0805, 0xFD0201FF, 0x00EB02F7, 0x19F3F3EE);
	r0 = D(r0, s1_2_1, 0x05040407, 0xF9170ADD, 0x050F0713, 0x2617F307);
	r1 = D(r1, s1_2_1, 0xC6FB0DF8, 0xE2E8F9D5, 0x19EDCF1C, 0x09010D0B);
	r2 = D(r2, s1_2_1, 0x010AEE0A, 0x290F0907, 0x1609020E, 0xFF030108);
	r3 = D(r3, s1_2_1, 0xDFF5F4EE, 0x3CFBECFA, 0xE2F303E5, 0xC2CBDE81);
	r4 = D(r4, s1_2_1, 0x06051514, 0x0B01FF06, 0xFDE8F1EC, 0x180312D6);
	r5 = D(r5, s1_2_1, 0xF7FD0EE1, 0xF3010B05, 0xF1050AFA, 0x08FD0D05);
	r6 = D(r6, s1_2_1, 0x01EEF1EF, 0xD7F6FDFD, 0x2F0A040A, 0x1F0B1313);
	r7 = D(r7, s1_2_1, 0xFCE704DF, 0xFFFA03E9, 0xFBF2FBFA, 0x01FCEBF8);
	r0 = D(r0, s1_2_2, 0xFBFDFE00, 0xE8E607FD, 0xF5CA18DD, 0x110BF000);
	r1 = D(r1, s1_2_2, 0xFCFFFD02, 0xC322DB15, 0xF4FA0B13, 0xFAFEFEEE);
	r2 = D(r2, s1_2_2, 0xFB0A090A, 0x1506FE03, 0x170A0103, 0xFAFA02F8);
	r3 = D(r3, s1_2_2, 0xF7F9F801, 0xF0000B08, 0x1A0508EE, 0x02E20002);
	r4 = D(r4, s1_2_2, 0xFBFA06F3, 0xFB0100FF, 0x0AD1F6FC, 0x04FB1605);
	r5 = D(r5, s1_2_2, 0xF7F109E2, 0x00000305, 0xEDF8F6F8, 0x00000EF8);
	r6 = D(r6, s1_2_2, 0xF5100414, 0x02030709, 0x04FDFDFE, 0xFC100700);
	r7 = D(r7, s1_2_2, 0xF90A01FF, 0x0202FF12, 0xE9E702E6, 0xEFFE0103);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF8FF02FF, 0xE7FBF9FD, 0xD1DA2119, 0xFCFEFFFE);
	r1 = D(r1, s0_0_0, 0x1802F0F8, 0xF8F3110A, 0xDF0606ED, 0x0DF9F60B);
	r2 = D(r2, s0_0_0, 0x01050A06, 0x0003F106, 0xF1FF0502, 0x0DFAFDFE);
	r3 = D(r3, s0_0_0, 0xFCFC070C, 0xEF12CF27, 0x0D040504, 0x06F511F1);
	r4 = D(r4, s0_0_0, 0x8151B7CC, 0xFFFE06FC, 0xF2E80413, 0xF400F9FD);
	r5 = D(r5, s0_0_0, 0xFB0D01F6, 0x0C0E0503, 0xF602EDF7, 0xEB08FFF2);
	r6 = D(r6, s0_0_0, 0xEF26ECE5, 0x03F80504, 0x02000201, 0x2311F702);
	r7 = D(r7, s0_0_0, 0xE9210CF2, 0x0406F8FE, 0x03DCDB04, 0x010EFB07);
	r0 = D(r0, s0_0_1, 0xFDFC01F7, 0x1EEB11E7, 0x15DA0712, 0xF8F9FA0A);
	r1 = D(r1, s0_0_1, 0xFEDBFF04, 0xFA1E12D1, 0xF21A8118, 0xFBFCF6E1);
	r2 = D(r2, s0_0_1, 0x01FAF7F7, 0x01FB0006, 0xF0EB0912, 0x0AF7F710);
	r3 = D(r3, s0_0_1, 0x080100F0, 0xF62EDAED, 0xFCF6EDFD, 0xFCFA0817);
	r4 = D(r4, s0_0_1, 0xB8429492, 0x00FC03F8, 0xFBFAF8EA, 0xFD0BFDFF);
	r5 = D(r5, s0_0_1, 0xDBA90600, 0x0202FE00, 0x0CF212FC, 0xDFFA0707);
	r6 = D(r6, s0_0_1, 0xF1EBE601, 0x00F80D19, 0x0001FF06, 0xE50CE2F8);
	r7 = D(r7, s0_0_1, 0xFDF801DC, 0xFF06000E, 0x0202F200, 0x0803F8CA);
	r0 = D(r0, s0_0_2, 0xFFFD0401, 0xE31D13E7, 0xA633E1F4, 0x06F70305);
	r1 = D(r1, s0_0_2, 0x04031402, 0xF10911D9, 0x0AF8B70F, 0xF7040807);
	r2 = D(r2, s0_0_2, 0x0402F601, 0xFFF809F8, 0xE5F0FB07, 0xF90705FE);
	r3 = D(r3, s0_0_2, 0xF1FCF401, 0x06F3FB14, 0x00F6100B, 0xF7FEF21A);
	r4 = D(r4, s0_0_2, 0xC6DB240B, 0xFE0104FC, 0x05EFF211, 0x04F5FF02);
	r5 = D(r5, s0_0_2, 0xFB050EED, 0x0809FC09, 0xF9070EED, 0x0A16F405);
	r6 = D(r6, s0_0_2, 0x081003FD, 0xFE02FDFD, 0x030101FA, 0xED110FFE);
	r7 = D(r7, s0_0_2, 0x0502DEF4, 0xF7070103, 0x04F4F6F7, 0x0016D2FF);
	r0 = D(r0, s0_1_0, 0xFE020203, 0xD9FEE721, 0x20EBE5D7, 0xF31D1808);
	r1 = D(r1, s0_1_0, 0xFDFFEDF8, 0xE6FAFD14, 0xFCFBFDE8, 0x00FEFAF6);
	r2 = D(r2, s0_1_0, 0x0303FFFD, 0x0C10FB07, 0xE303F7EF, 0xFD02F8F1);
	r3 = D(r3, s0_1_0, 0xF0F51DDB, 0xFBFE0DF6, 0x070AE5FC, 0x082702E9);
	r4 = D(r4, s0_1_0, 0xFBAF01FF, 0xFFFD0308, 0xF611EA23, 0xF8061011);
	r5 = D(r5, s0_1_0, 0xFA02EB08, 0x05F3080F, 0x0816FC1B, 0xFCF1111A);
	r6 = D(r6, s0_1_0, 0xE0E8070C, 0x07F50105, 0xFDFC05F8, 0x0DF6EC16);
	r7 = D(r7, s0_1_0, 0xDD0F06FC, 0x040D0C0F, 0xEF080804, 0xFA1B02F9);
	r0 = D(r0, s0_1_1, 0x0002F9F7, 0xD2DFFB01, 0xD70204CA, 0x02FCFF04);
	r1 = D(r1, s0_1_1, 0x14F7F307, 0xF53E18D4, 0xEDF9CBE3, 0xF70DF210);
	r2 = D(r2, s0_1_1, 0xF90AE2FC, 0x0613FA1B, 0xE20C051D, 0x08F9E8F8);
	r3 = D(r3, s0_1_1, 0x01F801EA, 0xE01AD70E, 0x03C0DBEF, 0xEF20160B);
	r4 = D(r4, s0_1_1, 0xE9140A12, 0xFAFCF506, 0x01E814E3, 0xFCFFFA07);
	r5 = D(r5, s0_1_1, 0xEA06C8EB, 0xFEFF010B, 0xFDF007EF, 0xFFEF0608);
	r6 = D(r6, s0_1_1, 0xCDF7E703, 0xFA090605, 0xFF050204, 0xCA080313);
	r7 = D(r7, s0_1_1, 0xE5E9EFC8, 0xF401240E, 0x12F813FD, 0xF3F7C6F7);
	r0 = D(r0, s0_1_2, 0x0101FF04, 0xE5EA0707, 0xDC20E1C0, 0xFD0C0505);
	r1 = D(r1, s0_1_2, 0x120C0CF6, 0xF603D849, 0x0703FE0D, 0xF9FDFA04);
	r2 = D(r2, s0_1_2, 0x060302FC, 0x01020CFE, 0xFB18DDF8, 0xF900FE00);
	r3 = D(r3, s0_1_2, 0xF4FCFEFE, 0xEDFCF0FF, 0xE9FB0119, 0xF63DC912);
	r4 = D(r4, s0_1_2, 0x1435E919, 0x00050103, 0xFBF50AF5, 0x0301F5F7);
	r5 = D(r5, s0_1_2, 0xFD0C02F2, 0x0AF10209, 0x05F60007, 0x0C0BFDF7);
	r6 = D(r6, s0_1_2, 0x10F7F8F8, 0xF5F7FBFF, 0x01FAFBFB, 0xE7FDE2F1);
	r7 = D(r7, s0_1_2, 0x08E7EA09, 0x050300FA, 0xF7F717FE, 0xF508FE12);
	r0 = D(r0, s0_2_0, 0x0201FEFD, 0xDD3E000F, 0x1E1F1BFB, 0x0801E8F4);
	r1 = D(r1, s0_2_0, 0x0EDC09FB, 0xE10FE40B, 0x1F08E2FA, 0xF3FC0B09);
	r2 = D(r2, s0_2_0, 0x00090608, 0x00060403, 0x05EFFAF4, 0x00F40D09);
	r3 = D(r3, s0_2_0, 0x0504F600, 0xDB11CFEE, 0xF516F4FB, 0xFE00EA09);
	r4 = D(r4, s0_2_0, 0x0D0A0BF8, 0x03FBFEFF, 0xFEFC10F0, 0x010106F0);
	r5 = D(r5, s0_2_0, 0xF7080FFF, 0xFFFE0102, 0xE302ED0D, 0x08FEF30B);
	r6 = D(r6, s0_2_0, 0xF20FF9E8, 0x04F903FB, 0xFEFA0201, 0xF005FBE8);
	r7 = D(r7, s0_2_0, 0x0109F909, 0xF006FD07, 0xFA11020F, 0xED1CEFFF);
	r0 = D(r0, s0_2_1, 0x000401FD, 0xB11719FC, 0xFD3709FD, 0x01E8FAF0);
	r1 = D(r1, s0_2_1, 0x1CD00A0A, 0x17D311B7, 0xFA0D060C, 0xF30B0409);
	r2 = D(r2, s0_2_1, 0xF108FF06, 0x000AFB00, 0x0DF902F0, 0x04070406);
	r3 = D(r3, s0_2_1, 0xFAF6FB05, 0x0514F110, 0xEFF3FE08, 0x25B8E8CD);
	r4 = D(r4, s0_2_1, 0x081707ED, 0xFDFE0006, 0x09F0F902, 0x161C020E);
	r5 = D(r5, s0_2_1, 0x0204FA0B, 0x1205FDF8, 0xF503EDFB, 0x0F09FFFE);
	r6 = D(r6, s0_2_1, 0xF71315F2, 0x05FB0D0F, 0x050409FB, 0xE624FBF1);
	r7 = D(r7, s0_2_1, 0xFA101009, 0x0D00010C, 0x04F7F900, 0x0EFA0527);
	r0 = D(r0, s0_2_2, 0xFF01FEFD, 0xB51906F2, 0xD14AFD1B, 0xFEEB09F9);
	r1 = D(r1, s0_2_2, 0x09EDFB05, 0xD50FF4D6, 0x060CF70A, 0xF9FE0103);
	r2 = D(r2, s0_2_2, 0xFA0BF605, 0xFCFDFAFC, 0x0B0803FE, 0xF7F504F7);
	r3 = D(r3, s0_2_2, 0xFDFA010E, 0xF616F7FD, 0xFC0CFB09, 0xED3C0EFD);
	r4 = D(r4, s0_2_2, 0xFAF1FEF2, 0x00FCFFFC, 0xF8FC1914, 0xFCF601F3);
	r5 = D(r5, s0_2_2, 0xDB0D04F5, 0x0DF601FA, 0xF6020807, 0x0C03F6FD);
	r6 = D(r6, s0_2_2, 0x0B02F70A, 0x0206030C, 0x0504FD01, 0x0C23FBF6);
	r7 = D(r7, s0_2_2, 0x07FFFB01, 0x000B01FC, 0xFB000401, 0xF7FE0EF0);
	r0 = D(r0, s1_0_0, 0x00FD0108, 0xF9EF0819, 0x04F11B87, 0xFBEEF926);
	r1 = D(r1, s1_0_0, 0x0BFDFFF8, 0xF0FF0038, 0xFEFDF71C, 0x0A070700);
	r2 = D(r2, s1_0_0, 0xFCF508E7, 0x04FCFF15, 0xFE08F223, 0x0CFFE8FA);
	r3 = D(r3, s1_0_0, 0xFEFEEBD3, 0xFADF1C81, 0x060DF93F, 0x01FEE221);
	r4 = D(r4, s1_0_0, 0xC9C50BC6, 0x04FDFBF7, 0x030D1A0D, 0x07FD1528);
	r5 = D(r5, s1_0_0, 0x11E5DA35, 0x020803E4, 0xF2FC05E9, 0xFDF43D21);
	r6 = D(r6, s1_0_0, 0x050D08F2, 0xFB02F2FE, 0x00020405, 0xEEF90E01);
	r7 = D(r7, s1_0_0, 0x0B08FBD0, 0xFC05FC06, 0x0CF4D709, 0x07F81F00);
	r0 = D(r0, s1_0_1, 0x02030703, 0xFDE62321, 0xF7E3E616, 0xFF080206);
	r1 = D(r1, s1_0_1, 0xF0FDED01, 0x06131008, 0x14E316E7, 0x11FFEAFD);
	r2 = D(r2, s1_0_1, 0xFF02051A, 0xF60201FD, 0xF4F2F704, 0xFC0BF201);
	r3 = D(r3, s1_0_1, 0xEFFDFEFC, 0xEAFC0546, 0x07FE0611, 0x02F0F904);
	r4 = D(r4, s1_0_1, 0xC2A7C81E, 0x03080002, 0x0705011B, 0xFFFB0E0D);
	r5 = D(r5, s1_0_1, 0xF507E21A, 0xECFF0015, 0x14FCE906, 0x0FF90608);
	r6 = D(r6, s1_0_1, 0x1BD2F0E7, 0xF9FDEF08, 0x05F7FD0B, 0x0A0BF712);
	r7 = D(r7, s1_0_1, 0x04F0F5E8, 0x03050208, 0xE0F9F701, 0x00F80310);
	r0 = D(r0, s1_0_2, 0x0503FDFE, 0xFF13EFF4, 0x022F0BE1, 0xEEF8FE06);
	r1 = D(r1, s1_0_2, 0x08FF0109, 0x1F130B35, 0x01ED141F, 0xFDFFFA07);
	r2 = D(r2, s1_0_2, 0xEE0A0501, 0x0506FF00, 0xFCF4FC01, 0xFF020300);
	r3 = D(r3, s1_0_2, 0x01FCFF01, 0x0BEF0A13, 0x0BFC0317, 0xF7F8F1FD);
	r4 = D(r4, s1_0_2, 0xEDCD261E, 0x0402FCFF, 0x1B06FB12, 0x08F40906);
	r5 = D(r5, s1_0_2, 0xFC05F00E, 0x04020402, 0x0B0EF21B, 0xF009020D);
	r6 = D(r6, s1_0_2, 0xF023FC04, 0xFDFE0204, 0xFE0000FE, 0xFC1107F3);
	r7 = D(r7, s1_0_2, 0x0AF90306, 0xFAFBFC05, 0x060209FD, 0x15FE030D);
	r0 = D(r0, s1_1_0, 0x03FB02FB, 0x0C0F0721, 0x2FDDD50E, 0xF7FD03AE);
	r1 = D(r1, s1_1_0, 0x1405E004, 0x0F1508DB, 0x0603099C, 0x01FDFEFF);
	r2 = D(r2, s1_1_0, 0x04F615D7, 0xFF03E913, 0x07FAE8D0, 0x040FEE20);
	r3 = D(r3, s1_1_0, 0x0305E61A, 0xBAFE35E8, 0x0107FE11, 0x0A0FF921);
	r4 = D(r4, s1_1_0, 0xF0E90615, 0x020100FF, 0xF300F981, 0xEDFEF61D);
	r5 = D(r5, s1_1_0, 0x2119E136, 0xE9FDF705, 0xF8F5052E, 0xF001B6F8);
	r6 = D(r6, s1_1_0, 0xECCD1621, 0x0A0800F2, 0xFBF8FBF8, 0xF80ADAB5);
	r7 = D(r7, s1_1_0, 0x00DCF666, 0x0A130106, 0xF4FBED00, 0xF5FAF540);
	r0 = D(r0, s1_1_1, 0xE7FC0603, 0xE1E20BDE, 0x0C1C173F, 0x240E1100);
	r1 = D(r1, s1_1_1, 0xC407CB0E, 0xBDE80C1D, 0xDFEDF740, 0xE80B0005);
	r2 = D(r2, s1_1_1, 0x080E130E, 0xCD0CF6FC, 0x20FAE7F4, 0xE712FA20);
	r3 = D(r3, s1_1_1, 0xFE0F040C, 0x081546F8, 0xEA00FB2E, 0x4106F835);
	r4 = D(r4, s1_1_1, 0x04FA3F13, 0x2DF905FD, 0xF8FCEBD1, 0xF80300FE);
	r5 = D(r5, s1_1_1, 0xDB15F91F, 0xCCF9F601, 0xF6E10311, 0x31F308FE);
	r6 = D(r6, s1_1_1, 0x0DE7FB14, 0x0704F00C, 0x34070B01, 0x33100911);
	r7 = D(r7, s1_1_1, 0x0709EF0D, 0x2D03E209, 0xCFF003F9, 0xFEE3F925);
	r0 = D(r0, s1_1_2, 0x11FB00FF, 0x0BEE05F4, 0xC5E94701, 0x0CF8F807);
	r1 = D(r1, s1_1_2, 0x190007FD, 0xE6D9FBDE, 0x07E907C9, 0x050302FE);
	r2 = D(r2, s1_1_2, 0xF907FDFC, 0xEEFAF808, 0xCEFEF601, 0xFE040200);
	r3 = D(r3, s1_1_2, 0xFB02FCF8, 0x16F709FD, 0x11EEF20B, 0x10FBF200);
	r4 = D(r4, s1_1_2, 0x32090001, 0xFAF7F9FF, 0xFAFAED0D, 0x0C140EF8);
	r5 = D(r5, s1_1_2, 0xECE30B1D, 0x08FC03FC, 0xFFF5F5FE, 0x1D09FC00);
	r6 = D(r6, s1_1_2, 0x030E0EFC, 0xFB06FC02, 0x0600FEFD, 0xD308FBFE);
	r7 = D(r7, s1_1_2, 0xEC040C01, 0x0110FA04, 0x2001EEFD, 0x0C0B0FF1);
	r0 = D(r0, s1_2_0, 0x09FE02F7, 0xEFEC2D19, 0x0509E181, 0x08FFF827);
	r1 = D(r1, s1_2_0, 0x0B02EB0E, 0x0BEAFEF9, 0x15070E31, 0xF7FA0409);
	r2 = D(r2, s1_2_0, 0xFBF7030B, 0xFD00F6F9, 0x0207F928, 0xFCFFF902);
	r3 = D(r3, s1_2_0, 0x0C001508, 0x9EF2E97F, 0x180FFC2C, 0x0113E8F8);
	r4 = D(r4, s1_2_0, 0x1103FC3E, 0xFFFB00FB, 0x0808E9D9, 0x120EDD27);
	r5 = D(r5, s1_2_0, 0x09F6DBF4, 0xF2080AF2, 0x03FCEFE4, 0xE8F814C5);
	r6 = D(r6, s1_2_0, 0x0EFF1CF6, 0x0CFDFDF2, 0x02FC07F1, 0xF20208E6);
	r7 = D(r7, s1_2_0, 0x09FAE8EF, 0xF00AE6EA, 0xEEF1D817, 0x0CEFE607);
	r0 = D(r0, s1_2_1, 0x08030401, 0xDEF4280B, 0x0011381E, 0xDA02F6FD);
	r1 = D(r1, s1_2_1, 0xF40C0F17, 0xFA2AE90C, 0xE41A1D18, 0xFEFE0907);
	r2 = D(r2, s1_2_1, 0xF4F80D18, 0xE4FCF60B, 0xE907E005, 0xF702020E);
	r3 = D(r3, s1_2_1, 0x200CFCEC, 0x062010CD, 0xE8F1F50F, 0xC0FCA007);
	r4 = D(r4, s1_2_1, 0x10100D1B, 0x0D030200, 0xEC02EDD4, 0xFA04ED0C);
	r5 = D(r5, s1_2_1, 0xF202F4DF, 0xEE070310, 0x0EE41EF1, 0x0EF5151A);
	r6 = D(r6, s1_2_1, 0xFEF5EBFB, 0xF2FAF106, 0x0DFDFC0A, 0x061B08F2);
	r7 = D(r7, s1_2_1, 0x0F02070D, 0x1AFEE911, 0x2C100A0A, 0xE3EBFD2E);
	r0 = D(r0, s1_2_2, 0x09F8FFFE, 0x1807EEE0, 0xD809A595, 0xFC16F807);
	r1 = D(r1, s1_2_2, 0x1DF90A04, 0x08FA2FD3, 0x050910F9, 0x05FE01FF);
	r2 = D(r2, s1_2_2, 0xFE080E04, 0xF4FFFE03, 0xFB01FD0B, 0x0702FAF8);
	r3 = D(r3, s1_2_2, 0x0DFC0000, 0x040B040D, 0xF9FFF920, 0xE9D8DC08);
	r4 = D(r4, s1_2_2, 0x080BF00C, 0xFCFEFA00, 0xFBE6DE01, 0xF0F5FF03);
	r5 = D(r5, s1_2_2, 0x03FBF8E8, 0x0407FB01, 0x02F5020F, 0x10F90101);
	r6 = D(r6, s1_2_2, 0xDE100FF8, 0xF50B01FE, 0xFAFB02FF, 0xF003FF06);
	r7 = D(r7, s1_2_2, 0x000702F7, 0x08FDFBFD, 0x0AF20BF8, 0x05E4FA0A);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFF020403, 0x9A05FAED, 0x13D71AFF, 0x1602FC05);
	r1 = D(r1, s0_0_0, 0xEBECEA09, 0x6AF9FE13, 0x6FE9ECF9, 0xD303EFF6);
	r2 = D(r2, s0_0_0, 0xE903FAFF, 0x1F00F902, 0x110CF2FD, 0xE7FAF9F2);
	r3 = D(r3, s0_0_0, 0x10F9FC0B, 0xA0F033FE, 0xE2F6FA04, 0xE8FE0A0E);
	r4 = D(r4, s0_0_0, 0xC5E54F24, 0xEB010503, 0x2703270A, 0x270A1406);
	r5 = D(r5, s0_0_0, 0x86F6BF01, 0x1AF70416, 0xC90A1210, 0xB6E2F8FA);
	r6 = D(r6, s0_0_0, 0x00F027E3, 0xFB02EDFF, 0xEBFF0003, 0x810819EF);
	r7 = D(r7, s0_0_0, 0x02FB0AF8, 0xDDF9FC05, 0x54151F00, 0x30000BFF);
	r0 = D(r0, s0_0_1, 0x0506FF03, 0x1AEFF4F8, 0x2FD0EE0F, 0x1FFBFBF9);
	r1 = D(r1, s0_0_1, 0x12F70AF9, 0xEAEED118, 0x0BFBFAF6, 0xE01B14EF);
	r2 = D(r2, s0_0_1, 0x32F1F00C, 0x0BFF1604, 0x0101F20F, 0xEC04EFE1);
	r3 = D(r3, s0_0_1, 0x08FEF507, 0x3DFDE10B, 0x03FD0B14, 0x400311EB);
	r4 = D(r4, s0_0_1, 0x810ABBD1, 0xFB060609, 0x0B05F7F7, 0x06010515);
	r5 = D(r5, s0_0_1, 0xDEFCEA02, 0x20010A11, 0xD8F5CE0A, 0x2003120F);
	r6 = D(r6, s0_0_1, 0xC700E903, 0x11000006, 0x04FFFFFC, 0xB2F92101);
	r7 = D(r7, s0_0_1, 0xFD040A15, 0xE20212FC, 0x250DDEF1, 0xF00A2507);
	r0 = D(r0, s0_0_2, 0xF0050205, 0xF9080F08, 0xD7FD1F01, 0x0A0103FF);
	r1 = D(r1, s0_0_2, 0x18070303, 0x45000A1C, 0x08F2F9A7, 0x290EEBF0);
	r2 = D(r2, s0_0_2, 0xE50106FC, 0xC101F8F4, 0x07F4F3FA, 0xF0F4F1F2);
	r3 = D(r3, s0_0_2, 0xEF020209, 0xA2F4FE01, 0x22F40B08, 0x2501FA27);
	r4 = D(r4, s0_0_2, 0xC1D77DF9, 0xE5010006, 0x01FF0EF3, 0x090203FF);
	r5 = D(r5, s0_0_2, 0x8105DE0F, 0x0F02FA0E, 0xDC04ED05, 0x3107E707);
	r6 = D(r6, s0_0_2, 0xFD11FF11, 0x23060012, 0x1202FD00, 0x2905F8F5);
	r7 = D(r7, s0_0_2, 0xFB0E010D, 0xEA02FE05, 0xC00102F3, 0x9C00FEF8);
	r0 = D(r0, s0_1_0, 0x11110302, 0xF6EBA7FD, 0x22CC1309, 0x0DE8120E);
	r1 = D(r1, s0_1_0, 0x27DBF70A, 0xD926330C, 0x2214AD15, 0xEE06FE11);
	r2 = D(r2, s0_1_0, 0xDEFFF802, 0xCDF91602, 0xFBF8FD13, 0xF3FBE610);
	r3 = D(r3, s0_1_0, 0x0EC4FDF7, 0x05D0EA2B, 0xD6FAE404, 0x30FF4C0E);
	r4 = D(r4, s0_1_0, 0x285E0909, 0x01030706, 0x0B0E2607, 0xEAF901EE);
	r5 = D(r5, s0_1_0, 0x07D10F13, 0x1CECE50A, 0x00E5FC1D, 0xF0D7FDE2);
	r6 = D(r6, s0_1_0, 0x12D9F981, 0xFF13ED0B, 0x2301FF08, 0x05DE1000);
	r7 = D(r7, s0_1_0, 0x1512050B, 0x01DC09FF, 0xE7FE1B08, 0xC4DED308);
	r0 = D(r0, s0_1_1, 0x0C0307F1, 0xEC0B0C23, 0x66AE0FEA, 0x09FE1BF9);
	r1 = D(r1, s0_1_1, 0x16FAD615, 0x2E210A81, 0xF5024281, 0x1408EF02);
	r2 = D(r2, s0_1_1, 0x0407091D, 0x1B0BF703, 0x0C08FEFA, 0x1602FDF8);
	r3 = D(r3, s0_1_1, 0xFBF20A15, 0xFDB60C1D, 0xBBB3F9C1, 0x380AFE2F);
	r4 = D(r4, s0_1_1, 0x35FBF5D7, 0x0211071A, 0xF3FB0E07, 0xEAD80CF6);
	r5 = D(r5, s0_1_1, 0xCA12D6D3, 0x08C4F62B, 0x11E481E3, 0x1DEE04CF);
	r6 = D(r6, s0_1_1, 0x05F7EB21, 0x0DFB09DB, 0x17FAFF07, 0x1AFA031E);
	r7 = D(r7, s0_1_1, 0xFD00FD03, 0x02EBF9F2, 0x090609ED, 0xDDFBA419);
	r0 = D(r0, s0_1_2, 0x030102FF, 0x03E9E317, 0xBA82FA81, 0xF60D1509);
	r1 = D(r1, s0_1_2, 0x1405E0EF, 0xD6FBE42C, 0x0F03B8E4, 0xFF080811);
	r2 = D(r2, s0_1_2, 0x0607FEFF, 0x0D0404F4, 0x23F604F1, 0xFA03F00B);
	r3 = D(r3, s0_1_2, 0x0701050A, 0xFCF64816, 0x0BFACE0B, 0x0D091602);
	r4 = D(r4, s0_1_2, 0xD4F51713, 0xFF03FF08, 0xD40FF80A, 0x05FB1AEB);
	r5 = D(r5, s0_1_2, 0xDE20E5F8, 0x0802F706, 0x04FE0004, 0xF2FF05F4);
	r6 = D(r6, s0_1_2, 0xFAF9DC09, 0x03020F07, 0x0EFD00FC, 0x22062602);
	r7 = D(r7, s0_1_2, 0x1D000612, 0x0A01F7F8, 0xF900F113, 0xFB060108);
	r0 = D(r0, s0_2_0, 0xFE0AFBFF, 0xCAF8E20E, 0x0400101E, 0x0E040E0D);
	r1 = D(r1, s0_2_0, 0xF300F610, 0x0EEBF0EF, 0x2B0E00E7, 0x02040DFF);
	r2 = D(r2, s0_2_0, 0x0505FDFB, 0xE9F8FDFD, 0x0009EF00, 0xFF010304);
	r3 = D(r3, s0_2_0, 0x020CF603, 0xD0FF8112, 0x05F1FBFC, 0x04260D10);
	r4 = D(r4, s0_2_0, 0xE30AF90F, 0x0109F906, 0x06FC0407, 0xF0DC01F3);
	r5 = D(r5, s0_2_0, 0xF6DBE8F5, 0xFBFC0013, 0x110DE4EF, 0x0BF1F701);
	r6 = D(r6, s0_2_0, 0x08F6E615, 0xFB040A05, 0xFB0506FE, 0x09ED11FC);
	r7 = D(r7, s0_2_0, 0x0BF9FF07, 0xFCDE01F9, 0x05EAF605, 0xFA14E5DF);
	r0 = D(r0, s0_2_1, 0xFD06FBF9, 0x2BEE01FE, 0x14EDD80C, 0xF5F4DFFE);
	r1 = D(r1, s0_2_1, 0x04F0FEF4, 0x25920B1B, 0xE7EAEB93, 0x08F4F507);
	r2 = D(r2, s0_2_1, 0xFC1B0B02, 0xFB0AEE05, 0x05F2FBF8, 0x070BF701);
	r3 = D(r3, s0_2_1, 0x060F1A08, 0xECE5AA0F, 0xFBE601F4, 0x27228109);
	r4 = D(r4, s0_2_1, 0xF9F61E0C, 0x0308F908, 0x13F8FA0A, 0xFFD00403);
	r5 = D(r5, s0_2_1, 0x25F809FE, 0x06FFF208, 0x0013F7F1, 0x03E7D60A);
	r6 = D(r6, s0_2_1, 0xDD131AFC, 0x07010F0A, 0x00F7FD00, 0xFE13F3F4);
	r7 = D(r7, s0_2_1, 0xF9F9FC0B, 0x060510FC, 0x15FE1506, 0x0003F6F8);
	r0 = D(r0, s0_2_2, 0xFF0D00FF, 0xE9E6FD1F, 0x1B36110A, 0x0CFB080A);
	r1 = D(r1, s0_2_2, 0x03FB1716, 0x0415EB01, 0xF7E60701, 0x01FB0406);
	r2 = D(r2, s0_2_2, 0x0902F801, 0x0DFF02FD, 0x05F1E60D, 0x0104FA03);
	r3 = D(r3, s0_2_2, 0x010510F5, 0x1F27FFF9, 0x1803F50A, 0x0A05E5FE);
	r4 = D(r4, s0_2_2, 0x810FDD02, 0x06090005, 0x010823F9, 0x13F7FBF2);
	r5 = D(r5, s0_2_2, 0x12081010, 0x0203F80D, 0x110D2911, 0x0100E30C);
	r6 = D(r6, s0_2_2, 0x0CFBEDFC, 0x02FAECFC, 0xFBFFFB07, 0xE80813F0);
	r7 = D(r7, s0_2_2, 0x080101FE, 0x04030904, 0x14F81113, 0xFE05C304);
	r0 = D(r0, s1_0_0, 0x01FF01FF, 0xA60D05F8, 0xF4DEE7C3, 0x0E05FD0A);
	r1 = D(r1, s1_0_0, 0x0B0CFFEF, 0xF1FA0D15, 0xCC0AFA01, 0xF8080A01);
	r2 = D(r2, s1_0_0, 0xF8030500, 0x0804FD02, 0x02FE0504, 0xFF0D0007);
	r3 = D(r3, s1_0_0, 0xF60302FC, 0xD00CF081, 0xF80705F5, 0x0609F5E4);
	r4 = D(r4, s1_0_0, 0xA6183581, 0x06010002, 0x00060B0E, 0x0600F5F7);
	r5 = D(r5, s1_0_0, 0xE218F4E8, 0xFC0601F8, 0xE90DFEE7, 0xFE00020D);
	r6 = D(r6, s1_0_0, 0xFB1AEA11, 0xF401F6F3, 0x02FFFEF8, 0x0BF8F904);
	r7 = D(r7, s1_0_0, 0x03FC010C, 0xF7000103, 0x0B07EF02, 0xFA07FAFD);
	r0 = D(r0, s1_0_1, 0xFF00FD0A, 0xFEDEF0E4, 0xE813FBF5, 0x0605FBEE);
	r1 = D(r1, s1_0_1, 0xD30BFFFC, 0x1BFC0C0F, 0x1E1404B1, 0xD7081AE4);
	r2 = D(r2, s1_0_1, 0x0800F802, 0x06FE07FB, 0xFB0904F9, 0x01040BE8);
	r3 = D(r3, s1_0_1, 0xFE00FC04, 0x1709F7E8, 0xF710FAEA, 0xEF01FEFD);
	r4 = D(r4, s1_0_1, 0xF3AEE6EF, 0x03FD0105, 0x101A0431, 0x1409F800);
	r5 = D(r5, s1_0_1, 0xEC14FFCF, 0xF102FB0B, 0xB31417D1, 0x01FEFDF6);
	r6 = D(r6, s1_0_1, 0x0F00D8DB, 0xFE0AFEF0, 0x04020203, 0xF4F7050F);
	r7 = D(r7, s1_0_1, 0xFBFFF617, 0xFB0107FA, 0xFF100F17, 0xF507E7F1);
	r0 = D(r0, s1_0_2, 0xFE0105FA, 0xF8FFFE06, 0x81E213E9, 0xFA06FB0B);
	r1 = D(r1, s1_0_2, 0x05051201, 0xF2030B10, 0xAD05F229, 0xE70910FF);
	r2 = D(r2, s1_0_2, 0xF9F9F8FB, 0xFFFEFD02, 0x060EECEE, 0xFB05FD00);
	r3 = D(r3, s1_0_2, 0xFE0405FC, 0x1DF214EF, 0xDF0CF4FF, 0xF2FD08FF);
	r4 = D(r4, s1_0_2, 0x3DEDE02E, 0x03FF0503, 0xFF030C00, 0xFB0201F8);
	r5 = D(r5, s1_0_2, 0x09090115, 0xFCFFFFFD, 0xE909FEE7, 0xFBFD000B);
	r6 = D(r6, s1_0_2, 0xF3F80505, 0xFDFFF704, 0xF8FFFFFA, 0x07FBF7F2);
	r7 = D(r7, s1_0_2, 0x01FD12FC, 0xFB04FF05, 0xF600070F, 0xF00BF40C);
	r0 = D(r0, s1_1_0, 0x0008FFFC, 0xF722DC11, 0x0B0AD6A8, 0x1C06000B);
	r1 = D(r1, s1_1_0, 0x0F07FEF4, 0xFE19E704, 0xBF04F80C, 0x0F02010C);
	r2 = D(r2, s1_1_0, 0xFBFBFA08, 0xFDF3F30C, 0xF207F904, 0xF8060014);
	r3 = D(r3, s1_1_0, 0x1007FAF0, 0x19FBAFC1, 0xD216FE0F, 0x3AF304F0);
	r4 = D(r4, s1_1_0, 0xFC0DF9E5, 0xFB0503FF, 0x02FEF805, 0xF9FFFBF9);
	r5 = D(r5, s1_1_0, 0x0B15F409, 0x0203FD04, 0x04FEFDBE, 0x040008E7);
	r6 = D(r6, s1_1_0, 0xD71DF906, 0x01FDFE04, 0xFCFD01F8, 0xE80212F1);
	r7 = D(r7, s1_1_0, 0xEF16DEFB, 0xFA0504FD, 0x0A010DE5, 0xDF1BFDEA);
	r0 = D(r0, s1_1_1, 0x170BFC04, 0x26FF16C2, 0x1D1ADAF0, 0x0DF6FE0F);
	r1 = D(r1, s1_1_1, 0x040012E6, 0x4818F225, 0xE81BFCDD, 0x0F0FFF01);
	r2 = D(r2, s1_1_1, 0xE8F40704, 0x01FF12F2, 0xF608EAF9, 0xFAF4040E);
	r3 = D(r3, s1_1_1, 0x19FDFA04, 0x3A1501F6, 0x951305F0, 0xF00616F6);
	r4 = D(r4, s1_1_1, 0x0D020619, 0xF9030905, 0x2601F517, 0x100DECFF);
	r5 = D(r5, s1_1_1, 0xB60302D5, 0xFA03FE0A, 0xD524FCD0, 0xF9F9F921);
	r6 = D(r6, s1_1_1, 0x040816E6, 0xFFF90DF2, 0x1105FC0A, 0x81DE0007);
	r7 = D(r7, s1_1_1, 0x1017E1FC, 0xF4FB01DA, 0xF313F8F7, 0xDE2BE400);
	r0 = D(r0, s1_1_2, 0xFC04FDFD, 0x10010811, 0xFC1AC4DC, 0xFF0009FA);
	r1 = D(r1, s1_1_2, 0x0205FFFF, 0xC3E5B108, 0xFCFAF808, 0x0108F9ED);
	r2 = D(r2, s1_1_2, 0xEFF4020D, 0xFBFC0204, 0xF40AFE0E, 0x010A09F9);
	r3 = D(r3, s1_1_2, 0x0DF90200, 0x120F17E6, 0xCE1008E9, 0x08FAF411);
	r4 = D(r4, s1_1_2, 0x0007E816, 0xFC010403, 0x0013F203, 0x0903FCE9);
	r5 = D(r5, s1_1_2, 0xE41416DA, 0xFE07F609, 0xFA0CFBF1, 0xF80404F9);
	r6 = D(r6, s1_1_2, 0x05061817, 0x01FD0804, 0x0303FDFC, 0xFBEFFBE3);
	r7 = D(r7, s1_1_2, 0x0302F410, 0x0B0700FD, 0xF109FBFC, 0xF50AF2ED);
	r0 = D(r0, s1_2_0, 0xFE05FFFB, 0x8110010E, 0x12D32111, 0xF809FE08);
	r1 = D(r1, s1_2_0, 0x040E0408, 0x02070519, 0x05F00107, 0x0FF907F5);
	r2 = D(r2, s1_2_0, 0x0F00F802, 0xFDFE06FC, 0xEC0F030D, 0x080300FC);
	r3 = D(r3, s1_2_0, 0xFF04F810, 0xF0FBDC31, 0x050F00F1, 0xFBFCF914);
	r4 = D(r4, s1_2_0, 0x07FA01F8, 0x020701FB, 0xF5FE0201, 0x0CFA09EC);
	r5 = D(r5, s1_2_0, 0x180AFC04, 0xF7050107, 0xEF0312EC, 0xFFF504F2);
	r6 = D(r6, s1_2_0, 0xFCF10405, 0x0BF2FD07, 0xF900FFFB, 0xFA0D090B);
	r7 = D(r7, s1_2_0, 0x10F3F6FF, 0xFEFF0602, 0xFB0607F5, 0x0410FBF3);
	r0 = D(r0, s1_2_1, 0xFFFE04FC, 0xE5021CF7, 0x0AECDC0F, 0xFFFD08FD);
	r1 = D(r1, s1_2_1, 0x040BF6E7, 0xE8012AFB, 0xE1FE30C8, 0x0302FC08);
	r2 = D(r2, s1_2_1, 0xF9F501FB, 0xF80105FF, 0xF81404F6, 0x0506FF10);
	r3 = D(r3, s1_2_1, 0xF90AFC04, 0x2EE22001, 0xF11303B5, 0x1EF3F4CF);
	r4 = D(r4, s1_2_1, 0x0CFBFBF7, 0x01060504, 0x10030B13, 0xFF0907EF);
	r5 = D(r5, s1_2_1, 0x02020101, 0xFB04F609, 0xE90B00F4, 0x03F8FD0A);
	r6 = D(r6, s1_2_1, 0x06F710EC, 0xF9000DF7, 0xFDF404FD, 0xF90BFE13);
	r7 = D(r7, s1_2_1, 0xF803EA06, 0x0203FCFD, 0x0A14FFEA, 0xE910FFDC);
	r0 = D(r0, s1_2_2, 0xFE01FF01, 0xDA1FF5F2, 0xF118CD0F, 0xFCFC120C);
	r1 = D(r1, s1_2_2, 0xFC0A02F2, 0xF2051EE0, 0x15ED11E1, 0x020700F2);
	r2 = D(r2, s1_2_2, 0xF9F2060A, 0x0AFCFD04, 0x0CFEFA04, 0x02060009);
	r3 = D(r3, s1_2_2, 0xF804FCFF, 0xFDEFD50C, 0xE71006E0, 0x03050707);
	r4 = D(r4, s1_2_2, 0x00081100, 0x0202FC04, 0x1007FDE8, 0x0602F9F6);
	r5 = D(r5, s1_2_2, 0x051C04E0, 0xFF03FDFF, 0xF31013CC, 0x0AFA0007);
	r6 = D(r6, s1_2_2, 0x00EE030B, 0x03F905FE, 0xFFFD0406, 0xE108F2FD);
	r7 = D(r7, s1_2_2, 0xFD03FE08, 0x070101F0, 0x0207FEF7, 0xF508F9D4);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-6.909e-03, 9.237e-03, -6.138e-03, -4.553e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(2.279e-02, -2.026e-03, -4.890e-02, 8.375e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-2.763e-02, -4.700e-02, -3.299e-02, 2.760e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(3.232e-02, -3.268e-02, 9.446e-02, 6.376e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-7.208e-04, 2.528e-02, 2.269e-02, -1.307e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(7.593e-02, -7.229e-02, 1.279e-02, -1.541e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-2.112e-02, 1.361e-02, -4.653e-02, -4.388e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(2.262e-02, 6.913e-03, 7.688e-02, 1.047e-01);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-DS-conv6
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv5_pt;
			r = conv5_gather(p, 0);
			g = conv5_gather(p, 1);
			b = conv5_gather(p, 2);
			a = conv5_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv5_pt;
			r = conv5_gather(p, 0);
			g = conv5_gather(p, 1);
			b = conv5_gather(p, 2);
			a = conv5_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFEF5F61B, 0x0D0C3812, 0xFFFE0C0C, 0xFB0AFCED);
	r1 = D(r1, s0_0_0, 0xF1ED00EC, 0x01F10601, 0x06FAF0F6, 0x02FF090B);
	r2 = D(r2, s0_0_0, 0x13FEFE06, 0xDC20DBEF, 0xF7F1EAF3, 0x1408F916);
	r3 = D(r3, s0_0_0, 0x0B0F5225, 0x020CE8FA, 0x0110F0F7, 0xFB03F5FC);
	r4 = D(r4, s0_0_0, 0xFE030D1D, 0xEA2EF740, 0x011DE5F7, 0xFE03FDFA);
	r5 = D(r5, s0_0_0, 0x020EFFE0, 0x18F3D90C, 0x0304031E, 0xFA09F2FC);
	r6 = D(r6, s0_0_0, 0x02F913F9, 0x010BF903, 0xF01E09F9, 0x0BD1E9F8);
	r7 = D(r7, s0_0_0, 0x1610F71B, 0xED0D27F6, 0x0212EEDA, 0xFF02FEFD);
	r0 = D(r0, s0_0_1, 0xFB07F315, 0x00162AD8, 0xFDF90306, 0xE80DFDFF);
	r1 = D(r1, s0_0_1, 0x1EFE08F4, 0xFBFAF6EF, 0xF702EDF9, 0x09FEF819);
	r2 = D(r2, s0_0_1, 0xF00905F3, 0xB30DD9F9, 0x21050410, 0xFCF212ED);
	r3 = D(r3, s0_0_1, 0xF34781D5, 0xF908F7F7, 0xF200011C, 0xEA0104E6);
	r4 = D(r4, s0_0_1, 0x0EFA03FC, 0x080BA4F8, 0x0014FC19, 0x0D011604);
	r5 = D(r5, s0_0_1, 0x03FCF9F4, 0x0908E80A, 0xFC040A09, 0xEE09FFFC);
	r6 = D(r6, s0_0_1, 0xE8121BE6, 0x0A03F70C, 0xE30D1005, 0x0703FAE7);
	r7 = D(r7, s0_0_1, 0x0A03EC05, 0x0B15D5FE, 0x080E0415, 0x07F71506);
	r0 = D(r0, s0_0_2, 0xFB08F2FC, 0xFC16030C, 0x05010406, 0xF901FE17);
	r1 = D(r1, s0_0_2, 0x0D00EC07, 0xF102EEF3, 0xFAFC11FC, 0x0402E90A);
	r2 = D(r2, s0_0_2, 0x09FDF00B, 0xD809E5FC, 0x1AEC0201, 0x13F407FE);
	r3 = D(r3, s0_0_2, 0x221781E3, 0xF60510F2, 0x0B000CF4, 0x0A040A0D);
	r4 = D(r4, s0_0_2, 0x13FF0900, 0xF2ED07F5, 0xFF06F7EE, 0x00FB0A0A);
	r5 = D(r5, s0_0_2, 0xFE09F500, 0x08FAD704, 0x0902F4F9, 0x0C07071B);
	r6 = D(r6, s0_0_2, 0x0D0AFEFD, 0xFB00F912, 0xD7121304, 0xFBE70BF4);
	r7 = D(r7, s0_0_2, 0xFA09ED0F, 0x030704FA, 0xFC1F29F1, 0x01FC11FC);
	r0 = D(r0, s0_1_0, 0xF4FDFC1C, 0xF9F9F5F6, 0xFFFDF904, 0x02E00606);
	r1 = D(r1, s0_1_0, 0xF61AF506, 0xFE11FE21, 0x0AF302FB, 0xFEF8F6F6);
	r2 = D(r2, s0_1_0, 0x09DD12F9, 0x19D6FC1E, 0x0617EAFC, 0xFEF7E40B);
	r3 = D(r3, s0_1_0, 0x0FB48103, 0x07CAF2EB, 0x03DCF9EC, 0xF7FDE9EF);
	r4 = D(r4, s0_1_0, 0xFFFE05F6, 0x06D81DD4, 0x030806FB, 0x0002F201);
	r5 = D(r5, s0_1_0, 0xFBE0FE11, 0xF721F9E7, 0x080FF7F9, 0xFD1EE8F9);
	r6 = D(r6, s0_1_0, 0x0201EDF9, 0x01F1F408, 0xFCAAFF07, 0xD829F80D);
	r7 = D(r7, s0_1_0, 0xFD2010C9, 0xF6040209, 0xFEFFF5DB, 0x040AFE0B);
	r0 = D(r0, s0_1_1, 0xFFFE071A, 0xFDFBD926, 0x100D02C7, 0x25F40CDD);
	r1 = D(r1, s0_1_1, 0x011AEA1D, 0x02001728, 0x0D0D0B06, 0x10091939);
	r2 = D(r2, s0_1_1, 0xF9F90FC5, 0xF0F204E1, 0x03FBE8EE, 0x11F0F304);
	r3 = D(r3, s0_1_1, 0x02CF81C3, 0xF824FFEC, 0xFB00D322, 0x1BF5F9C4);
	r4 = D(r4, s0_1_1, 0x21F211F1, 0x15F5020C, 0xEC010111, 0xFB03F43C);
	r5 = D(r5, s0_1_1, 0x13F7F628, 0xE808FB06, 0x06F6FDFD, 0xDE0915FB);
	r6 = D(r6, s0_1_1, 0xFB0BF90A, 0xFAF6F91B, 0xFBE80AE1, 0xF11F0CCB);
	r7 = D(r7, s0_1_1, 0x010704ED, 0x250BFA02, 0x00EFEFE1, 0xF40200EA);
	r0 = D(r0, s0_1_2, 0xFAEF0EED, 0x15F03506, 0xFF030308, 0x0D031416);
	r1 = D(r1, s0_1_2, 0xF8FFE5F3, 0xFBFEF7F3, 0x0EFEFBFD, 0x0105EB10);
	r2 = D(r2, s0_1_2, 0xE6010202, 0x21F72300, 0x03FB170A, 0xFD08E3EE);
	r3 = D(r3, s0_1_2, 0x0E81E216, 0x1AF52710, 0xFC0704FC, 0x03F403EC);
	r4 = D(r4, s0_1_2, 0x1303ED00, 0xEB05E70C, 0xF7FF08F8, 0xF90C07ED);
	r5 = D(r5, s0_1_2, 0xFFED0D06, 0x04F4EAFE, 0x0900F004, 0xEFF9EA02);
	r6 = D(r6, s0_1_2, 0xF4F6130E, 0x0803F606, 0xFBF000F2, 0xD81FD9FC);
	r7 = D(r7, s0_1_2, 0x0A0C10FE, 0xF5FD030C, 0x31D81305, 0xF00B08F9);
	r0 = D(r0, s0_2_0, 0xFFF5F9FB, 0x03F409FD, 0x010F00FE, 0xF607FDF5);
	r1 = D(r1, s0_2_0, 0x06F8F10A, 0x021012FC, 0xFDFFF20C, 0xF701ED04);
	r2 = D(r2, s0_2_0, 0xFDF3FF11, 0x190AF60E, 0x0204E40E, 0xFCFB0704);
	r3 = D(r3, s0_2_0, 0x01412DF0, 0x11AFECFE, 0x00140104, 0xFE16FB19);
	r4 = D(r4, s0_2_0, 0x0016F604, 0x0A23BA06, 0x05FDEFFE, 0x01F0F804);
	r5 = D(r5, s0_2_0, 0x06F7EDFE, 0x000EF3E6, 0xFEE4EA1B, 0x0409FA10);
	r6 = D(r6, s0_2_0, 0xFF1C1900, 0x02020207, 0xFE12F114, 0x01F6040E);
	r7 = D(r7, s0_2_0, 0xFFFF0106, 0x13FF13FC, 0x07EEFAF9, 0x04F80004);
	r0 = D(r0, s0_2_1, 0xFFF8FFF3, 0x2011F7E6, 0xFFFEFB02, 0x080002E4);
	r1 = D(r1, s0_2_1, 0x040001D3, 0x04061019, 0xFC0C0108, 0xFDFF00FE);
	r2 = D(r2, s0_2_1, 0x07060702, 0x00201907, 0xF8F605FE, 0xF212F8F2);
	r3 = D(r3, s0_2_1, 0xE7201801, 0xFB0E1EF1, 0xFAFFF901, 0xF90D0405);
	r4 = D(r4, s0_2_1, 0x06FFFFF5, 0x030DC017, 0x05060000, 0x09FBF8F1);
	r5 = D(r5, s0_2_1, 0x0B080CF2, 0x0903FAF8, 0x0C07F111, 0xE91EF705);
	r6 = D(r6, s0_2_1, 0x0718F5FD, 0x0500F907, 0xFD1100E9, 0xFF08F900);
	r7 = D(r7, s0_2_1, 0x02FC05FE, 0xF1FCF6EE, 0xFE2E13FC, 0x00FAFDFA);
	r0 = D(r0, s0_2_2, 0x0B0DFDF6, 0x290C0C09, 0xF103FE07, 0x1101FC10);
	r1 = D(r1, s0_2_2, 0x0703FF0E, 0x080802F6, 0xFEFDF602, 0x05FAF703);
	r2 = D(r2, s0_2_2, 0x1100FE02, 0xEF0AF917, 0x07F5E9FF, 0x18F304F2);
	r3 = D(r3, s0_2_2, 0xDE0D0608, 0x0303F70F, 0x05FA06FB, 0x010F0301);
	r4 = D(r4, s0_2_2, 0x0EFD0401, 0xFFFB15F4, 0xFB05F609, 0x0BFA05FE);
	r5 = D(r5, s0_2_2, 0x02FA06F8, 0x1C0A0108, 0xF7F5EF10, 0xF0081D08);
	r6 = D(r6, s0_2_2, 0xFDFE24FF, 0xFDFFF9FE, 0xE60CFA0B, 0x12E10609);
	r7 = D(r7, s0_2_2, 0x04F80804, 0xFEF5FC0D, 0x161F11FE, 0xF9F8040B);
	r0 = D(r0, s1_0_0, 0xFEFF00FB, 0x050605F9, 0xFD01FFFF, 0xFB02F9FC);
	r1 = D(r1, s1_0_0, 0x00FA1F00, 0x00FE14FF, 0x040BF807, 0xFFFFF9FF);
	r2 = D(r2, s1_0_0, 0xF80515FD, 0x0C0E49FA, 0x1105FA13, 0xF5FE46F4);
	r3 = D(r3, s1_0_0, 0x1C091906, 0x09E7E904, 0xF6FB24E7, 0x010FE1F9);
	r4 = D(r4, s1_0_0, 0x04E3FCFE, 0xF5124400, 0x01FA1403, 0x00FCF7FD);
	r5 = D(r5, s1_0_0, 0x05050403, 0xF4E7FBFD, 0xFD081404, 0x02FBCF02);
	r6 = D(r6, s1_0_0, 0x05031BF7, 0xFDF8F102, 0xFC12F108, 0xF9DE0201);
	r7 = D(r7, s1_0_0, 0xFAFC1402, 0x13FB31FC, 0xFAE1FE03, 0x01FD0903);
	r0 = D(r0, s1_0_1, 0x02F90BFD, 0xFB0AFE09, 0x09031FFC, 0x04F21500);
	r1 = D(r1, s1_0_1, 0xEEFAF9FC, 0xF8FC0605, 0x0CFEFBFF, 0xF1FF00FE);
	r2 = D(r2, s1_0_1, 0x16D71905, 0x0F06C7FF, 0xFF1B0405, 0x18312D0C);
	r3 = D(r3, s1_0_1, 0x14810FDC, 0xFD030FFB, 0xFA04FFF9, 0x04DDF8FA);
	r4 = D(r4, s1_0_1, 0x07B72203, 0xF1DFE903, 0x0C122EFA, 0x01060400);
	r5 = D(r5, s1_0_1, 0xFC06ED02, 0xEDFA350A, 0x0BFD0006, 0x22F22005);
	r6 = D(r6, s1_0_1, 0x0EED19EF, 0xFB0601FE, 0x14D2FFFA, 0xEA000E10);
	r7 = D(r7, s1_0_1, 0xE9FD0B06, 0xEC8A1CEA, 0xFADC0FFC, 0x050AEDF8);
	r0 = D(r0, s1_0_2, 0x04FAFD02, 0x1516ECEF, 0xFDF10102, 0xFDF7FFFB);
	r1 = D(r1, s1_0_2, 0xF6F70B06, 0x07081803, 0x0306EA05, 0xFEFE09FC);
	r2 = D(r2, s1_0_2, 0xFF000401, 0xF617E4F4, 0x02021412, 0x0A111600);
	r3 = D(r3, s1_0_2, 0x099EFAFD, 0x07100705, 0x09FA0F04, 0x0E0514FD);
	r4 = D(r4, s1_0_2, 0xFDE90500, 0x0EF711F6, 0xE717ECE4, 0xF801FC00);
	r5 = D(r5, s1_0_2, 0x0811FD00, 0xF7F91104, 0x030B09FE, 0xE7010CFB);
	r6 = D(r6, s1_0_2, 0xFA0700E7, 0xF9F3F2FE, 0xF905ECE2, 0x040421F3);
	r7 = D(r7, s1_0_2, 0x04F208F7, 0xFF0A050E, 0x0103D5F8, 0x030AFE08);
	r0 = D(r0, s1_1_0, 0xFFFE0B04, 0xFF170D00, 0xFEF502F7, 0xFC11D9FF);
	r1 = D(r1, s1_1_0, 0xF0F20F0E, 0x0001F305, 0xF2040904, 0xF4F509F7);
	r2 = D(r2, s1_1_0, 0xF40204F8, 0x030F27FC, 0x02FC17F7, 0xF60C09ED);
	r3 = D(r3, s1_1_0, 0xBC0D130F, 0xFD06E1FE, 0xF8F40FE6, 0xF6E51201);
	r4 = D(r4, s1_1_0, 0x03F70904, 0x040102D8, 0x00F60B03, 0xF8F9FBFD);
	r5 = D(r5, s1_1_0, 0x090E1605, 0x08D9FCF7, 0xEBF210F6, 0x09FF2AF8);
	r6 = D(r6, s1_1_0, 0xF80D1FFF, 0xFB020C00, 0x05E32E02, 0x14C0CAE8);
	r7 = D(r7, s1_1_0, 0x01DCF1F7, 0x0CF7FB0A, 0x0585F109, 0x01F90D00);
	r0 = D(r0, s1_1_1, 0xFA0AEFFF, 0xE5E62206, 0x02090FFB, 0xF8F70205);
	r1 = D(r1, s1_1_1, 0x1AF603FF, 0x0904F708, 0xEC090109, 0x0E041FFE);
	r2 = D(r2, s1_1_1, 0xF1EDDD0F, 0x00FB2C05, 0x041018F3, 0xFD0E23EE);
	r3 = D(r3, s1_1_1, 0x08163ED2, 0x13FA2302, 0x09F4FE0B, 0xE4D71922);
	r4 = D(r4, s1_1_1, 0xF3F70BF6, 0x09F80806, 0x06FE03FC, 0xF709F710);
	r5 = D(r5, s1_1_1, 0x12F60C09, 0x17FE17FB, 0x02FAE213, 0xF92A1700);
	r6 = D(r6, s1_1_1, 0xEF06FF00, 0x21F50CEB, 0xD2FA0A12, 0xF30BF2F9);
	r7 = D(r7, s1_1_1, 0xF50104F8, 0xF1E506DA, 0x05CC23FE, 0xFC11E600);
	r0 = D(r0, s1_1_2, 0xF004FF00, 0xE40A0B06, 0x01EC01FD, 0x03FFFC07);
	r1 = D(r1, s1_1_2, 0xEE050CF2, 0xFA10020C, 0xFB01F4F4, 0x05FC0405);
	r2 = D(r2, s1_1_2, 0xF70A05FA, 0x11F3FDF2, 0x071724ED, 0xF9F01602);
	r3 = D(r3, s1_1_2, 0x185E3A11, 0xFA0C03EF, 0x01110204, 0xFDEFFEF7);
	r4 = D(r4, s1_1_2, 0xF8FCFFF8, 0xFB180B08, 0xF10E08E2, 0xFE04FE03);
	r5 = D(r5, s1_1_2, 0x06111604, 0x01EF0709, 0x02FCE5F9, 0x04EB01F7);
	r6 = D(r6, s1_1_2, 0xEBFB1A04, 0x02FF040B, 0xE7CF0702, 0x15F1EC02);
	r7 = D(r7, s1_1_2, 0x03F5FBFD, 0xF70709E1, 0xFFEF1E0A, 0x0802FEFC);
	r0 = D(r0, s1_2_0, 0xF70B07FD, 0x0CFD10EB, 0x02FBFA02, 0x02F6F5F8);
	r1 = D(r1, s1_2_0, 0xF40602FA, 0x0AFB040C, 0x02070702, 0x03F40202);
	r2 = D(r2, s1_2_0, 0x06E4F4F3, 0xF91015F0, 0xCB09ECF7, 0x09FEFCF4);
	r3 = D(r3, s1_2_0, 0xFB3734F9, 0xE2FD0B03, 0x071405F0, 0xEEFD0D09);
	r4 = D(r4, s1_2_0, 0x04C801FB, 0xFCF01800, 0xFDF60800, 0x000303F9);
	r5 = D(r5, s1_2_0, 0xFF170C04, 0x11E9F3F9, 0xF92708F6, 0xE807F6FF);
	r6 = D(r6, s1_2_0, 0x010A18F5, 0xFC0407FF, 0xD3F90602, 0x08FBF80C);
	r7 = D(r7, s1_2_0, 0xFFF2F705, 0xE1F90806, 0xEADB0C10, 0xFC0911F9);
	r0 = D(r0, s1_2_1, 0x10F9FF03, 0x08ED1BF8, 0x08F807F9, 0x00010802);
	r1 = D(r1, s1_2_1, 0xF8EAE3FE, 0x010C08F9, 0xF3010602, 0xFD0AFAFA);
	r2 = D(r2, s1_2_1, 0x08030C10, 0x0604F101, 0xE0F711FA, 0xE7CBFB02);
	r3 = D(r3, s1_2_1, 0x2691D8F6, 0xECECFB00, 0x000004FB, 0x10FB0DF0);
	r4 = D(r4, s1_2_1, 0xFEF11202, 0x0FF103FB, 0x020B1100, 0xFBF4F50B);
	r5 = D(r5, s1_2_1, 0x0EDAF5FB, 0xF71919F8, 0xE8D1100F, 0xFD03FF03);
	r6 = D(r6, s1_2_1, 0xFC06F906, 0xF3F9F7FD, 0xF1EFEFE9, 0x0613151C);
	r7 = D(r7, s1_2_1, 0x0C0B08FE, 0x2EE507E5, 0x1C091804, 0xEDF0FEFE);
	r0 = D(r0, s1_2_2, 0x0606FF05, 0x1BFF08FD, 0xFEF3F9FF, 0xFAFCFDF7);
	r1 = D(r1, s1_2_2, 0x0700FE08, 0x0D020102, 0x030306FC, 0xFBFAFBFD);
	r2 = D(r2, s1_2_2, 0xFDFA01F3, 0x0EFBDFF8, 0xF2030F07, 0xFA0705FE);
	r3 = D(r3, s1_2_2, 0x09FB0624, 0x08060906, 0xFAFF0600, 0xEF0AFF04);
	r4 = D(r4, s1_2_2, 0x03F008FF, 0xE80B0FFB, 0x010806F6, 0x02020207);
	r5 = D(r5, s1_2_2, 0x01020005, 0xFE0AF5F8, 0xFE080402, 0xF109FDFA);
	r6 = D(r6, s1_2_2, 0xF90C1106, 0x0403FAF9, 0xFB17F413, 0x0BFF0AE8);
	r7 = D(r7, s1_2_2, 0x04FC0CF3, 0xFA0812DC, 0x0306F2F5, 0x0701060B);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFCFDF8FF, 0xFF0A11FD, 0xFC010901, 0xFD0AF9E9);
	r1 = D(r1, s0_0_0, 0xFAF0FC01, 0xFEF20110, 0xFEF8F9F7, 0xFFF80304);
	r2 = D(r2, s0_0_0, 0xFC0EFE02, 0xECF7F8FA, 0xF20CFC02, 0x0AEC1007);
	r3 = D(r3, s0_0_0, 0xCBE6ED1E, 0xFBFFF207, 0x08FB07F1, 0xFC1C02F9);
	r4 = D(r4, s0_0_0, 0x00E9D8FE, 0xF1210322, 0xFDF301FD, 0xFFF303F2);
	r5 = D(r5, s0_0_0, 0x0A09EF02, 0x05050209, 0xFD130B03, 0xFD03FCF8);
	r6 = D(r6, s0_0_0, 0xF805090D, 0xFEFFFFFB, 0xF00500E8, 0x03EF0D18);
	r7 = D(r7, s0_0_0, 0xF7160801, 0xFFF10611, 0x0104E7D9, 0x06F701FD);
	r0 = D(r0, s0_0_1, 0x0304FAF7, 0xFAEC05F4, 0xFEFCFF05, 0x0103FCFD);
	r1 = D(r1, s0_0_1, 0x0A0CFF02, 0xF205FDF5, 0x05F909FD, 0xFB040505);
	r2 = D(r2, s0_0_1, 0x03DEF402, 0xEFC702F6, 0x031FED02, 0xF7170007);
	r3 = D(r3, s0_0_1, 0xD5201FF0, 0x09FA1408, 0xFFFC0616, 0xFBECF3F5);
	r4 = D(r4, s0_0_1, 0x11D3B4F0, 0x00060BEE, 0x0018070D, 0x04080202);
	r5 = D(r5, s0_0_1, 0x0102F5F1, 0x011CFC08, 0x0DE30500, 0x03D7EC16);
	r6 = D(r6, s0_0_1, 0xF2FB100C, 0x0207FCFF, 0x02DB17FE, 0xFA09F517);
	r7 = D(r7, s0_0_1, 0x020906F4, 0xDFDA1202, 0x04E3FFF7, 0xFB07FE00);
	r0 = D(r0, s0_0_2, 0x07F6FFF9, 0xF415F60A, 0xFEF70703, 0x04000103);
	r1 = D(r1, s0_0_2, 0x030EF905, 0x00060101, 0xFE0CF501, 0x030302FF);
	r2 = D(r2, s0_0_2, 0xFFFFFF02, 0xFE1CF701, 0xF4050D08, 0xFC10F602);
	r3 = D(r3, s0_0_2, 0x20F1E404, 0x02170310, 0xFCFCFDFE, 0xEE0EFC02);
	r4 = D(r4, s0_0_2, 0x0EF6E40A, 0xFAFEF708, 0xF7FDE8FD, 0x050804FE);
	r5 = D(r5, s0_0_2, 0x05F30304, 0xF8FF0608, 0xF8FC04FB, 0x0708F307);
	r6 = D(r6, s0_0_2, 0xF8000600, 0x0CF70200, 0xFF15FEFD, 0xEF130411);
	r7 = D(r7, s0_0_2, 0x03F6070D, 0x02111101, 0xF9D90204, 0x020B04FE);
	r0 = D(r0, s0_1_0, 0x02030503, 0xF1EC04E8, 0xFFF507FC, 0xFFFCF6EA);
	r1 = D(r1, s0_1_0, 0x091E0B05, 0xFB00FC0A, 0x04170504, 0x01F702FF);
	r2 = D(r2, s0_1_0, 0x05DCF402, 0xE722FADE, 0xF7DE0CF5, 0x06E6F2F8);
	r3 = D(r3, s0_1_0, 0xD9001B11, 0xF1E6F2EC, 0x0DF60C0E, 0x05FA0410);
	r4 = D(r4, s0_1_0, 0xF9D10BF4, 0xE1DD1007, 0x02FFFCFE, 0x0B0601ED);
	r5 = D(r5, s0_1_0, 0x02F3FC04, 0x08DBF0ED, 0x09D10CFA, 0xF5D4F6FA);
	r6 = D(r6, s0_1_0, 0xFCFB050E, 0x000C04FD, 0x0C231100, 0xE80FF32C);
	r7 = D(r7, s0_1_0, 0x0FFDFC0A, 0x052B16FB, 0x0CEAF0CD, 0x06070404);
	r0 = D(r0, s0_1_1, 0x0411F8F0, 0x1D02F4DB, 0x04F60D00, 0x0A0519ED);
	r1 = D(r1, s0_1_1, 0x0015D5F3, 0xF6F70CE5, 0x1902FA02, 0x09F105F1);
	r2 = D(r2, s0_1_1, 0xFC01F41D, 0x03FD0D00, 0xF5E62911, 0x041E001F);
	r3 = D(r3, s0_1_1, 0x0AFFFDE8, 0x2CF0AB0B, 0x09FEF9F7, 0xFC1B0F0B);
	r4 = D(r4, s0_1_1, 0x02EDEB01, 0x0917DCD9, 0x0118E705, 0x1619F100);
	r5 = D(r5, s0_1_1, 0xFE0BE3FB, 0x09E80CE7, 0xFAD9E7F8, 0xFD0FFB14);
	r6 = D(r6, s0_1_1, 0x19F80905, 0xFCEE03EF, 0x12060BE9, 0xD8F3EEFF);
	r7 = D(r7, s0_1_1, 0xF708F10D, 0x18FBE0ED, 0x1803E9C0, 0x02FFFE06);
	r0 = D(r0, s0_1_2, 0xEE00ED03, 0xF3EFED05, 0xFFF809FA, 0x10F9070B);
	r1 = D(r1, s0_1_2, 0x0804E9F1, 0xF7030A04, 0xF701F0FC, 0x130502FE);
	r2 = D(r2, s0_1_2, 0xF802F2FD, 0x19DE03DD, 0xF8F8F1FE, 0x0A06F200);
	r3 = D(r3, s0_1_2, 0xEBFFDCF5, 0x0B17F7EF, 0xEF08F400, 0xF9000E0F);
	r4 = D(r4, s0_1_2, 0x17FFF0FF, 0xFAFEF004, 0xF4FCEB0A, 0xFB0202F8);
	r5 = D(r5, s0_1_2, 0x0809FB05, 0x0502EEF5, 0x04F7FA02, 0x200DF1D6);
	r6 = D(r6, s0_1_2, 0xEF03F8F5, 0x09FA0BFF, 0x0EF914CF, 0xFAF811F1);
	r7 = D(r7, s0_1_2, 0xF9FC060F, 0x000AFD07, 0x0E0F0B14, 0xF9001305);
	r0 = D(r0, s0_2_0, 0x01F802FC, 0x04300301, 0x02F30309, 0xF910FFF1);
	r1 = D(r1, s0_2_0, 0x0B24F318, 0x000F07F5, 0xFBFDFB04, 0xFE060301);
	r2 = D(r2, s0_2_0, 0xFBFEF9F4, 0x0111EF12, 0xF6ECF017, 0x05DFF7E6);
	r3 = D(r3, s0_2_0, 0x19ABFFFD, 0x0DF604E8, 0x0802030D, 0xFFF7020E);
	r4 = D(r4, s0_2_0, 0x08F8FDFB, 0x1B10F60C, 0x0105FFFF, 0x0307FD00);
	r5 = D(r5, s0_2_0, 0x01090310, 0x061E01F4, 0xFFD30BF6, 0x0CCD0016);
	r6 = D(r6, s0_2_0, 0x0104FD0E, 0x03F80007, 0xFDEAF11F, 0x11010AFF);
	r7 = D(r7, s0_2_0, 0xF90E0A02, 0x07C2150A, 0xFC0109DF, 0x08FCFB0D);
	r0 = D(r0, s0_2_1, 0xF6F9F600, 0x1A01010B, 0xF5F40CF6, 0xFD0C020B);
	r1 = D(r1, s0_2_1, 0xF708FA03, 0xF9FBFE0C, 0x0A0000F8, 0x0105F80F);
	r2 = D(r2, s0_2_1, 0xFD06FD17, 0x01F50B11, 0xF0E514DC, 0xFB0627EA);
	r3 = D(r3, s0_2_1, 0x19170D04, 0x1BD6FD03, 0xF407FDFC, 0x000405F0);
	r4 = D(r4, s0_2_1, 0x10F702FF, 0x1A28F2EC, 0x0401FC14, 0xF20FFEE9);
	r5 = D(r5, s0_2_1, 0xFA0DFCFE, 0xFFF5FB0E, 0xFEFD07D1, 0x21170017);
	r6 = D(r6, s0_2_1, 0xF812FE02, 0x150506FF, 0xF417FBEC, 0xF9EFF50D);
	r7 = D(r7, s0_2_1, 0xEDFE140A, 0x1DFEE701, 0x0CFFFAF4, 0x050703EE);
	r0 = D(r0, s0_2_2, 0x00FFFB04, 0x2B05EF0C, 0x040207FA, 0x0009FA10);
	r1 = D(r1, s0_2_2, 0xF5F3FE03, 0x070A02FB, 0xFF05FBFF, 0x060203F9);
	r2 = D(r2, s0_2_2, 0xFEFBFA06, 0x030EF70D, 0x01F00E06, 0xF205FA08);
	r3 = D(r3, s0_2_2, 0x20F8F4FF, 0x0300FDFC, 0xF403F50B, 0x0502FC06);
	r4 = D(r4, s0_2_2, 0x1809FE00, 0x0709FC06, 0xFD02F8F7, 0xF9FD0101);
	r5 = D(r5, s0_2_2, 0x03FEF703, 0x0F08F0FB, 0xF7030B0D, 0x0907F917);
	r6 = D(r6, s0_2_2, 0x0505F80D, 0xFA030106, 0xF8FEFA0E, 0x0DFF08FA);
	r7 = D(r7, s0_2_2, 0xF10A0304, 0xF6F709F0, 0x2212DDFF, 0xF4FF09FE);
	r0 = D(r0, s1_0_0, 0xF6FD0A06, 0xE91405F7, 0xF10006FD, 0x11FBFD07);
	r1 = D(r1, s1_0_0, 0xE70503F9, 0xEFF60300, 0x0603F9FA, 0xF8F9FB00);
	r2 = D(r2, s1_0_0, 0xEB08FAF6, 0x01FA0A0B, 0xECFA05F1, 0xC6020AF2);
	r3 = D(r3, s1_0_0, 0x33190902, 0x1403FEF3, 0xEE18F306, 0x1702F7F8);
	r4 = D(r4, s1_0_0, 0xF6FAFD02, 0xCDE209F5, 0x09FE0306, 0x0006FDFB);
	r5 = D(r5, s1_0_0, 0x13F60509, 0x1BE5FBFD, 0xFE0A0703, 0x18F6FDEE);
	r6 = D(r6, s1_0_0, 0xFAF90CF6, 0xFD020402, 0xDBFC07F3, 0x0BE71107);
	r7 = D(r7, s1_0_0, 0xF9F6150E, 0xBDFC0609, 0x2901F102, 0xFF03FEF7);
	r0 = D(r0, s1_0_1, 0xEE080A03, 0x13FEFF15, 0xF8011002, 0xD801F90D);
	r1 = D(r1, s1_0_1, 0x0BF8FAFD, 0x0C0309FE, 0xE50A0E0D, 0x0DFC050D);
	r2 = D(r2, s1_0_1, 0x95061802, 0xE31AEF0A, 0x180B01E7, 0x0DF50004);
	r3 = D(r3, s1_0_1, 0x184BFEC9, 0xD2FFDEF5, 0xE1F22717, 0xFF0EEE16);
	r4 = D(r4, s1_0_1, 0x020615C4, 0x1B0DF6D6, 0xDD0601E8, 0xED0102FD);
	r5 = D(r5, s1_0_1, 0x0F02F5F3, 0xFDF60DF4, 0x28052906, 0xE6F5E6CA);
	r6 = D(r6, s1_0_1, 0xEE081407, 0xF6F6FFFA, 0xDB10FE18, 0x1FF82810);
	r7 = D(r7, s1_0_1, 0xFDF81B11, 0x0A0421E2, 0x00FBEC00, 0x070708F7);
	r0 = D(r0, s1_0_2, 0xF1FCF307, 0xCA1D131E, 0x0EEE1305, 0x07040403);
	r1 = D(r1, s1_0_2, 0x03010F0A, 0xF008F3F7, 0x12F6EF0D, 0xF2040BF5);
	r2 = D(r2, s1_0_2, 0x00FD23FF, 0xD7FA0A00, 0x0AEE2207, 0x07F2DEF7);
	r3 = D(r3, s1_0_2, 0x42458111, 0x22FC1917, 0xFE0411FF, 0xE9091EFC);
	r4 = D(r4, s1_0_2, 0x0A060DF7, 0xBF108122, 0xE91FF2FC, 0x0806FEFE);
	r5 = D(r5, s1_0_2, 0xF202E4F9, 0x0F0516F4, 0xFB020A03, 0x040747E1);
	r6 = D(r6, s1_0_2, 0xE9002002, 0xF00000FE, 0xFB00131B, 0x2EFC13E4);
	r7 = D(r7, s1_0_2, 0x0AFB0AF8, 0x0FF6811B, 0x00F9FCFE, 0x0D05FFFC);
	r0 = D(r0, s1_1_0, 0x02F9FD03, 0x1CD401F1, 0x0EFB0803, 0xFBF50606);
	r1 = D(r1, s1_1_0, 0xFC0B07E7, 0x1AFE0C06, 0x020107FF, 0x10030007);
	r2 = D(r2, s1_1_0, 0x06EC0A06, 0x1B1003E6, 0x0BED15F3, 0x19FF0600);
	r3 = D(r3, s1_1_0, 0x24F717BC, 0x0C08FCFF, 0x061306EF, 0x00040AF7);
	r4 = D(r4, s1_1_0, 0xF60904ED, 0x120E1BC8, 0x020DFDFA, 0xFE030304);
	r5 = D(r5, s1_1_0, 0xDC0BF8F9, 0x17DB0C0D, 0xF70C0807, 0xF0090DDE);
	r6 = D(r6, s1_1_0, 0x0AFDFFF4, 0x040301FA, 0x091405E1, 0x1BFA0216);
	r7 = D(r7, s1_1_0, 0x0DFBE904, 0x0700FA0B, 0x0C0FFA0D, 0x0408FDF3);
	r0 = D(r0, s1_1_1, 0xFE041D13, 0xE31CFF00, 0x07FC00FC, 0x14FBE8FB);
	r1 = D(r1, s1_1_1, 0x00F7060B, 0x0D0808FF, 0xFBF312FA, 0x07090DFC);
	r2 = D(r2, s1_1_1, 0x0810E8DB, 0x0D1102F4, 0x161810F3, 0x370E100B);
	r3 = D(r3, s1_1_1, 0xEB46F21A, 0xF1FBFAD3, 0xEEFA11F7, 0x240814F4);
	r4 = D(r4, s1_1_1, 0x1005F8D4, 0x050C2500, 0xFFF40E04, 0xEBFE01FA);
	r5 = D(r5, s1_1_1, 0x04E20305, 0xECFCF3EC, 0x080113E0, 0x2FEAF9D0);
	r6 = D(r6, s1_1_1, 0x060CF8F0, 0xFCFA0600, 0x03F014F2, 0xFE04FD07);
	r7 = D(r7, s1_1_1, 0xF6FE2FF9, 0xF70626E2, 0xF907D5EB, 0xFDF71503);
	r0 = D(r0, s1_1_2, 0x0507F7F2, 0x19EC19ED, 0x02FC1208, 0xFBFEEE0D);
	r1 = D(r1, s1_1_2, 0x080FC513, 0x0D02070C, 0xFCFD16FE, 0xFFFF2B0B);
	r2 = D(r2, s1_1_2, 0xF0FFFBDD, 0x180E1FFB, 0x0ADEFC28, 0x1B00FC18);
	r3 = D(r3, s1_1_2, 0x2216E1DB, 0x0AF727FF, 0x0805FA02, 0xF80B36FF);
	r4 = D(r4, s1_1_2, 0x0404F0C7, 0x0AF3EE06, 0xFE0814D6, 0xF304E9FB);
	r5 = D(r5, s1_1_2, 0x0BFEEF05, 0xFB04FE0D, 0xF606F3E0, 0xF8043ED9);
	r6 = D(r6, s1_1_2, 0x0302EAFD, 0xFAF903F6, 0x2203FF28, 0xFC07F122);
	r7 = D(r7, s1_1_2, 0xF1F1FF08, 0x100A00AB, 0x14FF2911, 0xFBFFE701);
	r0 = D(r0, s1_2_0, 0x00F800FE, 0x05DDFFFF, 0xFFF9FE00, 0x03F9030B);
	r1 = D(r1, s1_2_0, 0x00EA0109, 0x07EEFE07, 0xFD060301, 0xFBE9FE02);
	r2 = D(r2, s1_2_0, 0x02F703F7, 0xFC030DEA, 0x09F6F00C, 0x0208F402);
	r3 = D(r3, s1_2_0, 0x150DEDF6, 0xF414090A, 0xFFFC04FB, 0xFC1301FA);
	r4 = D(r4, s1_2_0, 0x070001F7, 0x0DB6F3F4, 0x01FD0400, 0x000004FF);
	r5 = D(r5, s1_2_0, 0x04FD0500, 0xF8C5FD09, 0xFD1208EF, 0x0B1B0001);
	r6 = D(r6, s1_2_0, 0x08F003FC, 0x06100600, 0xF8F20105, 0xFFEDFAF0);
	r7 = D(r7, s1_2_0, 0xFEFE06FB, 0x02240612, 0x0A1601F3, 0xFBFA0201);
	r0 = D(r0, s1_2_1, 0x0104F3FF, 0x07F709E9, 0x02F1070C, 0x0E090606);
	r1 = D(r1, s1_2_1, 0x0B1506FD, 0x02060602, 0x02FD03FD, 0x0B07FDFE);
	r2 = D(r2, s1_2_1, 0xF8010B01, 0x10FBEF06, 0x03D30308, 0x06EDFDFD);
	r3 = D(r3, s1_2_1, 0xC310120C, 0x1807DFEF, 0xFB0206FD, 0x07F805FA);
	r4 = D(r4, s1_2_1, 0x01FC0500, 0xE1FF18F5, 0x06FDFBFB, 0xF9030800);
	r5 = D(r5, s1_2_1, 0xFC05FFFD, 0x06F90DF9, 0x020611F0, 0x06EAF3EB);
	r6 = D(r6, s1_2_1, 0xF20908FE, 0xFBFE0004, 0x0D1001FE, 0xFE05FF07);
	r7 = D(r7, s1_2_1, 0xFEEF2106, 0x0BE6F70B, 0xFAF0DC0A, 0xF80A0AFB);
	r0 = D(r0, s1_2_2, 0xFF04EF0F, 0xFE0CE005, 0xFFF316FE, 0xF908FE0E);
	r1 = D(r1, s1_2_2, 0xF7FA1203, 0xF9001207, 0x0302FA01, 0x02FE08FF);
	r2 = D(r2, s1_2_2, 0x05051207, 0x04082200, 0x02F60607, 0xF6000C0A);
	r3 = D(r3, s1_2_2, 0x2BF4A8E6, 0xFA071BF1, 0x03FDF606, 0xF80B100B);
	r4 = D(r4, s1_2_2, 0xFF011101, 0x1006B4F5, 0xF60324FC, 0x0302FF07);
	r5 = D(r5, s1_2_2, 0x0207F40E, 0x03F2FA07, 0x0AF7B1E9, 0xFF072CFA);
	r6 = D(r6, s1_2_2, 0x0C0624FB, 0x04FC05FB, 0x03001204, 0x03F921FE);
	r7 = D(r7, s1_2_2, 0x02060C01, 0xF3FC8AE6, 0x05EEEE0D, 0x00FEF306);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF8FA0106, 0xEB1317F9, 0xFFFF0403, 0x110105FF);
	r1 = D(r1, s0_0_0, 0xFCEFFEFD, 0xFAFAFF00, 0xF5030A05, 0x040813FF);
	r2 = D(r2, s0_0_0, 0x13F4F708, 0x0E06EB20, 0xF9F4F401, 0xE31710FD);
	r3 = D(r3, s0_0_0, 0xEDADEC06, 0x0A0E01FC, 0xFBFA280B, 0x090400F9);
	r4 = D(r4, s0_0_0, 0xF407EF11, 0x9714FC06, 0x06E30106, 0x060008FD);
	r5 = D(r5, s0_0_0, 0xFF08ECFE, 0xEE05F6FD, 0xF8FB1101, 0x0DF00100);
	r6 = D(r6, s0_0_0, 0xF1F7F708, 0xF904F6FA, 0xFD050513, 0x09E3DAF2);
	r7 = D(r7, s0_0_0, 0xFFFDEEF2, 0xFF26FD09, 0x39F911FF, 0x01FDFEFF);
	r0 = D(r0, s0_0_1, 0x00FFF7FF, 0x12F21013, 0x0200F803, 0x0B0A0508);
	r1 = D(r1, s0_0_1, 0xF6F803FB, 0x03FDE4FF, 0xFA0B11F2, 0xF005F806);
	r2 = D(r2, s0_0_1, 0x1106F50D, 0x1C0008F6, 0xF2090A01, 0xEE08FD0C);
	r3 = D(r3, s0_0_1, 0x12A0EA32, 0xF8031CF2, 0xF200F102, 0x0A0E120A);
	r4 = D(r4, s0_0_1, 0x070613F1, 0x0CF82005, 0xE809E101, 0x07030401);
	r5 = D(r5, s0_0_1, 0x040202FA, 0xED04EF04, 0x17FC1C0A, 0x0011EEFF);
	r6 = D(r6, s0_0_1, 0x030707FC, 0x04FFF908, 0x100519F4, 0x01F8F006);
	r7 = D(r7, s0_0_1, 0x09F10212, 0xE9F70F00, 0xE2170B00, 0xFA05FBF7);
	r0 = D(r0, s0_0_2, 0x0A0205F8, 0x07F8F7F0, 0x060004FF, 0xF80A06FF);
	r1 = D(r1, s0_0_2, 0xF2F8F503, 0xFA00FBFA, 0xFD00FB04, 0xFCFE07FF);
	r2 = D(r2, s0_0_2, 0x03FBF8F0, 0xEA09FDF1, 0x10FFFB0A, 0xF502FC02);
	r3 = D(r3, s0_0_2, 0xF2E8EFF8, 0xEFFEF20D, 0x0503FD04, 0xF5ED0408);
	r4 = D(r4, s0_0_2, 0x04030605, 0x00FCF9FD, 0xF4F811F8, 0xFCFF0B03);
	r5 = D(r5, s0_0_2, 0x0802FF03, 0x010207FA, 0x0EFD00FE, 0x08F61008);
	r6 = D(r6, s0_0_2, 0xFB03030A, 0x030003FF, 0xDB02F3F0, 0x0517F006);
	r7 = D(r7, s0_0_2, 0x00F3F9F8, 0xFDF6F405, 0xFBFAF90F, 0x03030806);
	r0 = D(r0, s0_1_0, 0xFDFB0010, 0x00120714, 0x05000114, 0x050201F8);
	r1 = D(r1, s0_1_0, 0x01D1FBF4, 0xF80501F5, 0xFF030301, 0xF9FC0DF4);
	r2 = D(r2, s0_1_0, 0x0CFBFD03, 0x08D0ECEB, 0x011220ED, 0xF115D018);
	r3 = D(r3, s0_1_0, 0x26A6D80E, 0xFC0414FA, 0xFFE4060A, 0xFFFADBD1);
	r4 = D(r4, s0_1_0, 0xFA0301FB, 0xC5F9ED14, 0xFE05F6FB, 0x08F90B07);
	r5 = D(r5, s0_1_0, 0xEE0EEAF5, 0x0413170C, 0xF2F61C18, 0xF9EFFFF3);
	r6 = D(r6, s0_1_0, 0xFB0CFBF7, 0x04FDED0B, 0x0FC90EDD, 0x201DF4ED);
	r7 = D(r7, s0_1_0, 0x09131902, 0xE702FDFB, 0xF7FB15FE, 0xFDFEFEFF);
	r0 = D(r0, s0_1_1, 0x0608101C, 0xEFE6C911, 0x05FE2209, 0x0CFA2306);
	r1 = D(r1, s0_1_1, 0xFFD7E3FD, 0x0400E8EB, 0x04FADA31, 0x07FADE18);
	r2 = D(r2, s0_1_1, 0xF91728E8, 0xF61300EB, 0x0A0416DD, 0xEBF328F3);
	r3 = D(r3, s0_1_1, 0x12F7E1F6, 0x1805ED26, 0x09F4EF11, 0x01F511E0);
	r4 = D(r4, s0_1_1, 0xFA102ABF, 0x0E021823, 0x05F60117, 0x04FFF81A);
	r5 = D(r5, s0_1_1, 0x03FEFAD9, 0xFE07F10D, 0xF9FCF81E, 0xF40C15EB);
	r6 = D(r6, s0_1_1, 0xFAF7F75F, 0x00010515, 0x0814C91B, 0x051D002D);
	r7 = D(r7, s0_1_1, 0xF808FB1D, 0xE5030611, 0x1AFBD4F6, 0x08FF5609);
	r0 = D(r0, s0_1_2, 0xFA0904F7, 0xFF1808D7, 0x09FE0306, 0x0FFCE11A);
	r1 = D(r1, s0_1_2, 0xEADF12F6, 0x05FDEDF9, 0xFC090EEF, 0xFF04040C);
	r2 = D(r2, s0_1_2, 0xE9FD030E, 0x23FF0EF6, 0xD7EA0306, 0xE9010B02);
	r3 = D(r3, s0_1_2, 0x16EE06FA, 0x0A07210C, 0xF70608F5, 0xF819F9D7);
	r4 = D(r4, s0_1_2, 0xE417FB08, 0xFA11F8E0, 0x0E031C0B, 0xF8010311);
	r5 = D(r5, s0_1_2, 0xFF0CFBF3, 0x0DEF0904, 0x070BF50E, 0xF5F6100A);
	r6 = D(r6, s0_1_2, 0x0AFE00F0, 0x0301EF11, 0x12DEF901, 0x01CDFEEE);
	r7 = D(r7, s0_1_2, 0x0702F720, 0x020613F6, 0x201A1107, 0xF901FAFC);
	r0 = D(r0, s0_2_0, 0x0406FF0A, 0x07F3F9F2, 0xF7FCFB0B, 0x0103FA16);
	r1 = D(r1, s0_2_0, 0x05F71502, 0x02F80FF9, 0x000709D3, 0x07FE03F6);
	r2 = D(r2, s0_2_0, 0x03F6EF34, 0xF8F713D8, 0x0616F516, 0x03FFEF07);
	r3 = D(r3, s0_2_0, 0xF4EFFA81, 0xF2FDFDCA, 0x04000C38, 0x000BF4DD);
	r4 = D(r4, s0_2_0, 0xFD040340, 0x13EC1C1E, 0x040603D1, 0x03FCFF2F);
	r5 = D(r5, s0_2_0, 0xFB090E81, 0x06FDFE81, 0x05020C3D, 0xFB00F8FE);
	r6 = D(r6, s0_2_0, 0x0008063A, 0xFA02F009, 0x09071126, 0x06F2F643);
	r7 = D(r7, s0_2_0, 0xF40CFD7F, 0xFEF801BB, 0xF803F781, 0x0204FEF1);
	r0 = D(r0, s0_2_1, 0x05FC1F36, 0x13FC1723, 0xFD05F9EC, 0xFF020607);
	r1 = D(r1, s0_2_1, 0x03E81FBB, 0x09FAF7D9, 0x0005F2D6, 0x01F814F3);
	r2 = D(r2, s0_2_1, 0xFD02FC0C, 0x00FFFFE4, 0xF5E5AC25, 0xFFEDE441);
	r3 = D(r3, s0_2_1, 0xF523E241, 0xF50EE381, 0x01EEFC22, 0xFC06FA20);
	r4 = D(r4, s0_2_1, 0x08F80918, 0x06DA0B1C, 0x07F8041C, 0xFD090F0A);
	r5 = D(r5, s0_2_1, 0x19F41403, 0x05080E25, 0xEF1BE101, 0xFAF2DEDD);
	r6 = D(r6, s0_2_1, 0x09FE0B7F, 0xFC03E612, 0xF6E1F605, 0x05E80A65);
	r7 = D(r7, s0_2_1, 0xFC0FF211, 0x00D1E523, 0xFD09EDA5, 0xFB03FDE5);
	r0 = D(r0, s0_2_2, 0x0506FEBB, 0x0AE607F8, 0xFAF90315, 0x07FE032B);
	r1 = D(r1, s0_2_2, 0x06FEFE24, 0x01FB0AD1, 0xFF050614, 0x00F500E4);
	r2 = D(r2, s0_2_2, 0x09010DEA, 0x06E81226, 0x18E9027F, 0x08DA13C6);
	r3 = D(r3, s0_2_2, 0x02EF0FC8, 0x04F21123, 0x0002FD37, 0xFFFD0977);
	r4 = D(r4, s0_2_2, 0x01FBFBD7, 0x0419F9A6, 0xFDF00D3D, 0x000A0240);
	r5 = D(r5, s0_2_2, 0x0004FD81, 0x0B05091D, 0xE41CF6CA, 0x08FB0013);
	r6 = D(r6, s0_2_2, 0xFA090E1F, 0xF9FAFBFD, 0xECC803FE, 0x09E5FF78);
	r7 = D(r7, s0_2_2, 0xFE05FBDD, 0xFFF20599, 0x18F6F715, 0xF90CF6FA);
	r0 = D(r0, s1_0_0, 0x0101F900, 0x060603F8, 0xFCFF00FF, 0xFCFCFD05);
	r1 = D(r1, s1_0_0, 0x03080208, 0x050308FE, 0xF809060A, 0xFEFFFBFD);
	r2 = D(r2, s1_0_0, 0x00FC100A, 0xF7F50C08, 0x03FCFCFF, 0x031C0401);
	r3 = D(r3, s1_0_0, 0x0CB305CC, 0xF4FAF4FE, 0x0B1AFBFA, 0xFE010C07);
	r4 = D(r4, s1_0_0, 0xF7FB0105, 0x11E810ED, 0xFFFD0400, 0xFB05FC05);
	r5 = D(r5, s1_0_0, 0x02FAF709, 0xF7010501, 0xFFFD0104, 0xFCFCEE07);
	r6 = D(r6, s1_0_0, 0xF8F819FE, 0x0002FF02, 0x09FB0200, 0xFFE50408);
	r7 = D(r7, s1_0_0, 0xFDF8F3FC, 0xF6FEFDE3, 0xF400F614, 0x0205FEFD);
	r0 = D(r0, s1_0_1, 0xFFFBF100, 0xFAE60CF8, 0xF7F3FCFE, 0xF906F206);
	r1 = D(r1, s1_0_1, 0xF80518FE, 0xFCFF0003, 0xFF0BFEFA, 0xFFF8FDF4);
	r2 = D(r2, s1_0_1, 0xFEFBFB13, 0xED20CF08, 0x0105FCF7, 0x03E51301);
	r3 = D(r3, s1_0_1, 0xBB95F9C6, 0x0FEA0BF8, 0x0204ECFC, 0xDEFDF40A);
	r4 = D(r4, s1_0_1, 0xF6FF0810, 0x03210302, 0xF6FCFFDE, 0xFCFF0403);
	r5 = D(r5, s1_0_1, 0x070D0F02, 0xEBEDFDF6, 0xF8FFF401, 0xF2F91302);
	r6 = D(r6, s1_0_1, 0x07FEF907, 0xFD03F3FD, 0xFD04DB01, 0x09F401FC);
	r7 = D(r7, s1_0_1, 0xFFEB05FE, 0x1AF5F3FF, 0xF6F104FA, 0x00FC0604);
	r0 = D(r0, s1_0_2, 0x00FAF7FD, 0x02F1FF04, 0x08FF01FC, 0xFC0DFD06);
	r1 = D(r1, s1_0_2, 0xFE0404FA, 0x05FA07FD, 0xFB030205, 0x03FEFFFF);
	r2 = D(r2, s1_0_2, 0x03F9010A, 0xC8EF0DF9, 0x011401FD, 0xF8230B00);
	r3 = D(r3, s1_0_2, 0x028109B8, 0x10F412F6, 0xFDFD1401, 0x1D08060A);
	r4 = D(r4, s1_0_2, 0xFEE90405, 0x10F1020D, 0xF8ED10F3, 0xF801FDFF);
	r5 = D(r5, s1_0_2, 0xFF050102, 0xF3F80C0B, 0xFDFE0307, 0x0910F307);
	r6 = D(r6, s1_0_2, 0xF4F912FE, 0xFC04F8FC, 0xF3E4150C, 0xF313F114);
	r7 = D(r7, s1_0_2, 0xFDFDF503, 0x15D708FD, 0x00FA0CFC, 0xF6FFFEFB);
	r0 = D(r0, s1_1_0, 0x02FA23FD, 0xFEF1E709, 0xFFFDFB03, 0xF309F40E);
	r1 = D(r1, s1_1_0, 0xF80308E7, 0xFE03FBFA, 0xFBFC0802, 0x000EF901);
	r2 = D(r2, s1_1_0, 0x04040118, 0xEFEDF805, 0xEDFC090A, 0x11DCECD9);
	r3 = D(r3, s1_1_0, 0x24CE0BE5, 0xF10EEAFF, 0xFBECF3FF, 0x05F5010F);
	r4 = D(r4, s1_1_0, 0x01FB0B09, 0x0398D1E5, 0x00F8F9F6, 0x08000508);
	r5 = D(r5, s1_1_0, 0xF5F91808, 0xFBEC1100, 0x0F0D00F8, 0x040A0FFA);
	r6 = D(r6, s1_1_0, 0x06100FF1, 0x01F40D02, 0x060EFEF8, 0xF5130E01);
	r7 = D(r7, s1_1_0, 0xFE089BFC, 0xFFF506AD, 0xEC05F71A, 0x04FE1302);
	r0 = D(r0, s1_1_1, 0x0F0EDDF9, 0xFB1202F4, 0xF5F8EA00, 0xE4070E0C);
	r1 = D(r1, s1_1_1, 0xFB04EFF6, 0x08082005, 0x1207F5F7, 0x0EFAE9F6);
	r2 = D(r2, s1_1_1, 0xD3032404, 0xDCE8F7F6, 0xEFF5BCFE, 0xF8F3D1F5);
	r3 = D(r3, s1_1_1, 0x1CD0EB17, 0x17FBFBE5, 0x13F3F0EF, 0xE60FE511);
	r4 = D(r4, s1_1_1, 0xEFFFF512, 0x26E1EFF2, 0x0A1303EC, 0xFB0C2305);
	r5 = D(r5, s1_1_1, 0x061B3C1D, 0xF8FBE4F8, 0xFBF9FE13, 0x0D09E40B);
	r6 = D(r6, s1_1_1, 0xF401F5F4, 0x02F80409, 0x15F0D2FF, 0xD6E2A4EF);
	r7 = D(r7, s1_1_1, 0xE9EFE313, 0x18E9F0CA, 0xDA0606F9, 0x01FAFB05);
	r0 = D(r0, s1_1_2, 0xF10A0101, 0xF7F707EE, 0x05FDF8F8, 0xF3F2F910);
	r1 = D(r1, s1_1_2, 0xE7E9FBEA, 0xFC000800, 0xE6030BFF, 0xFDF2FBF5);
	r2 = D(r2, s1_1_2, 0x1B05F615, 0xA1F9F7FE, 0xF4DD0801, 0x0A120802);
	r3 = D(r3, s1_1_2, 0x2EBEF7B1, 0xFAFF05E9, 0xF9FC0101, 0xB90CE315);
	r4 = D(r4, s1_1_2, 0xFAFB0206, 0xFF070C04, 0xFE0500F3, 0xF8FE0907);
	r5 = D(r5, s1_1_2, 0xF1F803FF, 0x0404F7F0, 0xF901F608, 0x0A02F5F9);
	r6 = D(r6, s1_1_2, 0xFDF806ED, 0x13060505, 0x030101DF, 0xFFEE03F4);
	r7 = D(r7, s1_1_2, 0x03FAFC0E, 0xF9F1FD02, 0xE40BF1F2, 0xF5FE0A02);
	r0 = D(r0, s1_2_0, 0x0504FF04, 0x07E00002, 0xFEF505FD, 0xFCFB0805);
	r1 = D(r1, s1_2_0, 0xF819F7F7, 0x05FC0805, 0x010DF902, 0xFE01F8F9);
	r2 = D(r2, s1_2_0, 0xEFED0A10, 0xEE12FD0E, 0x06F8FCF6, 0x0BF0FB05);
	r3 = D(r3, s1_2_0, 0x0DCAF501, 0xF0F1E208, 0xFD03FEF3, 0xFF0A0701);
	r4 = D(r4, s1_2_0, 0x02EB0D07, 0x17E20CFD, 0x020BFB02, 0xFCF4FE03);
	r5 = D(r5, s1_2_0, 0x0C0FF9F8, 0x03DF1507, 0x05E82101, 0x02F80C05);
	r6 = D(r6, s1_2_0, 0x06FB16FF, 0x06040200, 0xF61A10E8, 0x05E20C01);
	r7 = D(r7, s1_2_0, 0xF9030BFE, 0x0FEEF604, 0x05E9ED11, 0x00FF0203);
	r0 = D(r0, s1_2_1, 0x120409FF, 0x0AE8DD02, 0xF8FF06FF, 0xFF02FB07);
	r1 = D(r1, s1_2_1, 0x08F20201, 0x09F70F05, 0x02FCF9F9, 0x0CFCF6F8);
	r2 = D(r2, s1_2_1, 0xEAF80211, 0xE5F30D01, 0xFCFBF3E8, 0xE4F10E10);
	r3 = D(r3, s1_2_1, 0x05FEF5A9, 0xF1F715ED, 0x0603FEF9, 0xFDFC10FF);
	r4 = D(r4, s1_2_1, 0x09F50B03, 0xEFDB02E2, 0x000308F8, 0xFC04F90B);
	r5 = D(r5, s1_2_1, 0x0EFC04F5, 0xFFE909FE, 0xF7F5EE0A, 0x0606F10E);
	r6 = D(r6, s1_2_1, 0x02000402, 0xF70CF7FF, 0xF6040CE8, 0xFBF71AFD);
	r7 = D(r7, s1_2_1, 0x0F06110C, 0x081C0BCD, 0xEC041E05, 0x0204F40A);
	r0 = D(r0, s1_2_2, 0xF8FA0AFF, 0xFC0BE6E7, 0x0502FFFB, 0xEA04FA10);
	r1 = D(r1, s1_2_2, 0xF6F90702, 0x030305F9, 0x04FFFB05, 0xF703FFF7);
	r2 = D(r2, s1_2_2, 0xFBFFFC11, 0x18FB0EFC, 0xF8090102, 0xF51100FD);
	r3 = D(r3, s1_2_2, 0xE7CAF6E3, 0xF8F7E9E1, 0xF8020806, 0xEFFE0D0A);
	r4 = D(r4, s1_2_2, 0x0CFEF908, 0xEEFF0BF7, 0xFFF90AF4, 0xF1FD040B);
	r5 = D(r5, s1_2_2, 0xF303FCFC, 0xFCFCFEF8, 0x0201E619, 0x0BF40906);
	r6 = D(r6, s1_2_2, 0x02FD0BF6, 0x0200FCFC, 0x0EF70702, 0xFA0A06FA);
	r7 = D(r7, s1_2_2, 0xF40CFD0D, 0xF70B0DEB, 0xF7FF00E8, 0xF503F40B);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x08F9FE01, 0x03F1FB05, 0x0507FFFE, 0x02F009FD);
	r1 = D(r1, s0_0_0, 0xFD08F708, 0xF6FDFA00, 0x0318FFF7, 0xFA0000FA);
	r2 = D(r2, s0_0_0, 0x07FE030B, 0x0AF8180A, 0x04F5150B, 0x000FF1FA);
	r3 = D(r3, s0_0_0, 0xBDDE0728, 0xF40312FE, 0x0205FFF1, 0x05F70704);
	r4 = D(r4, s0_0_0, 0x0AF5FE06, 0x13F0EB04, 0x010206FE, 0x02050201);
	r5 = D(r5, s0_0_0, 0x08F60205, 0x19F50602, 0x06F901FD, 0x00F40604);
	r6 = D(r6, s0_0_0, 0x07FFF503, 0x030E02FF, 0xF8F511FA, 0x060FFA03);
	r7 = D(r7, s0_0_0, 0xFA070C00, 0xF30F1305, 0xF1EA07FC, 0x04060300);
	r0 = D(r0, s0_0_1, 0x0C050205, 0x0401F308, 0xF601FDFE, 0x06FA0700);
	r1 = D(r1, s0_0_1, 0xFFF9070D, 0xFF0403FD, 0xFF24FFFD, 0x03060BF9);
	r2 = D(r2, s0_0_1, 0x0CE7F703, 0x09111BFF, 0x01F0FAFC, 0x0706F6FA);
	r3 = D(r3, s0_0_1, 0xC5C300ED, 0xE20403F9, 0xF0080D08, 0x07D60203);
	r4 = D(r4, s0_0_1, 0xFED7F5DB, 0x04F4EEF3, 0xF9F9021A, 0xFF030506);
	r5 = D(r5, s0_0_1, 0xF8F8FA00, 0xF0FA0C0F, 0xF503F80A, 0x02E9F0F4);
	r6 = D(r6, s0_0_1, 0x0126E702, 0x05200808, 0x0112FB08, 0xFBF61202);
	r7 = D(r7, s0_0_1, 0x0EED0A08, 0xFAFDFDED, 0xFB10F9FD, 0x04FDFDFF);
	r0 = D(r0, s0_0_2, 0x0404FDF6, 0x02FD020B, 0xFCFE06F7, 0x020906FA);
	r1 = D(r1, s0_0_2, 0x030200F6, 0xFAF8FAFF, 0xFA15FD05, 0xFEF0FCFF);
	r2 = D(r2, s0_0_2, 0x170005F6, 0x1A00FB20, 0x04FCFF09, 0xFD020419);
	r3 = D(r3, s0_0_2, 0x00F0E220, 0xFEFF0D03, 0x0600FA0B, 0x0EE6FA02);
	r4 = D(r4, s0_0_2, 0xFFFB07F0, 0x070A07EF, 0xFB12DB0C, 0x03080300);
	r5 = D(r5, s0_0_2, 0x03FDFB04, 0xFB06FA09, 0x07FF0904, 0xFBFD06E9);
	r6 = D(r6, s0_0_2, 0xFE090C05, 0x011109F9, 0x1418F804, 0xFB071405);
	r7 = D(r7, s0_0_2, 0x0FFBFEF1, 0x0EEF0B0E, 0xFCFDFF09, 0xF9FF02FF);
	r0 = D(r0, s0_1_0, 0x0EEDF705, 0x0AF4ECFB, 0x0101F5FD, 0x06FEFBFB);
	r1 = D(r1, s0_1_0, 0x01EC050C, 0xFA16F9FC, 0xFF020300, 0xF30AFBFD);
	r2 = D(r2, s0_1_0, 0x1205FB06, 0x15E30F08, 0xFE160008, 0xECF9F0F9);
	r3 = D(r3, s0_1_0, 0xDBF1DF02, 0xF8F32D02, 0xF80CF703, 0x1B04FFF9);
	r4 = D(r4, s0_1_0, 0x00020208, 0xDE0A0418, 0xFAF70509, 0x04FAFFFD);
	r5 = D(r5, s0_1_0, 0x0EF90C0D, 0x05FEF5F7, 0xF10CFE01, 0xF50A0DFD);
	r6 = D(r6, s0_1_0, 0x03EA02FD, 0x050B0400, 0x1207ECFE, 0xEBF3FEF2);
	r7 = D(r7, s0_1_0, 0x0BF7E6FD, 0xF4EC1E18, 0xFCFD1700, 0x0801FC07);
	r0 = D(r0, s0_1_1, 0xF424FBF7, 0xF2E90624, 0x062BFEFB, 0x11F405FC);
	r1 = D(r1, s0_1_1, 0xE111E9F9, 0x07EB1C00, 0xEC240109, 0xDE070B12);
	r2 = D(r2, s0_1_1, 0x18E4FD21, 0x0A09F6F1, 0x061FE116, 0x0A1211F4);
	r3 = D(r3, s0_1_1, 0x9D19EDF9, 0xC202EE00, 0xFCEA1111, 0x072407FD);
	r4 = D(r4, s0_1_1, 0xFF0AF2D7, 0xFAE21EE8, 0xF60BF5FF, 0x0DDC220D);
	r5 = D(r5, s0_1_1, 0xF2EDF2EE, 0xE2030803, 0xF9DA1C09, 0xFFF7FC0E);
	r6 = D(r6, s0_1_1, 0xFFF41807, 0x11EF09FC, 0xDCFDE8FB, 0x0224140C);
	r7 = D(r7, s0_1_1, 0x02F3FDFB, 0xDB1FB5F5, 0x0815F6F2, 0x100805FD);
	r0 = D(r0, s0_1_2, 0xF709FCFC, 0x0001F5F9, 0x010805EC, 0x03F011ED);
	r1 = D(r1, s0_1_2, 0x080CEF12, 0xFA020206, 0xFB05FD04, 0x00F8FEFB);
	r2 = D(r2, s0_1_2, 0x030204FF, 0x011212EA, 0x1301E81D, 0x03FBED11);
	r3 = D(r3, s0_1_2, 0x0C21FAC3, 0x07200224, 0x01FDFF09, 0x0103F6AF);
	r4 = D(r4, s0_1_2, 0xFD0404BB, 0x05F8E90F, 0xF907E812, 0xFF06F705);
	r5 = D(r5, s0_1_2, 0x06FCEC0F, 0x01FB1904, 0xF6FA09FD, 0xED0F0AF2);
	r6 = D(r6, s0_1_2, 0xFB080203, 0x0107FBF9, 0x0DF1FDC6, 0x12FD0214);
	r7 = D(r7, s0_1_2, 0x0AF500E2, 0x04EEF00F, 0xF4FD1DF7, 0x06F3050D);
	r0 = D(r0, s0_2_0, 0x0B050606, 0x0E030C0B, 0xF90004FB, 0x02FD07FA);
	r1 = D(r1, s0_2_0, 0x01F70AF6, 0xFE04F7FC, 0xFEFEFCFA, 0x00FDF7F7);
	r2 = D(r2, s0_2_0, 0x0E08F9FD, 0x03F6F204, 0xE6E6FEFC, 0xEE08FCFD);
	r3 = D(r3, s0_2_0, 0xEC16221F, 0xFC0AFDFA, 0x00FDFFF8, 0xFC02FE0A);
	r4 = D(r4, s0_2_0, 0x0208F107, 0x0A05E5EF, 0xFF0605FA, 0x030A0404);
	r5 = D(r5, s0_2_0, 0xFEFB0AFE, 0x070909FD, 0xFA03FB05, 0xFC06F303);
	r6 = D(r6, s0_2_0, 0xF0020903, 0xFF00FF07, 0xF1F9FB03, 0x00FDEA09);
	r7 = D(r7, s0_2_0, 0x02FC03FF, 0xF903F617, 0x0304FCF8, 0x06080607);
	r0 = D(r0, s0_2_1, 0x0209F0FC, 0x000AF90C, 0xFFFE05F4, 0xFD0CFBFD);
	r1 = D(r1, s0_2_1, 0xFC040700, 0xFF04FCFF, 0xFF02FC05, 0xF6010002);
	r2 = D(r2, s0_2_1, 0x0D02FB07, 0x01091D08, 0xAE0703F8, 0x080C06F4);
	r3 = D(r3, s0_2_1, 0xCAE7331C, 0xE9F00FFD, 0x04000518, 0xFC0AF8F1);
	r4 = D(r4, s0_2_1, 0xFDFDF7F5, 0xFDFFF5D7, 0xFF0CF5FC, 0x01F70400);
	r5 = D(r5, s0_2_1, 0xF814FCFA, 0x08FEEB09, 0x09F9F90C, 0xF404FBF4);
	r6 = D(r6, s0_2_1, 0xF606FF08, 0x02FC07F8, 0xF30118FE, 0xFA02E6FB);
	r7 = D(r7, s0_2_1, 0xFAEB02FA, 0x0D0508E7, 0x010AFBEB, 0x03F90606);
	r0 = D(r0, s0_2_2, 0xFDFDFBFF, 0x0EFE07EB, 0x050006FF, 0x06FF03F8);
	r1 = D(r1, s0_2_2, 0x010104FB, 0xFFFFFD00, 0xFC06FD00, 0xFE00FEFC);
	r2 = D(r2, s0_2_2, 0xFBFFFEFA, 0xF709FAFD, 0x0AFD0F00, 0xFAF507FA);
	r3 = D(r3, s0_2_2, 0xFF16E926, 0x061317F5, 0x03000BFD, 0x0003F602);
	r4 = D(r4, s0_2_2, 0xFEFA03CC, 0xFBFEF3FE, 0x06FBF505, 0xFFFE0001);
	r5 = D(r5, s0_2_2, 0x0006FBFE, 0x0A0008DF, 0x00FC00E4, 0x0DFCF310);
	r6 = D(r6, s0_2_2, 0xFCFBF603, 0x01010604, 0xF20BF40B, 0xFC010FF3);
	r7 = D(r7, s0_2_2, 0x09F300FF, 0x090B020B, 0xFA1907ED, 0xFFF90301);
	r0 = D(r0, s1_0_0, 0x05010AFA, 0xF109FF11, 0x00F80203, 0x030305F8);
	r1 = D(r1, s1_0_0, 0xF90CF705, 0xFD030700, 0xFFFDF0FD, 0x0100FEFC);
	r2 = D(r2, s1_0_0, 0x04010600, 0xF70805FB, 0x10FF0800, 0xFFFBFD09);
	r3 = D(r3, s1_0_0, 0x0911021E, 0xE0090D00, 0x07EBEC05, 0x08F705F3);
	r4 = D(r4, s1_0_0, 0x00080CED, 0x251FDEF7, 0x060E0105, 0x00FCFAFE);
	r5 = D(r5, s1_0_0, 0xFC070C04, 0x090E080E, 0x04F8F506, 0x0107FAF0);
	r6 = D(r6, s1_0_0, 0x0E070604, 0xFF02FFFD, 0x0DE1FBF7, 0x0B091C0F);
	r7 = D(r7, s1_0_0, 0x0EFE09FE, 0x060B090A, 0xED18FCFC, 0x0401FC02);
	r0 = D(r0, s1_0_1, 0x04FF0DF3, 0xF8FAEE02, 0x0C020404, 0xF8FF0E01);
	r1 = D(r1, s1_0_1, 0xF906F802, 0xFBFCF700, 0x0002EE01, 0x0001FD04);
	r2 = D(r2, s1_0_1, 0xF50207FE, 0xF501F1F6, 0x0FFF00F6, 0xFEFB05F7);
	r3 = D(r3, s1_0_1, 0xB8F1FC1E, 0xFE06FB0E, 0x18F9E1F1, 0xF0FD0406);
	r4 = D(r4, s1_0_1, 0xFA1001F6, 0xFDF31103, 0x08040AEE, 0x00000904);
	r5 = D(r5, s1_0_1, 0xF3FB02FA, 0xEC0006FB, 0x0400FCF7, 0xEC1009FA);
	r6 = D(r6, s1_0_1, 0xFD000D04, 0x040208FF, 0x080FF7FF, 0xCD070D02);
	r7 = D(r7, s1_0_1, 0x0B041001, 0x0A0CF305, 0x0EF9000B, 0x00FA04FE);
	r0 = D(r0, s1_0_2, 0xF9030AFF, 0xED0F1704, 0x04FF0001, 0xF8FBFDF1);
	r1 = D(r1, s1_0_2, 0x21F7F309, 0xF5060705, 0x020300FB, 0xFEFFFCFD);
	r2 = D(r2, s1_0_2, 0xFC09F3FC, 0xF10706FE, 0xFF00FB01, 0x070300FD);
	r3 = D(r3, s1_0_2, 0x31380F23, 0x0E0E0806, 0x03FA0007, 0xF00007F9);
	r4 = D(r4, s1_0_2, 0xF90102FF, 0xFE0101FB, 0x0B041F07, 0x08FBFE01);
	r5 = D(r5, s1_0_2, 0xF60703FD, 0xEAFA0704, 0xF903F904, 0x06FBF8FD);
	r6 = D(r6, s1_0_2, 0xFBFA05FE, 0xFFF8FA04, 0xEDEC240A, 0xEEE9F605);
	r7 = D(r7, s1_0_2, 0xF7F50C03, 0x151AFD04, 0xEB06060A, 0x08FBFCFF);
	r0 = D(r0, s1_1_0, 0x07F602FD, 0xF906F100, 0x0300FE0A, 0x02F7FFFF);
	r1 = D(r1, s1_1_0, 0x070014FF, 0xFAFB0404, 0x0801FDF5, 0xF2FDFBFF);
	r2 = D(r2, s1_1_0, 0x09F602F7, 0x0DFA14EE, 0x0FDFFDFE, 0xF818FA09);
	r3 = D(r3, s1_1_0, 0xA9381816, 0x08FEF7F0, 0x070BEFFD, 0x010315FC);
	r4 = D(r4, s1_1_0, 0x02010CF3, 0xF60FD807, 0x08FFFD07, 0x05FEF6FC);
	r5 = D(r5, s1_1_0, 0x040D16F8, 0xF4FEE403, 0x0005F503, 0x0BFB00EE);
	r6 = D(r6, s1_1_0, 0xFEF8F604, 0x08060B03, 0x01ED0705, 0xDBD60B30);
	r7 = D(r7, s1_1_0, 0x02EAF31A, 0x0CFEFD0D, 0xFE010BE4, 0x02FCFFFD);
	r0 = D(r0, s1_1_1, 0xF4F90CFF, 0x0403F9F1, 0xFE06FB10, 0x1B07E7F0);
	r1 = D(r1, s1_1_1, 0xFC0E00F9, 0x0008F4F7, 0xEC05FD0C, 0x02FFE803);
	r2 = D(r2, s1_1_1, 0xFDF713FF, 0x140BF3E3, 0x12021904, 0x031309F5);
	r3 = D(r3, s1_1_1, 0x14E7E813, 0x060719EB, 0x0002DDF6, 0xF4F3FDDB);
	r4 = D(r4, s1_1_1, 0x08ECF6E2, 0x14C9E7DC, 0xF5F908FF, 0x050208FD);
	r5 = D(r5, s1_1_1, 0x06ECEADF, 0x08F5DF1B, 0x0A0FD4EF, 0xFEE2FEF0);
	r6 = D(r6, s1_1_1, 0xFD0A0615, 0x03F721FE, 0xF1F00605, 0xF507FF08);
	r7 = D(r7, s1_1_1, 0x020AF10D, 0xF9F90FF7, 0x1003E509, 0xFE030A01);
	r0 = D(r0, s1_1_2, 0xFB050A03, 0xFDFFEFFD, 0x03FC03FC, 0x0701DFF1);
	r1 = D(r1, s1_1_2, 0x02121C0F, 0xFF02F306, 0x010002F9, 0x07F9E803);
	r2 = D(r2, s1_1_2, 0x01F510F9, 0x01FEEAE8, 0xE2151BFA, 0xFF0114F4);
	r3 = D(r3, s1_1_2, 0xF00AF918, 0x03FF1305, 0xF6010D01, 0x010AFF07);
	r4 = D(r4, s1_1_2, 0x0501F800, 0x01FE0F0D, 0xFB0A1504, 0xFFFD09FA);
	r5 = D(r5, s1_1_2, 0x04FBF403, 0xE601F1FD, 0xF7F8FCFE, 0x0EE90406);
	r6 = D(r6, s1_1_2, 0xE7060A0A, 0x0100FBFD, 0x110FDDFB, 0x030A1319);
	r7 = D(r7, s1_1_2, 0x00F40402, 0x01FA1005, 0xFDF0F601, 0xF9FEFBF9);
	r0 = D(r0, s1_2_0, 0xFF04FC04, 0x251411F4, 0xFCFF020B, 0x0C040201);
	r1 = D(r1, s1_2_0, 0xECF3060D, 0x0607F700, 0xFBF8FD00, 0x0300FAFB);
	r2 = D(r2, s1_2_0, 0x16070CF9, 0xF400FF05, 0xAB23FD14, 0xF0050304);
	r3 = D(r3, s1_2_0, 0xDD200B1B, 0x0B0300F4, 0xE8F9F607, 0xFCF51414);
	r4 = D(r4, s1_2_0, 0x03070006, 0xF40C10FC, 0xFF000002, 0x060303FB);
	r5 = D(r5, s1_2_0, 0xEE06FE05, 0x20120DF9, 0xEB030C00, 0xF404F9FD);
	r6 = D(r6, s1_2_0, 0xF6F4070F, 0xFCF905FC, 0xC9080E1C, 0x2AF704F1);
	r7 = D(r7, s1_2_0, 0x13EF0E08, 0xEDF70600, 0x0608FBE0, 0xFD010300);
	r0 = D(r0, s1_2_1, 0x0C0303F5, 0xFF060B09, 0x04000608, 0x110305F5);
	r1 = D(r1, s1_2_1, 0x0CF8FFF8, 0xF007FC0C, 0xF8FA0005, 0xF504FF0C);
	r2 = D(r2, s1_2_1, 0x13FA19E8, 0xEFFD110B, 0xD60E0813, 0x0D09ED13);
	r3 = D(r3, s1_2_1, 0xE4FCFA24, 0xF8EC04F7, 0x040307FC, 0x0C040421);
	r4 = D(r4, s1_2_1, 0x070C0307, 0x0223E80C, 0xFC03FBF8, 0x18FB07F4);
	r5 = D(r5, s1_2_1, 0xF9F5FF04, 0x07F104EF, 0x1AF907F1, 0x0D0604E8);
	r6 = D(r6, s1_2_1, 0x00FE03FC, 0xFBF9010B, 0x04160B1A, 0x05060304);
	r7 = D(r7, s1_2_1, 0x05EAF902, 0xF8FEF11D, 0xECFDF714, 0x0CFC0BED);
	r0 = D(r0, s1_2_2, 0xFFF3FD06, 0x0FF2040B, 0x00F40303, 0xFEF60EF6);
	r1 = D(r1, s1_2_2, 0x07F9FCF6, 0x0004FF04, 0x02FCFDFE, 0x0305FF00);
	r2 = D(r2, s1_2_2, 0x01F9FEF6, 0x03080111, 0x07E4EFFF, 0x0B1205FC);
	r3 = D(r3, s1_2_2, 0x1FFE0C1C, 0xF321FD0B, 0x050B06FA, 0xFAF4170D);
	r4 = D(r4, s1_2_2, 0x05F30200, 0x0C040EF0, 0x030FF608, 0x02FBFEFB);
	r5 = D(r5, s1_2_2, 0xFDF7FEFA, 0x04F3FAFF, 0x050CF5E5, 0x09170A0B);
	r6 = D(r6, s1_2_2, 0xFD02FE01, 0x000B0804, 0x0E1A11F5, 0x0A1AFE04);
	r7 = D(r7, s1_2_2, 0x01010507, 0xEA1B1C0A, 0xFD0D081E, 0x04F601F8);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-3.721e-02, -6.897e-02, 5.021e-03, -1.303e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-2.108e-02, 1.943e-02, 6.008e-03, -2.082e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(4.309e-03, -1.498e-02, -6.832e-03, -1.482e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-8.454e-02, -8.604e-02, -1.745e-02, -2.020e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-5.162e-03, -4.993e-02, -1.979e-02, -2.870e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-9.071e-03, -1.678e-02, -2.863e-02, -2.077e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-6.240e-02, 2.892e-02, -4.138e-02, -2.507e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.875e-02, -2.875e-02, -3.528e-03, -2.605e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-DS-conv7
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv6
//!BIND LUMA
//!SAVE conv7
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv6_pt;
			r = conv6_gather(p, 0);
			g = conv6_gather(p, 1);
			b = conv6_gather(p, 2);
			a = conv6_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv6_pt;
			r = conv6_gather(p, 0);
			g = conv6_gather(p, 1);
			b = conv6_gather(p, 2);
			a = conv6_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF9FFFA07, 0xFF090803, 0xFD020102, 0xF9F21807);
	r1 = D(r1, s0_0_0, 0x030703FE, 0xFEF50803, 0x0B00F6FA, 0xF2FEF6FF);
	r2 = D(r2, s0_0_0, 0xE9FDF1EF, 0xF7FDFFFE, 0x05F4EDFD, 0xF4FC0B03);
	r3 = D(r3, s0_0_0, 0x0101FAFF, 0xFAFAFC02, 0x08EEF7F3, 0x01FA03FE);
	r4 = D(r4, s0_0_0, 0x010800FD, 0x09FA0D02, 0xCF020AF7, 0xFF0BF7FE);
	r5 = D(r5, s0_0_0, 0xF1030B00, 0xD5F404FC, 0xFEEC17DF, 0xF5FEFCF8);
	r6 = D(r6, s0_0_0, 0xF7040306, 0xF7F90102, 0xFAF600FB, 0xF81106FB);
	r7 = D(r7, s0_0_0, 0x07FA01FE, 0x050217EB, 0xFDFCFF01, 0x15031BFB);
	r0 = D(r0, s0_0_1, 0x0CE8FC00, 0x0AF4040C, 0xFD01F9F5, 0x0401E9FF);
	r1 = D(r1, s0_0_1, 0xFC02FDFD, 0x0C00FDFB, 0xF40A0AF6, 0x04F6070A);
	r2 = D(r2, s0_0_1, 0xFBFE0609, 0xFB030206, 0xEA06EDFD, 0xFD1110F7);
	r3 = D(r3, s0_0_1, 0x0000F8F6, 0x07FDF5F3, 0x00E910F8, 0x02020604);
	r4 = D(r4, s0_0_1, 0x01F8FC0A, 0xF3080702, 0x0EF81023, 0x030AF7FE);
	r5 = D(r5, s0_0_1, 0x0DF4FA06, 0xEF0805EB, 0x2436FD0D, 0x06FD07F7);
	r6 = D(r6, s0_0_1, 0x02DF0AD6, 0x110501F9, 0xDB0FF8D4, 0x030BF800);
	r7 = D(r7, s0_0_1, 0x0DF4FC01, 0x17FB0BF8, 0xFD05F6F9, 0x0AFE15FC);
	r0 = D(r0, s0_0_2, 0xFBFC01F2, 0xF804FEFA, 0x0304070C, 0xFAFDFF01);
	r1 = D(r1, s0_0_2, 0xFBFE01FE, 0xF9000AFE, 0xFCF7FD01, 0x030B00FD);
	r2 = D(r2, s0_0_2, 0x01F70802, 0xF8FF00FD, 0x16ECE30D, 0x05F00B00);
	r3 = D(r3, s0_0_2, 0xFDFD01FE, 0xFEF80202, 0x06F6FDF7, 0xFB070505);
	r4 = D(r4, s0_0_2, 0xFD04F7FB, 0xF7110BFD, 0x04E905F0, 0x0406FE03);
	r5 = D(r5, s0_0_2, 0xF70602EF, 0x06FA000B, 0xF114FEE8, 0xFE0811E0);
	r6 = D(r6, s0_0_2, 0xF3010CFE, 0x09F400FE, 0xE7020DDE, 0xFC0B0206);
	r7 = D(r7, s0_0_2, 0x03040AE4, 0xE3ED0006, 0xF90201FE, 0x0CF906FF);
	r0 = D(r0, s0_1_0, 0xE6FAFFFB, 0x15E6F3FE, 0xF1EDF50E, 0x0B0FFD07);
	r1 = D(r1, s0_1_0, 0x140E0500, 0xDAED0001, 0x04090500, 0x07040504);
	r2 = D(r2, s0_1_0, 0xD1DBFC00, 0xDDE701FB, 0x1EFFF8FF, 0xFF0B02FF);
	r3 = D(r3, s0_1_0, 0x0FF9FF0A, 0xFB0109FD, 0x02F1F5F4, 0x1CF504FF);
	r4 = D(r4, s0_1_0, 0x010601F9, 0x190B240B, 0xFECE0606, 0xDAF1F101);
	r5 = D(r5, s0_1_0, 0xDFEA05FD, 0xDA0FFAEB, 0xE90A0912, 0x240F2A07);
	r6 = D(r6, s0_1_0, 0xF004FEFE, 0x88CE0F09, 0x09E20B0C, 0xFF09FE04);
	r7 = D(r7, s0_1_0, 0x0B06F6FE, 0x1A09252E, 0x120A0006, 0xE105FDFC);
	r0 = D(r0, s0_1_1, 0x15070F07, 0xE413E9F3, 0xFCE8F122, 0x0BF60EF7);
	r1 = D(r1, s0_1_1, 0xF5071216, 0xFCE7F50B, 0x0AFD0707, 0x0214FE18);
	r2 = D(r2, s0_1_1, 0xFEFCF61B, 0xFD080B17, 0xE704E21A, 0x0BE40600);
	r3 = D(r3, s0_1_1, 0x050503F6, 0xFFCFFD03, 0xF2E10CCC, 0xF4F603FD);
	r4 = D(r4, s0_1_1, 0xFB1D0414, 0xFD121C14, 0xEBEA0C14, 0x0AEB03F3);
	r5 = D(r5, s0_1_1, 0x05FDF516, 0xDBF9E51D, 0xEA0206F9, 0xF4F72611);
	r6 = D(r6, s0_1_1, 0xF8AF060A, 0x05211016, 0xFDF50026, 0x020BF805);
	r7 = D(r7, s0_1_1, 0x1B2D2410, 0x09220000, 0x07F20901, 0xFE032310);
	r0 = D(r0, s0_1_2, 0x0600FB14, 0xFFE607FC, 0x050E0005, 0x0CEB04F4);
	r1 = D(r1, s0_1_2, 0xF60F0503, 0xF61100FD, 0xFE0CF6FB, 0xF90BFA09);
	r2 = D(r2, s0_1_2, 0xF9F8FFF2, 0xFC0BFEFF, 0xF4F5EFFC, 0xF7141508);
	r3 = D(r3, s0_1_2, 0x0BEDFDF8, 0xF700FDFF, 0xF0EF0108, 0xFDFA01FC);
	r4 = D(r4, s0_1_2, 0xFFFFF5F9, 0x0F031BFB, 0xFDFCFEF6, 0x0204F909);
	r5 = D(r5, s0_1_2, 0xFC131800, 0xFFE904F2, 0xD61B1DEA, 0xF2ED06F6);
	r6 = D(r6, s0_1_2, 0x05000C02, 0xF9E803FB, 0x0CB913FF, 0xF604FBFC);
	r7 = D(r7, s0_1_2, 0x1ED508EF, 0x26F80DC5, 0xF9FDF804, 0xF71B1102);
	r0 = D(r0, s0_2_0, 0x02060504, 0x02F6F3FA, 0xFF0AFF03, 0x03F4FE03);
	r1 = D(r1, s0_2_0, 0x080600FE, 0x11090501, 0x0306FE02, 0x02F7FF01);
	r2 = D(r2, s0_2_0, 0xFEFBFF04, 0xF90C0304, 0x05FDF1FD, 0x04040304);
	r3 = D(r3, s0_2_0, 0x0CFB0A01, 0xF5FFF801, 0xF8FCF9F6, 0x05F6F9FE);
	r4 = D(r4, s0_2_0, 0xF801F70B, 0x08FD0DFA, 0xCA02070B, 0x06090002);
	r5 = D(r5, s0_2_0, 0x180715FE, 0x080FFEF3, 0x29F7300B, 0xFEF60C00);
	r6 = D(r6, s0_2_0, 0xFB0907F9, 0xFCE603F3, 0x0DFA08F2, 0x08FEFD04);
	r7 = D(r7, s0_2_0, 0xF8FAFC03, 0xF4071A10, 0xFC0301FC, 0x02FC0D11);
	r0 = D(r0, s0_2_1, 0xFB07060A, 0x0113F7FB, 0x01010015, 0xE5140702);
	r1 = D(r1, s0_2_1, 0xFA0E0507, 0x0105FF02, 0x0AF90002, 0x04FEFD01);
	r2 = D(r2, s0_2_1, 0x03F900F5, 0x08FD0003, 0x06FEFD1A, 0x0404FD08);
	r3 = D(r3, s0_2_1, 0x09EFFFF8, 0xFB03FCFC, 0xE1EBEEE0, 0xFA08FDF8);
	r4 = D(r4, s0_2_1, 0x03F4FA0C, 0xF4121100, 0x07F9FC03, 0x0105FF00);
	r5 = D(r5, s0_2_1, 0xFE0407FF, 0xD4D3FF10, 0xEA1803FF, 0x0BFB0801);
	r6 = D(r6, s0_2_1, 0x01EAFA10, 0xFBFB080D, 0x02060EF2, 0x00FFFD09);
	r7 = D(r7, s0_2_1, 0x05EDF403, 0xF0002000, 0xFBFBFBFB, 0x0411F204);
	r0 = D(r0, s0_2_2, 0x0500FEFD, 0xF904FBFC, 0xFD07FAFF, 0xFF060402);
	r1 = D(r1, s0_2_2, 0xFD0AFFFB, 0x06F6F803, 0x0304F7FF, 0xFEFAFC00);
	r2 = D(r2, s0_2_2, 0x0001FEFD, 0xF7FF0007, 0x06FCEE02, 0x01F503FC);
	r3 = D(r3, s0_2_2, 0x03FA0100, 0xFA0401FE, 0xF3E905F9, 0x02FD02FC);
	r4 = D(r4, s0_2_2, 0x0002FE01, 0xFAF60CD8, 0x06FE04F8, 0xFF0BF7FD);
	r5 = D(r5, s0_2_2, 0xFDE2FFFE, 0x0B0B000C, 0x0BE60716, 0xF9FDF8FA);
	r6 = D(r6, s0_2_2, 0xFB05FBF3, 0xFCFBFD09, 0xEEF50D00, 0x0108F703);
	r7 = D(r7, s0_2_2, 0x17E408EA, 0x09F71726, 0xFE02FDFF, 0x0DDF09EC);
	r0 = D(r0, s1_0_0, 0xFCFDF300, 0xFFFBFB00, 0x09FFFAF2, 0x0207FBE9);
	r1 = D(r1, s1_0_0, 0x04010009, 0xF7FF020E, 0xFAF4FE0F, 0xFDFF10F7);
	r2 = D(r2, s1_0_0, 0xFCF7F8E9, 0x00FC00FB, 0x0906FCF7, 0x04FB05FA);
	r3 = D(r3, s1_0_0, 0xFFF901F8, 0xFEFB0213, 0x13FB1110, 0x00FE0405);
	r4 = D(r4, s1_0_0, 0xFB0004F9, 0xF1060F08, 0xEEF4100B, 0x0502F606);
	r5 = D(r5, s1_0_0, 0xF807020C, 0x09F4F60D, 0x04F0F212, 0x0BE9FBF5);
	r6 = D(r6, s1_0_0, 0xF0FA0428, 0xEEFBE520, 0x05000402, 0xF70004FC);
	r7 = D(r7, s1_0_0, 0x09F8E6FF, 0x13F2EE81, 0x0D000004, 0xF306F6FA);
	r0 = D(r0, s1_0_1, 0xF6020CD6, 0x14F8E7E4, 0x04FC1404, 0xE30306F1);
	r1 = D(r1, s1_0_1, 0x0309030A, 0x11F8F504, 0xFD01FC04, 0x1EEF0308);
	r2 = D(r2, s1_0_1, 0xFDF5E808, 0x04FFFC0A, 0x1313F90C, 0xE5FEEE25);
	r3 = D(r3, s1_0_1, 0xFBFFFEF8, 0x07051004, 0x01FE090D, 0x05FE06ED);
	r4 = D(r4, s1_0_1, 0xFEF8F905, 0x0AF3EFF9, 0xEC03E7D6, 0xFF150EFC);
	r5 = D(r5, s1_0_1, 0xFFF603E1, 0xF8FD0201, 0x16F2FD96, 0xF508FE0C);
	r6 = D(r6, s1_0_1, 0x20F6FF05, 0xFDF513FC, 0x181000FA, 0x0AFB0113);
	r7 = D(r7, s1_0_1, 0x1009E81F, 0xF1F4E0AA, 0x01020C02, 0xF4FD0212);
	r0 = D(r0, s1_0_2, 0x04FAF7F8, 0xFFFE0803, 0x05020803, 0x0BFEF602);
	r1 = D(r1, s1_0_2, 0x06FCF900, 0x08F1ED18, 0x0600FDF8, 0x02FD150B);
	r2 = D(r2, s1_0_2, 0xFD0AF5F6, 0x0301FEF7, 0x080E0CEC, 0x02FA05EC);
	r3 = D(r3, s1_0_2, 0x01FFFC02, 0x03FBFB0B, 0xEBF4110A, 0xFBFF0100);
	r4 = D(r4, s1_0_2, 0xF3FE0702, 0x090CFE07, 0xF91003E6, 0x03FC04F9);
	r5 = D(r5, s1_0_2, 0x08F50511, 0xFF0308FD, 0x03DEF7E1, 0xFEF7FB14);
	r6 = D(r6, s1_0_2, 0xFAFAF0F2, 0x050705F3, 0xEDE09103, 0xFFF6FF10);
	r7 = D(r7, s1_0_2, 0x04F0F2FA, 0x15E9F7EE, 0x01FEF8FE, 0xEBF90AE7);
	r0 = D(r0, s1_1_0, 0xF9FCFAE9, 0xFF01E4FF, 0x0603FF18, 0x12F9F210);
	r1 = D(r1, s1_1_0, 0x0302FE07, 0x010E040B, 0xF4131016, 0xFCFE0407);
	r2 = D(r2, s1_1_0, 0x0609FD0B, 0x020000F3, 0xF00BFEF9, 0xEF0AFAFE);
	r3 = D(r3, s1_1_0, 0x06FB0005, 0x0D07E8FB, 0xF3DF0D19, 0xF8020717);
	r4 = D(r4, s1_1_0, 0x00040A04, 0xE7120630, 0x0C0BF9F2, 0x01010000);
	r5 = D(r5, s1_1_0, 0xFAFD1908, 0x14FF05E8, 0xDEFC2F03, 0xF1E4130E);
	r6 = D(r6, s1_1_0, 0xE50BFFEF, 0xFCFAF8FE, 0xECF1090E, 0xFB05FB15);
	r7 = D(r7, s1_1_0, 0x08FA0AFD, 0xEAD82EE4, 0x0AFFFAFF, 0x0DFB0BE4);
	r0 = D(r0, s1_1_1, 0xE1E50604, 0x11F5D9CC, 0x0AFFEDF4, 0x2001FFEF);
	r1 = D(r1, s1_1_1, 0xFB1D09EB, 0xFDFCD506, 0x0D33FCF9, 0x04FBF0F1);
	r2 = D(r2, s1_1_1, 0x15F5DDD7, 0xFD1CECFF, 0xEC12F3CB, 0x041C0BF9);
	r3 = D(r3, s1_1_1, 0x1CFED713, 0xFF0C06FC, 0xF4F7280A, 0x3403DBF4);
	r4 = D(r4, s1_1_1, 0xFDFCF7FA, 0xEAE6BF0F, 0xCFDBE981, 0xF30D1301);
	r5 = D(r5, s1_1_1, 0x02EDE92B, 0x08F6EED5, 0xF0F807FE, 0x261FEA0B);
	r6 = D(r6, s1_1_1, 0x0003FE07, 0x18F9E3E0, 0x040D0B20, 0xE1F509F3);
	r7 = D(r7, s1_1_1, 0xEF17E32F, 0x23011623, 0x20041109, 0xFC18F9DE);
	r0 = D(r0, s1_1_2, 0x0D020E06, 0x04030005, 0x11FCF9F1, 0xF00206F7);
	r1 = D(r1, s1_1_2, 0x0709F3F3, 0x0CFAF5FD, 0xFE020908, 0x09F5F6FF);
	r2 = D(r2, s1_1_2, 0xF7FE020D, 0x0EFBF900, 0x0803F300, 0x07FDE7F2);
	r3 = D(r3, s1_1_2, 0x0C000A16, 0x0204E9ED, 0xF8F7FAF9, 0xF7051204);
	r4 = D(r4, s1_1_2, 0x0604000B, 0x230EFA1E, 0xFFF40509, 0x0109FEE7);
	r5 = D(r5, s1_1_2, 0x17F9F007, 0xFB05F3E3, 0x1DF1D202, 0x16E1FD07);
	r6 = D(r6, s1_1_2, 0x0800F404, 0xF9090AFD, 0x1FF70317, 0x01F7F2F7);
	r7 = D(r7, s1_1_2, 0x1BEEF405, 0x03010103, 0xF9FA0AFB, 0x10EED701);
	r0 = D(r0, s1_2_0, 0xFC030203, 0x16FAE6F6, 0x0604FEFC, 0xFB0202FD);
	r1 = D(r1, s1_2_0, 0x02FE05FF, 0x0205FA14, 0xFF08FF05, 0x0601FB03);
	r2 = D(r2, s1_2_0, 0xFC13090B, 0xF9030201, 0x0508F5F9, 0xF804F8FD);
	r3 = D(r3, s1_2_0, 0xFBF50801, 0xFD13070A, 0xFEF40707, 0xFEFBF8FB);
	r4 = D(r4, s1_2_0, 0x06FCFE01, 0xFA0A1905, 0x0B0707FA, 0xF8FBF6F6);
	r5 = D(r5, s1_2_0, 0xF901070F, 0x02080600, 0xFAE8F2D1, 0xE710110F);
	r6 = D(r6, s1_2_0, 0xF71806F9, 0x0AFB07FD, 0xFBF1F506, 0x03FEFC05);
	r7 = D(r7, s1_2_0, 0x020CE910, 0x03EC08C2, 0xFD0304F8, 0xF603ECFB);
	r0 = D(r0, s1_2_1, 0x090E0F0C, 0xF9F6F9FE, 0xF7F7FEF5, 0xFA08FEFC);
	r1 = D(r1, s1_2_1, 0x01020C01, 0x01F5FF17, 0xFDFDFCF6, 0xFF03FC0A);
	r2 = D(r2, s1_2_1, 0x0802F405, 0x01050205, 0xFA00FEFC, 0xFCF2FE0C);
	r3 = D(r3, s1_2_1, 0x0D1C060E, 0xE7FAFEFB, 0xFEEF0A04, 0x05FD08FE);
	r4 = D(r4, s1_2_1, 0x020BF9FC, 0x0D38F71D, 0xF0E5EE02, 0xFAFF09FD);
	r5 = D(r5, s1_2_1, 0x0B15F812, 0xF40D0B02, 0x17F53B21, 0xF10506FB);
	r6 = D(r6, s1_2_1, 0x0AFCEDF1, 0xFF09ECF6, 0xF60E190D, 0xF9F2FD03);
	r7 = D(r7, s1_2_1, 0xFD0504FB, 0xE70400F6, 0x03FE04FE, 0xFAF20515);
	r0 = D(r0, s1_2_2, 0xF8FD05FD, 0x02F4FAFD, 0x07F90606, 0x06F7FAFD);
	r1 = D(r1, s1_2_2, 0x03000306, 0xF9FFFFFE, 0x04FF02FF, 0x0102FC00);
	r2 = D(r2, s1_2_2, 0xF500F900, 0x0201FDFD, 0x0E030C08, 0x030BFF09);
	r3 = D(r3, s1_2_2, 0xFA06F7F7, 0x03000605, 0xFCED0BF5, 0xFD06FF01);
	r4 = D(r4, s1_2_2, 0xF8040100, 0xEC00E003, 0xFF08F90A, 0x0B0202FE);
	r5 = D(r5, s1_2_2, 0xF3F1030F, 0x11E90402, 0xFBE0F105, 0x0B0DEAF2);
	r6 = D(r6, s1_2_2, 0x0100FF04, 0x00FEFBFF, 0xE7F1110B, 0x00FA0009);
	r7 = D(r7, s1_2_2, 0xE8F41802, 0x20EBFBD8, 0x0104FEFD, 0x0517FDFC);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF7FB010C, 0x0B0400F8, 0x00020700, 0x0FFD0C00);
	r1 = D(r1, s0_0_0, 0xFCFD01FE, 0x04040707, 0xFA0A0100, 0x03FD05FC);
	r2 = D(r2, s0_0_0, 0x0D090302, 0x06FAFC04, 0xF6F0FA08, 0x03FE0C07);
	r3 = D(r3, s0_0_0, 0xFEF1FDF9, 0x06060504, 0x07FDF705, 0x02F3FF04);
	r4 = D(r4, s0_0_0, 0x0403FF00, 0xFDFBF1F5, 0xF023150E, 0xFEFEFF00);
	r5 = D(r5, s0_0_0, 0xFFFC0D09, 0xF8FF1915, 0xEB1A0509, 0x010EF7F7);
	r6 = D(r6, s0_0_0, 0xF7040F19, 0x04FC0200, 0xF8010F13, 0x00FC07FA);
	r7 = D(r7, s0_0_0, 0xFF060D07, 0x0EF728D3, 0xFFFE0104, 0x110A0108);
	r0 = D(r0, s0_0_1, 0xE8F3F716, 0x23FB0C17, 0xFD0FFFF8, 0x04FF06F1);
	r1 = D(r1, s0_0_1, 0xFEF30004, 0x16FCFBF8, 0x0700FD0B, 0x03070100);
	r2 = D(r2, s0_0_1, 0x02FA0FFA, 0x0AF30203, 0xFBEDF617, 0x2013F602);
	r3 = D(r3, s0_0_1, 0x04E70103, 0x06F508E8, 0x110EFA0A, 0x0D000206);
	r4 = D(r4, s0_0_1, 0x00FAFB0B, 0x0686F90C, 0x00DCF111, 0xFF03F8FD);
	r5 = D(r5, s0_0_1, 0x06F405FA, 0xF7FBE80A, 0x07C306EF, 0x04FD1905);
	r6 = D(r6, s0_0_1, 0x2A0CF9C3, 0x1AF6E8F7, 0x09050FE2, 0x10FA0007);
	r7 = D(r7, s0_0_1, 0x0124F10F, 0x16F9E803, 0xFB00FEFF, 0xFB1FF40E);
	r0 = D(r0, s0_0_2, 0xF9080B00, 0x07130903, 0x060103FB, 0x02120C0A);
	r1 = D(r1, s0_0_2, 0xFEF60208, 0x11F21101, 0xF709FB01, 0x04FDFC01);
	r2 = D(r2, s0_0_2, 0xFE02FF0D, 0x04F4FD03, 0x00FBEF01, 0x0208F904);
	r3 = D(r3, s0_0_2, 0x030305FE, 0x09F50306, 0x0906F4FC, 0x0306FE04);
	r4 = D(r4, s0_0_2, 0x02F80000, 0x0701EA0C, 0x050204F2, 0x01FDF9F8);
	r5 = D(r5, s0_0_2, 0x09EB08FA, 0x0EE9F7ED, 0xF303FC07, 0x0F20FE09);
	r6 = D(r6, s0_0_2, 0x08FC0DF5, 0xF6160202, 0x01EEE332, 0x0207020F);
	r7 = D(r7, s0_0_2, 0x14FFF6A0, 0x10190F00, 0xF9000002, 0x0900F5FC);
	r0 = D(r0, s0_1_0, 0x0A0FF710, 0xFDFCF60B, 0x0301F7FC, 0x0205F0F7);
	r1 = D(r1, s0_1_0, 0xFD0502FF, 0x0D030C04, 0x07FDFEFC, 0x00F8FF03);
	r2 = D(r2, s0_1_0, 0x0E100005, 0x03FEFE05, 0x0001F702, 0xFA02F708);
	r3 = D(r3, s0_1_0, 0x000A0106, 0x08FF01DF, 0x0503FE1D, 0xF904FF03);
	r4 = D(r4, s0_1_0, 0x08F800FF, 0x0B01F20B, 0x2418CBFB, 0xFD06F5F9);
	r5 = D(r5, s0_1_0, 0x10EC06FF, 0x1004FDFE, 0xF014FCFD, 0xF4F90915);
	r6 = D(r6, s0_1_0, 0x0F0200FE, 0xF6F8DFD1, 0xF4130B06, 0xFEF50201);
	r7 = D(r7, s0_1_0, 0x0EF10CFB, 0x0138C3EC, 0x030A0000, 0x0A0011F9);
	r0 = D(r0, s0_1_1, 0xFF090F09, 0xDA02FD0F, 0xFE10FEF2, 0x0716EAF7);
	r1 = D(r1, s0_1_1, 0xFD0807F5, 0x0A1904F2, 0x010202DB, 0x0503EC08);
	r2 = D(r2, s0_1_1, 0x0D0509FC, 0x12F40307, 0x070903DA, 0xE6FDED81);
	r3 = D(r3, s0_1_1, 0x12F30DFF, 0x0803FCD2, 0xFBE50BFF, 0xFC10F7F2);
	r4 = D(r4, s0_1_1, 0x0B05FFFE, 0x031912F4, 0xF719F00E, 0xF10107EB);
	r5 = D(r5, s0_1_1, 0x0C2A06DE, 0x09FEF703, 0x040DE3EE, 0x30EBEA94);
	r6 = D(r6, s0_1_1, 0x061D10DF, 0x1003E907, 0x0C15A7F3, 0xF9FE0922);
	r7 = D(r7, s0_1_1, 0xFC05E20C, 0xDB0EEFFD, 0x08F202F8, 0x03F1FAEA);
	r0 = D(r0, s0_1_2, 0xFF0A13FE, 0x0E08F805, 0xFA0801FF, 0x0F08E4F9);
	r1 = D(r1, s0_1_2, 0xFBFC060F, 0x06EA000F, 0x08040711, 0x08F8FD03);
	r2 = D(r2, s0_1_2, 0xF70BFBFB, 0x05FBFA0E, 0xFDF8F613, 0x1AD7E303);
	r3 = D(r3, s0_1_2, 0x11FA06E9, 0x03FEFB05, 0x01F70DE1, 0x0700FBF5);
	r4 = D(r4, s0_1_2, 0x0005020E, 0xED0DFB08, 0xED15FE05, 0x01FBF700);
	r5 = D(r5, s0_1_2, 0x13FB0305, 0x0A09FA18, 0x0B13F419, 0x0AFB0E04);
	r6 = D(r6, s0_1_2, 0x0CFB0008, 0x0008FAF8, 0xFA16E3EB, 0xF7EBF61A);
	r7 = D(r7, s0_1_2, 0xFAFFE081, 0x0B19E523, 0x05FB04F8, 0x16FC0919);
	r0 = D(r0, s0_2_0, 0xFFF70308, 0x00000500, 0x03FFFDFB, 0x0203FE0B);
	r1 = D(r1, s0_2_0, 0xFFFD03FF, 0xFD03F4FA, 0x0202F809, 0x00FDFEFC);
	r2 = D(r2, s0_2_0, 0x010AF2FF, 0x00FEF904, 0x0001FA01, 0x03FAF804);
	r3 = D(r3, s0_2_0, 0xFB070708, 0x09FD05EE, 0xF6F9F70A, 0xFF00FE03);
	r4 = D(r4, s0_2_0, 0x0202F5FD, 0x0304F6FD, 0x04060F12, 0x0100FC04);
	r5 = D(r5, s0_2_0, 0x03FDFDF7, 0x0001FA05, 0xE90EF2FE, 0x070602F9);
	r6 = D(r6, s0_2_0, 0xFE0A100B, 0x0B0FD3E0, 0xFD090409, 0x00010AF5);
	r7 = D(r7, s0_2_0, 0x0A04FD0B, 0x14FE2B01, 0xFE00FE03, 0x0904E30B);
	r0 = D(r0, s0_2_1, 0x06FC0603, 0x05FD0806, 0xFFFE0401, 0xFAFEFD05);
	r1 = D(r1, s0_2_1, 0x05F90207, 0x0AFBF600, 0xFC0003FD, 0xFF05FDFE);
	r2 = D(r2, s0_2_1, 0x0CFA08FF, 0x030000F6, 0x06FE001B, 0x0900FC04);
	r3 = D(r3, s0_2_1, 0x0306FAF3, 0x020301FF, 0x1402EAEE, 0x00FDFC05);
	r4 = D(r4, s0_2_1, 0xFE04FC00, 0x02F8FA02, 0x0EFEFEF5, 0x04FD0907);
	r5 = D(r5, s0_2_1, 0x0EF3F10A, 0x0300E803, 0x1409EFF9, 0xFF09F3D9);
	r6 = D(r6, s0_2_1, 0x03FC0EFE, 0xFCF6E205, 0x0DECF504, 0x0CF8090B);
	r7 = D(r7, s0_2_1, 0xEE0F0204, 0xE8FFF41E, 0x000202FA, 0xFD07FBEC);
	r0 = D(r0, s0_2_2, 0x0201FDFB, 0xFEFD0E0F, 0x03FEFBFE, 0x00FEFB09);
	r1 = D(r1, s0_2_2, 0xFFFC0300, 0x000402F0, 0xFB08F405, 0x01FEFCFF);
	r2 = D(r2, s0_2_2, 0xF808FF01, 0x01FE06FE, 0x03F2F7FA, 0x00FCFF02);
	r3 = D(r3, s0_2_2, 0xFD0702FB, 0x0000010A, 0xFF06FEF5, 0xFFFF0401);
	r4 = D(r4, s0_2_2, 0x0601FF00, 0x0BFC0200, 0xEE0609F3, 0xF9FEFE03);
	r5 = D(r5, s0_2_2, 0xF60709F2, 0xF6090203, 0xF10502E8, 0x0207FD16);
	r6 = D(r6, s0_2_2, 0x060807FD, 0xFE0CFEFD, 0xF90DF801, 0xFEFB0401);
	r7 = D(r7, s0_2_2, 0xFA1AF5E3, 0xF916E3F6, 0xFE010303, 0x0DFEEBE7);
	r0 = D(r0, s1_0_0, 0xFB000FFF, 0x01FBFF02, 0x01FEFA0F, 0x0408F1F2);
	r1 = D(r1, s1_0_0, 0xFE00FFFB, 0xFE030800, 0x0006E7D6, 0xFA0102FD);
	r2 = D(r2, s1_0_0, 0xFCFCF713, 0x02FE02FB, 0x00FCF40A, 0xFAFD05E1);
	r3 = D(r3, s1_0_0, 0x04070A07, 0xF707E6ED, 0xF9FEF2FD, 0xFDFB0514);
	r4 = D(r4, s1_0_0, 0x0503FC04, 0xFC02D01A, 0x2007D6F9, 0xFB040A04);
	r5 = D(r5, s1_0_0, 0x01FFFC0A, 0x0B0609F4, 0x1A00FA29, 0x0815F9BF);
	r6 = D(r6, s1_0_0, 0x03120ADB, 0x0D07EF13, 0x1316FD0B, 0xFC08020A);
	r7 = D(r7, s1_0_0, 0xFDFB050B, 0xE2FDDE2A, 0xFF02F804, 0xFA0A09D6);
	r0 = D(r0, s1_0_1, 0xF2EF14BF, 0xF508FF0D, 0x0408E6F6, 0x020FF80B);
	r1 = D(r1, s1_0_1, 0x00F907FE, 0xFEF3EB28, 0x06E2F6F9, 0xFA0CFE08);
	r2 = D(r2, s1_0_1, 0xF61CD5F5, 0x02FAF7D6, 0x0507FB0D, 0x0DF6EBD6);
	r3 = D(r3, s1_0_1, 0xF60FFEF7, 0x05F4F3FE, 0x0E02FEF7, 0xFC04F7F6);
	r4 = D(r4, s1_0_1, 0x0102F5FC, 0xF616E50B, 0xD5070719, 0x06F3EFEF);
	r5 = D(r5, s1_0_1, 0xFDFCED10, 0x09F9FB1C, 0x061123E2, 0xF612EB97);
	r6 = D(r6, s1_0_1, 0xF2F9DFEC, 0xF1F708D1, 0xE60CF81C, 0xFB07F318);
	r7 = D(r7, s1_0_1, 0x0711DA38, 0xECE3182F, 0x040EFDFE, 0x01E5FCC2);
	r0 = D(r0, s1_0_2, 0xFEF207F9, 0xFD16EE01, 0x01FCFFEB, 0x00000106);
	r1 = D(r1, s1_0_2, 0x01F70DF7, 0xEC09FBFA, 0x090402C0, 0xF2FBF00A);
	r2 = D(r2, s1_0_2, 0x0501F814, 0x030105FE, 0x06FDE70E, 0x07F30706);
	r3 = D(r3, s1_0_2, 0x0609FEFC, 0xE901050E, 0xFCF60411, 0x01010310);
	r4 = D(r4, s1_0_2, 0xF9000209, 0x0B19D900, 0xFF08ECD1, 0x00FE00F1);
	r5 = D(r5, s1_0_2, 0xFAFF0505, 0xF5F9FB14, 0xE4F9FA26, 0xFE03EDE2);
	r6 = D(r6, s1_0_2, 0x0E1204FA, 0xFFF6FD04, 0x09E527EA, 0xF6060B01);
	r7 = D(r7, s1_0_2, 0xFCFD09D4, 0x10EFC817, 0xFC030606, 0xFEEB08CC);
	r0 = D(r0, s1_1_0, 0x0F03EDD5, 0x1AFBFAC8, 0xFBFA04CE, 0xD9FDFCD6);
	r1 = D(r1, s1_1_0, 0xFFFAFCEB, 0xF0EFFBB9, 0xF8F00C10, 0xFDFB0914);
	r2 = D(r2, s1_1_0, 0xFAFA08D4, 0xFCFB0401, 0xF707F60F, 0xF805FC38);
	r3 = D(r3, s1_1_0, 0x0407FFCB, 0xE3FB0F16, 0xF9F80630, 0x0401031D);
	r4 = D(r4, s1_1_0, 0x0DFF0D19, 0xF7020213, 0xDC060D42, 0x01F0E9EE);
	r5 = D(r5, s1_1_0, 0xF9F610CD, 0xCFE4F3F5, 0xD827FE08, 0x07060246);
	r6 = D(r6, s1_1_0, 0xE0F30406, 0xDE0A13C1, 0xF8FD0908, 0x04FBF8DD);
	r7 = D(r7, s1_1_0, 0xF5F3FE0B, 0xD126B291, 0xF4F9FFF2, 0xDC060321);
	r0 = D(r0, s1_1_1, 0xF2F119F6, 0xFFD608C3, 0xFC0DFCFC, 0xE5F0F5E1);
	r1 = D(r1, s1_1_1, 0xFAE8FB0A, 0xF929D3F2, 0xFC0BEB01, 0xEEEC050C);
	r2 = D(r2, s1_1_1, 0xF912EEF5, 0xF7110310, 0xF2F6D81A, 0xE0051F26);
	r3 = D(r3, s1_1_1, 0xFDEC02C7, 0xEE15FAFA, 0xB705E619, 0xF0F501C9);
	r4 = D(r4, s1_1_1, 0x1614EE0A, 0x07FBD524, 0xEC13C730, 0x0715081D);
	r5 = D(r5, s1_1_1, 0x122BE8F1, 0x13F8E8EF, 0xCBFD0681, 0xB0E4E420);
	r6 = D(r6, s1_1_1, 0xE832E7F0, 0x0124D920, 0xDD030CCF, 0x0319EC05);
	r7 = D(r7, s1_1_1, 0xFAD61545, 0xE0DF0AAC, 0xF20DFB06, 0xED090737);
	r0 = D(r0, s1_1_2, 0xFE1C0EF5, 0x04FBFD12, 0x0607F7EB, 0xFFCFEEEC);
	r1 = D(r1, s1_1_2, 0x0B000C11, 0xFC0AFBE8, 0xF5F5F71B, 0xFA0EF616);
	r2 = D(r2, s1_1_2, 0xFC0BF301, 0x051004FF, 0x0E06FD24, 0xF609F83F);
	r3 = D(r3, s1_1_2, 0xF306FEF8, 0x0FFA09D7, 0xE90FEA2D, 0xF7E5F9FF);
	r4 = D(r4, s1_1_2, 0x0309F712, 0x040BF918, 0x1010FA01, 0x06EC0EEA);
	r5 = D(r5, s1_1_2, 0x0BEEF0B4, 0x0B0C0706, 0xE31D12F7, 0xCDFEF736);
	r6 = D(r6, s1_1_2, 0x0AEAFDBB, 0xFA08F52C, 0xD726EF16, 0x0DF712E1);
	r7 = D(r7, s1_1_2, 0x81EDFEB1, 0xDABF1DBA, 0x02FC04FA, 0xFB23EF44);
	r0 = D(r0, s1_2_0, 0x01FC0714, 0x0204FCE4, 0xFE00FF0A, 0x08F70BFC);
	r1 = D(r1, s1_2_0, 0xF9FC0807, 0xF60B0201, 0x06080013, 0x02FE00F9);
	r2 = D(r2, s1_2_0, 0xFB13030F, 0x00FAFB06, 0xF6FBF2DE, 0x0409F710);
	r3 = D(r3, s1_2_0, 0xF907020C, 0x0108FCDC, 0x02F8F8E8, 0x0904FF11);
	r4 = D(r4, s1_2_0, 0x0C06FFFA, 0xF10BFB39, 0xF830FCFD, 0xFCF700FF);
	r5 = D(r5, s1_2_0, 0xF60109E6, 0x00EF0E02, 0xF908FB1F, 0xF70CFA0A);
	r6 = D(r6, s1_2_0, 0xEC0BF7DE, 0xF806FA14, 0xFBFEFB26, 0x0207FDB5);
	r7 = D(r7, s1_2_0, 0xFEFFFA04, 0xFD02FD3A, 0xFAFF0008, 0x010600E9);
	r0 = D(r0, s1_2_1, 0xF9E30D10, 0x00EFF6DC, 0x02FD01F5, 0xFB041000);
	r1 = D(r1, s1_2_1, 0xF9E80914, 0x03F517E9, 0xF906F806, 0xFF0300FC);
	r2 = D(r2, s1_2_1, 0xFE0D04D6, 0x010C06D6, 0xFDF2F6CA, 0xFCF8F608);
	r3 = D(r3, s1_2_1, 0xFC110700, 0xFDF9FF04, 0xF80EFA08, 0xFC0202EC);
	r4 = D(r4, s1_2_1, 0xFF0B060F, 0xFEF00A03, 0xF120F519, 0x06E5F91B);
	r5 = D(r5, s1_2_1, 0x00F01107, 0xF2290EE7, 0x0CE606E2, 0x001F04DA);
	r6 = D(r6, s1_2_1, 0x020B07C7, 0xF30EFEB8, 0x02050A05, 0xFAF4FF0C);
	r7 = D(r7, s1_2_1, 0xF0FB000C, 0x1681EA1B, 0xFA1D020A, 0x050AF6FC);
	r0 = D(r0, s1_2_2, 0x010B0517, 0x0206F2EB, 0x0512FFF5, 0xF8130217);
	r1 = D(r1, s1_2_2, 0x00040507, 0xFD0CFADF, 0x0200F305, 0x030705FB);
	r2 = D(r2, s1_2_2, 0xFDF6FA0B, 0xFB03FF01, 0x0BFEFEB5, 0x03FD0923);
	r3 = D(r3, s1_2_2, 0xFCF202E3, 0x0310FEEB, 0xFFE0031C, 0xFB01F800);
	r4 = D(r4, s1_2_2, 0xFCF70303, 0x0512EB25, 0xFCF0F6E3, 0x0004FD05);
	r5 = D(r5, s1_2_2, 0x071B0213, 0xFC130519, 0xF209EE40, 0x04E305E9);
	r6 = D(r6, s1_2_2, 0xF91B0800, 0x02F0FC0C, 0xF6FA0330, 0x010BFDB4);
	r7 = D(r7, s1_2_2, 0x0CF0F7DA, 0xDF2110B6, 0xFEF7FFFE, 0x00C20CFB);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x01F4F809, 0x00FDF80C, 0x0E0AF8E2, 0x01FEFEF0);
	r1 = D(r1, s0_0_0, 0xFCFDFF07, 0x040206D6, 0xFFFF0C00, 0x01F8FDF7);
	r2 = D(r2, s0_0_0, 0x15F8F595, 0xFA0004FF, 0xFAFA1114, 0x04F2FBF4);
	r3 = D(r3, s0_0_0, 0xFFFAFC11, 0x01F809F5, 0xFC00F4FF, 0x00FCFFFF);
	r4 = D(r4, s0_0_0, 0xF809FF07, 0x070C04FF, 0xECFE05E0, 0xFF07FDED);
	r5 = D(r5, s0_0_0, 0x090C0EEE, 0x13FFF6DD, 0xE3101200, 0x02FD0528);
	r6 = D(r6, s0_0_0, 0x010E18ED, 0x04ED15FC, 0xFA2910EE, 0x06FB0001);
	r7 = D(r7, s0_0_0, 0x13F8FA03, 0xE8E319F2, 0xFE05FD00, 0xFCFC03E7);
	r0 = D(r0, s0_0_1, 0x0BFE020B, 0x0703FD09, 0x0D130B06, 0x07F61403);
	r1 = D(r1, s0_0_1, 0xF6FD0105, 0x15FC1504, 0xFEF9F9FD, 0x14F90204);
	r2 = D(r2, s0_0_1, 0xF80F11F7, 0xF806FE06, 0xDDFCEDFA, 0xF6F906F1);
	r3 = D(r3, s0_0_1, 0x00FBFFF8, 0x0CFB0604, 0xEAF80607, 0x05F90B07);
	r4 = D(r4, s0_0_1, 0xF4020004, 0xFF0103FB, 0xF2B922FA, 0xF700FA01);
	r5 = D(r5, s0_0_1, 0x09001B16, 0xEAFC2F09, 0x1222BFC5, 0xFF08F1C7);
	r6 = D(r6, s0_0_1, 0x1C1BF39A, 0xF8F31BFE, 0xF908EAC3, 0x0E06140F);
	r7 = D(r7, s0_0_1, 0xE80F0E08, 0x08E70C22, 0x000406FC, 0xF718EE03);
	r0 = D(r0, s0_0_2, 0x00010D04, 0x000CFEFC, 0xFC00F801, 0xFF0308FD);
	r1 = D(r1, s0_0_2, 0x02000200, 0x0D07F508, 0xFCFB0FFE, 0x0602F4FA);
	r2 = D(r2, s0_0_2, 0x05FC07FD, 0xF7030DF8, 0xF6020007, 0xF8030FFA);
	r3 = D(r3, s0_0_2, 0xFF01FA04, 0x0B00F704, 0x00FFF701, 0x01FDFF01);
	r4 = D(r4, s0_0_2, 0x01FFFE03, 0xF50202F9, 0x0E011004, 0xFEFB0A00);
	r5 = D(r5, s0_0_2, 0x06050A15, 0x00F01103, 0xFC0614EE, 0x050D1513);
	r6 = D(r6, s0_0_2, 0xFDFDD90C, 0x03FCF306, 0xDFF9A3CF, 0x0200FCFB);
	r7 = D(r7, s0_0_2, 0x070103F8, 0xF21BF703, 0x00FEFB04, 0xFDFE1303);
	r0 = D(r0, s0_1_0, 0x01DF090C, 0xE5F207FE, 0x09F4FAFA, 0xFBE207F8);
	r1 = D(r1, s0_1_0, 0x020402FF, 0x14EF05FA, 0xFBE905F9, 0xF90001F9);
	r2 = D(r2, s0_1_0, 0x0F0AF8E1, 0x0E0FFE10, 0xF702FB03, 0x14FE0407);
	r3 = D(r3, s0_1_0, 0xF2FF0602, 0xFE17F2DD, 0x090F00FB, 0xEE0308F8);
	r4 = D(r4, s0_1_0, 0xF304F6FD, 0x0613FD08, 0xD716ECF9, 0x15EF060A);
	r5 = D(r5, s0_1_0, 0x16E20102, 0x2C01FC05, 0xE208D6D5, 0xDE1C02ED);
	r6 = D(r6, s0_1_0, 0x0100FA05, 0xE8000409, 0x00040AF7, 0x09F9FE05);
	r7 = D(r7, s0_1_0, 0x09070914, 0xF8ABDC2D, 0xFE0701F6, 0x15F6EA10);
	r0 = D(r0, s0_1_1, 0xF50F1905, 0xED1CC4FE, 0xFC0FFBFE, 0x0703020E);
	r1 = D(r1, s0_1_1, 0x45F005F9, 0x020F0707, 0xF9ECF3EB, 0xFE0002FD);
	r2 = D(r2, s0_1_1, 0xF6F30909, 0xF2FF0600, 0x48EEF2CC, 0x00EBF40C);
	r3 = D(r3, s0_1_1, 0xED05D6EC, 0x16FCF8F8, 0x24F3ED0A, 0xED0AE601);
	r4 = D(r4, s0_1_1, 0xE9F20DF9, 0x07F5BFFC, 0xF1F922FC, 0x2A05FE01);
	r5 = D(r5, s0_1_1, 0xFA1116EC, 0xF1E11601, 0xEA0308CF, 0xBFE5DD81);
	r6 = D(r6, s0_1_1, 0x170F06DB, 0xEAF0F0EA, 0x2116E633, 0xF7F711F2);
	r7 = D(r7, s0_1_1, 0x9A0B22B4, 0xB10E9FD4, 0xFFFAFF0A, 0xCBBCF6F9);
	r0 = D(r0, s0_1_2, 0x0501FAF5, 0x1BFB1B0B, 0x0207FAFD, 0x0803EE07);
	r1 = D(r1, s0_1_2, 0x0206F6F9, 0xF5F904F5, 0x0804E40B, 0x02F5E709);
	r2 = D(r2, s0_1_2, 0xF7040FF9, 0xF90508FB, 0xF90F150E, 0x09F1060C);
	r3 = D(r3, s0_1_2, 0x0EFEFD00, 0xFDF2EEF9, 0x00EF1D01, 0x0B010C07);
	r4 = D(r4, s0_1_2, 0xF80401FC, 0x150625F8, 0xFEFB25EE, 0x08FBFEF4);
	r5 = D(r5, s0_1_2, 0xF9F8DBA9, 0xF20117F6, 0x1E18FF0E, 0x1C0111DE);
	r6 = D(r6, s0_1_2, 0xFB03E601, 0x08040202, 0xE5182781, 0xF600FAF1);
	r7 = D(r7, s0_1_2, 0xFE0E02DF, 0x052FF416, 0xFBFCF5FE, 0x00F4CDF2);
	r0 = D(r0, s0_2_0, 0xFEF2FBFB, 0xFBF2FFF7, 0x0111FC02, 0xFA1304F7);
	r1 = D(r1, s0_2_0, 0x02040000, 0xF80401FD, 0xFB0201FC, 0xFC010100);
	r2 = D(r2, s0_2_0, 0x000DF6EF, 0x02F3FD01, 0xF01FFF08, 0xFBF603FA);
	r3 = D(r3, s0_2_0, 0xF00EFBF9, 0x15F908E1, 0xFFF2FC01, 0xF71000FE);
	r4 = D(r4, s0_2_0, 0x00100104, 0xEC1BFF03, 0x060B0409, 0x04E60108);
	r5 = D(r5, s0_2_0, 0xED0202F3, 0x0D060818, 0xFE3511FF, 0x0AE2FE0A);
	r6 = D(r6, s0_2_0, 0x0A0D02E5, 0xF704FEF8, 0xFC17F8FD, 0xFFF800FC);
	r7 = D(r7, s0_2_0, 0x09100306, 0xFAE30EED, 0xFF0CFC03, 0xFAE71102);
	r0 = D(r0, s0_2_1, 0x030D00F7, 0xF1190514, 0xFFF30CF1, 0xF5FEF01A);
	r1 = D(r1, s0_2_1, 0x00E60306, 0x04C80800, 0x061007F9, 0x00ECFE01);
	r2 = D(r2, s0_2_1, 0x040AF30B, 0x0603FBFE, 0xF7CC13FF, 0x040404FC);
	r3 = D(r3, s0_2_1, 0x0B22F003, 0xFEE314E2, 0x0C0EF716, 0xF90AF912);
	r4 = D(r4, s0_2_1, 0xFCEB0501, 0xF5C41A18, 0x0C150FFB, 0x01FAF9ED);
	r5 = D(r5, s0_2_1, 0x06E302EB, 0xE9F315E1, 0xB913F72E, 0x070305EB);
	r6 = D(r6, s0_2_1, 0x01E309F0, 0x0BFB1932, 0xFCF4E4F5, 0xF7E00BFF);
	r7 = D(r7, s0_2_1, 0xFCF0F41D, 0x0021812D, 0xFD0803FC, 0x1213ECF0);
	r0 = D(r0, s0_2_2, 0x0405F405, 0xFB070BFB, 0xFB0BE90A, 0x0D020FFB);
	r1 = D(r1, s0_2_2, 0x060DF90D, 0xFC0AF919, 0x0101F6EB, 0xFEFBF906);
	r2 = D(r2, s0_2_2, 0xFFFB07FE, 0xFD00000D, 0xF808DD0E, 0x03F502F5);
	r3 = D(r3, s0_2_2, 0x09F80BD8, 0xF80AF305, 0x12F10AF9, 0x03F70AF6);
	r4 = D(r4, s0_2_2, 0xFDFF080C, 0x08E81A0B, 0x0101FE0D, 0xFB03FD00);
	r5 = D(r5, s0_2_2, 0x01050615, 0xFA080A14, 0x29EF35B6, 0x0DFF00A7);
	r6 = D(r6, s0_2_2, 0xFB13EC02, 0x07F71300, 0xF6FB19E7, 0xFA0EEF07);
	r7 = D(r7, s0_2_2, 0xFE061892, 0x02E99FBB, 0x05FD00F9, 0x1A08150F);
	r0 = D(r0, s1_0_0, 0x00FFF403, 0x06F709FC, 0x08FD0002, 0xE4FCFC11);
	r1 = D(r1, s1_0_0, 0xFD0BFCFF, 0x00F5FEF7, 0x07F50300, 0x00FE0A09);
	r2 = D(r2, s1_0_0, 0x04FB1507, 0xFAF30201, 0xFA040A0C, 0x05FC09FE);
	r3 = D(r3, s1_0_0, 0xFEFAFD08, 0x01F90FFD, 0xFD040E05, 0x000507FE);
	r4 = D(r4, s1_0_0, 0xF9FFFFFF, 0x050000F5, 0xDA0AF801, 0xFCFCFEFE);
	r5 = D(r5, s1_0_0, 0x05FEFDF2, 0x09F406FF, 0xE519B10F, 0x0AFD0218);
	r6 = D(r6, s1_0_0, 0x0510EE02, 0xF3FD0305, 0xF7070F0C, 0xFDFA0506);
	r7 = D(r7, s1_0_0, 0x07F11204, 0xF2CCE62D, 0xFB080203, 0xFAF30506);
	r0 = D(r0, s1_0_1, 0x030B0505, 0x0CEE091E, 0xF3F1D812, 0xECF9080C);
	r1 = D(r1, s1_0_1, 0x000E03EE, 0xBEF0D708, 0x04FB0BFE, 0xE0EB0615);
	r2 = D(r2, s1_0_1, 0xF903E4F4, 0xF50501FE, 0x0E1007FD, 0xEA0714F1);
	r3 = D(r3, s1_0_1, 0x11F90900, 0xE5FF08F5, 0x02F50E03, 0x00000210);
	r4 = D(r4, s1_0_1, 0x030406FE, 0xF7081004, 0xFE2225E8, 0xEF01F810);
	r5 = D(r5, s1_0_1, 0xEE09EE10, 0xF0FDFCFA, 0x26050210, 0x18F91900);
	r6 = D(r6, s1_0_1, 0xD4F7D6FF, 0x0A10F5FD, 0xF2F6330D, 0xFD02F607);
	r7 = D(r7, s1_0_1, 0x0D170613, 0xC4EC0E08, 0x0101F8FF, 0xEA1F03E8);
	r0 = D(r0, s1_0_2, 0x020305FB, 0xF701FA08, 0xFA0503FD, 0xFC0C0CF7);
	r1 = D(r1, s1_0_2, 0x020003F7, 0xF8F8EFFD, 0x0602F6FD, 0xDCF8ED06);
	r2 = D(r2, s1_0_2, 0x06050E13, 0x0504FEF9, 0xFB06FE08, 0x030409F5);
	r3 = D(r3, s1_0_2, 0xF7FC01FC, 0xFF02FEF9, 0xFBFF1C01, 0x000510FF);
	r4 = D(r4, s1_0_2, 0x0502FF01, 0xEDFD1001, 0x1CFD03FC, 0x000C0205);
	r5 = D(r5, s1_0_2, 0x0F03F008, 0x07FCF90A, 0xE41FC5FC, 0xF505F8F4);
	r6 = D(r6, s1_0_2, 0x01051BFC, 0xFA07F800, 0x07D01A81, 0x020AFE00);
	r7 = D(r7, s1_0_2, 0xDB0AF010, 0xDC0FDDF0, 0x01FF03FF, 0x0C010D07);
	r0 = D(r0, s1_1_0, 0x17F8250C, 0x020B0109, 0xFAFE13FA, 0xFF04090F);
	r1 = D(r1, s1_1_0, 0x0904FAFD, 0xF6F31007, 0x02FF05F1, 0x0503FDFA);
	r2 = D(r2, s1_1_0, 0xFCF61903, 0x030004FE, 0x0B06F3F9, 0x04FB0008);
	r3 = D(r3, s1_1_0, 0x0208EFFC, 0xF7F7F9F8, 0xFC020104, 0xFF0CF501);
	r4 = D(r4, s1_1_0, 0x06FF09F9, 0xF5F601E9, 0x07FEF9EE, 0xF40401F4);
	r5 = D(r5, s1_1_0, 0x11000E04, 0xFEFAFE10, 0x18F0FDDD, 0x0504DAEA);
	r6 = D(r6, s1_1_0, 0xFF170400, 0x20F809F6, 0xFBFCF6F1, 0x040501F3);
	r7 = D(r7, s1_1_0, 0x0EEF21FE, 0xFCF9FDE2, 0x0207F600, 0xFE00110A);
	r0 = D(r0, s1_1_1, 0x131EFF11, 0xFDFE1FEA, 0x05FB02F8, 0xCBF20BE1);
	r1 = D(r1, s1_1_1, 0x0505FDFD, 0xF2DD12DB, 0xF0F2F6E6, 0xF7FAFBFE);
	r2 = D(r2, s1_1_1, 0xEBE807FC, 0xF9F80EFC, 0x00E9E9DE, 0xEFFF1303);
	r3 = D(r3, s1_1_1, 0xF5F700F8, 0x0802DBFC, 0xFBF80416, 0xF2FB11E5);
	r4 = D(r4, s1_1_1, 0x02F80AF6, 0xFEF616B4, 0x10032521, 0x04020C09);
	r5 = D(r5, s1_1_1, 0x0AE107DF, 0x0E15FDE2, 0xCD05FCD0, 0xCCE5C8D5);
	r6 = D(r6, s1_1_1, 0x14F3E9F0, 0xF1E319EE, 0xF3E71AE9, 0x0306E0E7);
	r7 = D(r7, s1_1_1, 0xF70AD1F2, 0x2CBE0DB5, 0x050A0100, 0xC9020DE7);
	r0 = D(r0, s1_1_2, 0xFDFCFFFB, 0x12F810DF, 0xF9F10503, 0xF6FF1001);
	r1 = D(r1, s1_1_2, 0xFFF50B05, 0xF2FEF616, 0xFAF407F2, 0xF1F40200);
	r2 = D(r2, s1_1_2, 0xFD0A0405, 0xFEF808F9, 0x05F00FFE, 0xEEF004F7);
	r3 = D(r3, s1_1_2, 0x0607DDF9, 0x02FC090A, 0x0A000C08, 0x0608F9FB);
	r4 = D(r4, s1_1_2, 0x01F807FB, 0x0CEDFEE6, 0x0705FF14, 0x08FFFDF4);
	r5 = D(r5, s1_1_2, 0xF7D800EB, 0x05F809FB, 0x0EDD05CC, 0x00F3AAE7);
	r6 = D(r6, s1_1_2, 0xF3F9F7FC, 0x0D02FFFA, 0xEFF81DC1, 0xFA0B0B16);
	r7 = D(r7, s1_1_2, 0x080F0306, 0x0DEEC7D9, 0x040FF8FC, 0xDFF00DEC);
	r0 = D(r0, s1_2_0, 0x0305FAFD, 0xFDFF0809, 0x01FFF904, 0x08080F09);
	r1 = D(r1, s1_2_0, 0x01FFFD00, 0xF8F5F606, 0xF9FDF7FE, 0x020002FF);
	r2 = D(r2, s1_2_0, 0x02E4080D, 0x0000FCFE, 0x0FF91700, 0xFF080808);
	r3 = D(r3, s1_2_0, 0xFE03FCFF, 0xF2EF1604, 0xF6060304, 0x00000A06);
	r4 = D(r4, s1_2_0, 0x01FD06FE, 0xFEEE07F4, 0xFBE20618, 0x0004F500);
	r5 = D(r5, s1_2_0, 0xF9FA00F6, 0xF7FDF700, 0x0F1DBA09, 0x04F4FFF6);
	r6 = D(r6, s1_2_0, 0x0DE802FF, 0xF2FC040B, 0xFB14130D, 0x00010DFD);
	r7 = D(r7, s1_2_0, 0x010103F6, 0x02E115F9, 0x01FC0300, 0x0309FB0E);
	r0 = D(r0, s1_2_1, 0xFA0DF7FE, 0xFE080903, 0xFE04FC09, 0xE0F4F50A);
	r1 = D(r1, s1_2_1, 0xFC05F1FF, 0xF1F9E2FC, 0xED070802, 0xFA010CFF);
	r2 = D(r2, s1_2_1, 0xF801F001, 0xF7FB00FD, 0x150EEEFF, 0xFC06F304);
	r3 = D(r3, s1_2_1, 0xF4E507F0, 0x0B021108, 0xF3FD0400, 0xFBFB0207);
	r4 = D(r4, s1_2_1, 0x02FE1804, 0x03C1D8D9, 0xE80702ED, 0xF906F203);
	r5 = D(r5, s1_2_1, 0xF6FDE6FE, 0x18F0E901, 0x0EEFD7D6, 0xEBF11414);
	r6 = D(r6, s1_2_1, 0x0300090A, 0x03F4FEF9, 0x10FBF5EB, 0xFD0902F6);
	r7 = D(r7, s1_2_1, 0x26041313, 0x81FEE1D0, 0x01FB03FE, 0xD5F6F704);
	r0 = D(r0, s1_2_2, 0x03FF0A04, 0xF4F809ED, 0xFCFEF0FE, 0xFAFC0BF6);
	r1 = D(r1, s1_2_2, 0xFFFAF700, 0xF90E0705, 0xF80000FD, 0x0501FB04);
	r2 = D(r2, s1_2_2, 0x07050C05, 0xFC01FD00, 0xFB02FBF6, 0xF907FF04);
	r3 = D(r3, s1_2_2, 0x01FFFA03, 0x0104F402, 0x07FC07FD, 0xFEFB0DFA);
	r4 = D(r4, s1_2_2, 0xF8FDFFFF, 0xF4DFF20C, 0x080A00FD, 0x05FFFFFF);
	r5 = D(r5, s1_2_2, 0x0209FE00, 0xEF00FCF4, 0x23F9B212, 0x02F3F102);
	r6 = D(r6, s1_2_2, 0xFF0DFD08, 0xFB09FCFD, 0xF70FFF09, 0xFD01FFF9);
	r7 = D(r7, s1_2_2, 0xF1F3FFFA, 0xF2E5B509, 0x03FEFCFD, 0xF40303FF);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF3FD0308, 0xF400050E, 0xFBFF06F9, 0xF4F2FAFE);
	r1 = D(r1, s0_0_0, 0xFA03FDFE, 0x04F2FE03, 0xFEF8FE0D, 0xFF01F403);
	r2 = D(r2, s0_0_0, 0x0207F800, 0xF7FA0004, 0xFDF9F9F7, 0x110003FA);
	r3 = D(r3, s0_0_0, 0xFB03FD07, 0xFFF0F806, 0x00EDFB0C, 0x0204FC03);
	r4 = D(r4, s0_0_0, 0xFA020006, 0x010AE60D, 0xFFFB0513, 0x02F30000);
	r5 = D(r5, s0_0_0, 0x0CFA05FD, 0xFDEFF8FB, 0x0A1A0406, 0xFA27F70F);
	r6 = D(r6, s0_0_0, 0x0ECDFF02, 0xEF050102, 0xFDFE050D, 0xF5FA0100);
	r7 = D(r7, s0_0_0, 0x0F080601, 0xC704FE29, 0x0307FEFF, 0x09FB0CF6);
	r0 = D(r0, s0_0_1, 0x03FFFC01, 0x020BF708, 0x0105F402, 0x0802FEFB);
	r1 = D(r1, s0_0_1, 0x01FE0FFF, 0xF109F9FE, 0x060C0701, 0xF20CF704);
	r2 = D(r2, s0_0_1, 0x02DEFD0C, 0x03EB0603, 0x0B05170D, 0x04F406FC);
	r3 = D(r3, s0_0_1, 0x020E08FF, 0xFEFAFCFC, 0xF0FE0E01, 0x010D0005);
	r4 = D(r4, s0_0_1, 0x00FEFA08, 0xEEFFC415, 0x21E00D03, 0x000C05FB);
	r5 = D(r5, s0_0_1, 0x0103F701, 0x12E70007, 0xEA041FFD, 0xFAE10B06);
	r6 = D(r6, s0_0_1, 0xEC200100, 0x18EE0E02, 0x0723F719, 0x0014F109);
	r7 = D(r7, s0_0_1, 0x0FE9F706, 0x2605F9FD, 0x01FF04FE, 0x05DD0B0F);
	r0 = D(r0, s0_0_2, 0xEEE3F8FF, 0xFA0BFE02, 0xF5FF02FD, 0xFCF60503);
	r1 = D(r1, s0_0_2, 0x02F500FF, 0xF600FA0A, 0x07FAFD01, 0x0512FD01);
	r2 = D(r2, s0_0_2, 0x050A04F9, 0x03F50302, 0x09FB0503, 0x15FC0103);
	r3 = D(r3, s0_0_2, 0xFDF7FD04, 0x0406FD02, 0xFF04FE07, 0xF809FD00);
	r4 = D(r4, s0_0_2, 0xF902FE02, 0xF70BF51A, 0x1000EBF1, 0xFD0407FD);
	r5 = D(r5, s0_0_2, 0xFE18F701, 0x0900FF01, 0xEA20EA06, 0xFA0CF40F);
	r6 = D(r6, s0_0_2, 0xF2F1FB00, 0x1D05F504, 0xEEE0C510, 0x05120208);
	r7 = D(r7, s0_0_2, 0xE109F713, 0x02F01F15, 0x03FCFC03, 0x01EDFDFC);
	r0 = D(r0, s0_1_0, 0xFEF0FFF6, 0x03110EFF, 0x160700FA, 0xFBF0030F);
	r1 = D(r1, s0_1_0, 0x02F7F8F9, 0xFB200609, 0x0519FF0E, 0x0401FC03);
	r2 = D(r2, s0_1_0, 0xFCFD07F3, 0xF7F90409, 0x0BF106F7, 0x05F9F704);
	r3 = D(r3, s0_1_0, 0x07F70007, 0x0715FAFA, 0x11060E18, 0x08F70308);
	r4 = D(r4, s0_1_0, 0xF800FEFD, 0x14E6CF0D, 0x122DF611, 0x08030A09);
	r5 = D(r5, s0_1_0, 0xE61DF90F, 0x0C25FDF6, 0x0805E4FD, 0x0B1B10FB);
	r6 = D(r6, s0_1_0, 0xFD0EE801, 0xE2D109F8, 0x1402FCFA, 0x0A1004FE);
	r7 = D(r7, s0_1_0, 0xFF1007F2, 0x25D406FC, 0xFAF4F000, 0xEFF1F013);
	r0 = D(r0, s0_1_1, 0x0BFE06D9, 0x01C9E50E, 0x01FDFA0C, 0xEFEB0101);
	r1 = D(r1, s0_1_1, 0x04F4D6F5, 0x11EEFA13, 0x01FF100A, 0xFF090205);
	r2 = D(r2, s0_1_1, 0x0F17FF03, 0xFB000AFF, 0x0BF2B3FE, 0xF0F6FE25);
	r3 = D(r3, s0_1_1, 0x0AF9F0FC, 0xFDFA1C02, 0xD216270D, 0xECF0FC16);
	r4 = D(r4, s0_1_1, 0x01F6F3EC, 0x12DA8115, 0xEC18E117, 0x06E82609);
	r5 = D(r5, s0_1_1, 0x03EEF51B, 0x1AC8F7FE, 0x04E60017, 0x13FD0E0B);
	r6 = D(r6, s0_1_1, 0xF8E815F3, 0x00170A0E, 0xFFF8300D, 0x0BE9FE17);
	r7 = D(r7, s0_1_1, 0x06F50402, 0xE2E30E27, 0xF6F41B10, 0xDDFCF315);
	r0 = D(r0, s0_1_2, 0xF20AF702, 0x14F00111, 0x05FF0101, 0x17F1F3FA);
	r1 = D(r1, s0_1_2, 0xF70702F8, 0xF817FFFF, 0x0D0DFB08, 0x06080111);
	r2 = D(r2, s0_1_2, 0xED0C0004, 0xFE02FB02, 0xFD060CEB, 0x0100FB02);
	r3 = D(r3, s0_1_2, 0xEE0E0403, 0xFAF70302, 0x0306FC11, 0xFB00FC00);
	r4 = D(r4, s0_1_2, 0x0203FCFD, 0x0E03D314, 0xEB220609, 0x08F3FE09);
	r5 = D(r5, s0_1_2, 0xF118FC02, 0xF401F907, 0x3416F205, 0x0F03F911);
	r6 = D(r6, s0_1_2, 0xF50F07F9, 0x0706FA02, 0x09CD0C18, 0xEE0600FF);
	r7 = D(r7, s0_1_2, 0xEBE4FC2D, 0x1CAE021B, 0xFB01FC00, 0xF1130CFD);
	r0 = D(r0, s0_2_0, 0xFD0DF107, 0x050007F5, 0xF008FDF9, 0x0007060A);
	r1 = D(r1, s0_2_0, 0xF3080207, 0x0405FDF7, 0x0102020A, 0x06000104);
	r2 = D(r2, s0_2_0, 0x1100FADB, 0xF9FCFCFC, 0xF6FD0AFC, 0xFC03F5FD);
	r3 = D(r3, s0_2_0, 0x000FFE02, 0x01EF15FE, 0x0008FD26, 0x05060904);
	r4 = D(r4, s0_2_0, 0x0AF30A08, 0xF906DA16, 0x0F040ADB, 0xF100FEFC);
	r5 = D(r5, s0_2_0, 0x090EFCFE, 0xF01AFDE9, 0xFF1F14F1, 0x17FAFE12);
	r6 = D(r6, s0_2_0, 0x06E8FC06, 0x0DE60604, 0x01FF0A06, 0xF60101FD);
	r7 = D(r7, s0_2_0, 0x15FAF809, 0xE7041320, 0xF905FB06, 0x03EBF80D);
	r0 = D(r0, s0_2_1, 0xFD050702, 0xFA07FC17, 0xFA000602, 0xF9010002);
	r1 = D(r1, s0_2_1, 0xF50AF800, 0xF8FF1212, 0xFC0203FC, 0x0600060F);
	r2 = D(r2, s0_2_1, 0xFFFA0309, 0x00F70A02, 0x080DF821, 0xF5F3FADA);
	r3 = D(r3, s0_2_1, 0x09F10F08, 0xF916F2F8, 0x0AFE10E8, 0xF00703F9);
	r4 = D(r4, s0_2_1, 0x00F90812, 0xE10AC228, 0x16110011, 0xFC07F308);
	r5 = D(r5, s0_2_1, 0xF60B160E, 0x2EFE04F9, 0xF500F6F5, 0x0DF3F40D);
	r6 = D(r6, s0_2_1, 0x050B0009, 0x19010700, 0xFD0BF510, 0x0501F609);
	r7 = D(r7, s0_2_1, 0x06FF181B, 0x1E22FE1C, 0x00FA06F9, 0x00F5FF07);
	r0 = D(r0, s0_2_2, 0xFE06FF03, 0xE2FEFF09, 0xFF010103, 0xE702040C);
	r1 = D(r1, s0_2_2, 0x01040901, 0x07FF0807, 0x01060206, 0x03FE0201);
	r2 = D(r2, s0_2_2, 0xFAFE020A, 0x06F70600, 0xE8F30EE5, 0xF8F40800);
	r3 = D(r3, s0_2_2, 0x09FCFE0B, 0x0109FA09, 0x02FAFC18, 0xFA01FFFD);
	r4 = D(r4, s0_2_2, 0x03F800FE, 0x0600E413, 0xD9FE06F8, 0xF30000F4);
	r5 = D(r5, s0_2_2, 0x11FC020A, 0x0A190B10, 0xEE00130A, 0x06040409);
	r6 = D(r6, s0_2_2, 0x0901F906, 0x0D17040F, 0x13260E1C, 0x06F90107);
	r7 = D(r7, s0_2_2, 0x0D09F708, 0xDCE7F221, 0x0D04FFFE, 0x1EE8FB08);
	r0 = D(r0, s1_0_0, 0xF209F105, 0xFAF3E80D, 0xF9FEF202, 0xEEEDFDFD);
	r1 = D(r1, s1_0_0, 0x0901FF00, 0xF6FDFD06, 0x05080C01, 0xFBF9FA03);
	r2 = D(r2, s1_0_0, 0xFAE0FB0C, 0xF7F403FD, 0x0B04FCFE, 0x03EF01FA);
	r3 = D(r3, s1_0_0, 0x03FBFA02, 0x1205FE04, 0x08F50D04, 0xFEF80202);
	r4 = D(r4, s1_0_0, 0xFEFF0602, 0x05E40EFC, 0xF5FA2000, 0x0304FDFD);
	r5 = D(r5, s1_0_0, 0xF709FDFE, 0xE9F3000A, 0x08F015EA, 0xFF02FC08);
	r6 = D(r6, s1_0_0, 0xFADFFE06, 0x0CED0BFD, 0x01000C02, 0xFBF4FDFF);
	r7 = D(r7, s1_0_0, 0x0502FEFF, 0x25DCF11E, 0x0AFB0200, 0xFCE503F0);
	r0 = D(r0, s1_0_1, 0xFAFD070E, 0xE7EA09F7, 0xE6FE1206, 0xF60FFD0A);
	r1 = D(r1, s1_0_1, 0x0F03F402, 0xD6FB1509, 0x09FDEE05, 0xCBFAF9FF);
	r2 = D(r2, s1_0_1, 0x0902FF07, 0x0701F7F9, 0x0802EAFE, 0xF3F908EB);
	r3 = D(r3, s1_0_1, 0x0702FD07, 0x01FEFB07, 0xF5F2FF17, 0xEAF009FC);
	r4 = D(r4, s1_0_1, 0x0A0B03F9, 0x01FC1007, 0x0610AFC0, 0xFFFD01FA);
	r5 = D(r5, s1_0_1, 0xF5020DFD, 0x09F710F9, 0xDADED42B, 0x08FDD211);
	r6 = D(r6, s1_0_1, 0xF5E3050E, 0xED0AFC00, 0xF5F1F710, 0xF6000601);
	r7 = D(r7, s1_0_1, 0x04DC28FC, 0x39F9FAFB, 0x0003FD02, 0xF506F800);
	r0 = D(r0, s1_0_2, 0x07F2FF13, 0xF0160606, 0x0701F204, 0xFFFF000D);
	r1 = D(r1, s1_0_2, 0x0EFDF9FC, 0x05FB01F6, 0xFE0507FA, 0xF40E0AFE);
	r2 = D(r2, s1_0_2, 0xFFF604F8, 0x0AFD02F8, 0x030110EF, 0xFC10F6ED);
	r3 = D(r3, s1_0_2, 0x0600FD08, 0x08020200, 0xF80E0908, 0xFCFDFC04);
	r4 = D(r4, s1_0_2, 0x03FF1107, 0x0B0307ED, 0x0FF82122, 0xF8FEFAF9);
	r5 = D(r5, s1_0_2, 0xFE031410, 0x0309080A, 0xFB370AE6, 0xFA0E110F);
	r6 = D(r6, s1_0_2, 0xFDFFECF8, 0x03030106, 0xC90EE717, 0xFC0102F1);
	r7 = D(r7, s1_0_2, 0xC0F418FA, 0x0229FA1A, 0x03FAFD00, 0x01FF0BFA);
	r0 = D(r0, s1_1_0, 0xEE0B0FF4, 0xFC11FC01, 0xFE05F202, 0xFEFDFF09);
	r1 = D(r1, s1_1_0, 0x070709FF, 0xF4ECD903, 0xFAF3F1F0, 0xFF00FF07);
	r2 = D(r2, s1_1_0, 0xDFE9E006, 0xF9000201, 0x001DFCFB, 0xF00B00FF);
	r3 = D(r3, s1_1_0, 0x01FF07FF, 0x0EF3F10B, 0xE8F21DF5, 0x08080A01);
	r4 = D(r4, s1_1_0, 0xFBF1FA00, 0xFBE313FB, 0xEBE903F4, 0xF90FFCFD);
	r5 = D(r5, s1_1_0, 0x040BFF04, 0xF60EEF17, 0xF1080507, 0xFCE014FC);
	r6 = D(r6, s1_1_0, 0xFA0003FC, 0xF8E407F6, 0xFFF81402, 0xFC07F1FD);
	r7 = D(r7, s1_1_0, 0x040FE60B, 0xF6591D09, 0x05FC0E01, 0xEFF6FD00);
	r0 = D(r0, s1_1_1, 0xFF030DD6, 0xFF07FA13, 0xFDFFF401, 0xD9FE0D04);
	r1 = D(r1, s1_1_1, 0xD70703FC, 0x0FE7E3FA, 0x0001F700, 0x00040B0B);
	r2 = D(r2, s1_1_1, 0x1FFCF013, 0x0CFB0BED, 0xC20AF51E, 0xF9F9FB16);
	r3 = D(r3, s1_1_1, 0x07FEEF0D, 0xF1F500FE, 0xBBFDF100, 0xF6F1F70D);
	r4 = D(r4, s1_1_1, 0x1AFD0C01, 0x0812E60A, 0xFF14E411, 0xF20704FF);
	r5 = D(r5, s1_1_1, 0xD2F7FE07, 0x0D882097, 0xC020F017, 0xFCEEEC1F);
	r6 = D(r6, s1_1_1, 0xF6AF1EEF, 0x1A02FEE2, 0xD405DB0B, 0x220A0603);
	r7 = D(r7, s1_1_1, 0x10F41708, 0xC81AB21E, 0x09F502F5, 0xEBFC0502);
	r0 = D(r0, s1_1_2, 0x0CFFF9E6, 0xF919180D, 0x09FAFCE0, 0xFC1F0BF3);
	r1 = D(r1, s1_1_2, 0x13FBF0FD, 0x020DF3F8, 0xFF0A0BE8, 0x0205FD00);
	r2 = D(r2, s1_1_2, 0x01111312, 0x0CFD0AFF, 0x0BEFF905, 0x040306F8);
	r3 = D(r3, s1_1_2, 0xFB020909, 0x01F4F4F6, 0xF2121481, 0xFA0807E5);
	r4 = D(r4, s1_1_2, 0xFE04F9FF, 0xFD10FF11, 0x0306061B, 0x0200EDFF);
	r5 = D(r5, s1_1_2, 0x0905DBD4, 0x0601000B, 0x0BE9FBDD, 0x0B371DD6);
	r6 = D(r6, s1_1_2, 0xFBCEF1EC, 0x0E180F24, 0x0EFB18CE, 0x03EDFE12);
	r7 = D(r7, s1_1_2, 0xEFE801F6, 0xC5FEE49F, 0x00F8FAFD, 0x0011F7FA);
	r0 = D(r0, s1_2_0, 0x01F604FF, 0x04FFFEFF, 0xFD00FE05, 0x0606FFFD);
	r1 = D(r1, s1_2_0, 0x09FE0302, 0x08F8F801, 0xF3FDF702, 0x07030305);
	r2 = D(r2, s1_2_0, 0x16F2F509, 0xF60007FE, 0x0E08F0FE, 0xFB070101);
	r3 = D(r3, s1_2_0, 0x02FF0304, 0x04F6EDFD, 0xF70216F8, 0xFFFFFF05);
	r4 = D(r4, s1_2_0, 0xF400FDFD, 0x0BD50308, 0x290F101D, 0xF70505FF);
	r5 = D(r5, s1_2_0, 0x12F6FA00, 0x0700090A, 0x15F71805, 0xFC0402F7);
	r6 = D(r6, s1_2_0, 0xFD060201, 0xFA050A07, 0xFAF212F8, 0x0104F901);
	r7 = D(r7, s1_2_0, 0xF9080200, 0x00E3FB10, 0x03FFFF04, 0xF9150302);
	r0 = D(r0, s1_2_1, 0x0D02FE11, 0xFB01F3EB, 0x07FD0AFC, 0xFF0002FD);
	r1 = D(r1, s1_2_1, 0x020002FE, 0xF5FCFE06, 0x00FF01FC, 0xFEFCFFFF);
	r2 = D(r2, s1_2_1, 0xFE02F508, 0xFAFBFF06, 0x04040F0D, 0xFDF900FD);
	r3 = D(r3, s1_2_1, 0x06F7EEFA, 0x0006F702, 0xF8F2F7FF, 0x08FE07FF);
	r4 = D(r4, s1_2_1, 0x01000201, 0x050F0A17, 0xFA10E209, 0x01F80105);
	r5 = D(r5, s1_2_1, 0xF8FCF8FA, 0x16FF0B08, 0xE6E6E81F, 0xF904D800);
	r6 = D(r6, s1_2_1, 0x13080506, 0x070F030E, 0xF5FB0602, 0xFE0601FF);
	r7 = D(r7, s1_2_1, 0xF803F406, 0xF0E0F905, 0xFF01FFF7, 0x03F7020A);
	r0 = D(r0, s1_2_2, 0x01FD03FC, 0x08F40E0A, 0x01FBFAFF, 0x03FF0A11);
	r1 = D(r1, s1_2_2, 0x06FDFEFA, 0x08080206, 0xFBF70000, 0x00FF010A);
	r2 = D(r2, s1_2_2, 0x050B0CFA, 0x010202FE, 0x0AF5F3F1, 0xF2FD05FF);
	r3 = D(r3, s1_2_2, 0xFEEDFF08, 0x02FE070A, 0xF5080317, 0x0001060E);
	r4 = D(r4, s1_2_2, 0x02080101, 0xF50101FD, 0xFEEA18E6, 0xFAFBFCF8);
	r5 = D(r5, s1_2_2, 0xFEF9FD00, 0x05F9EEFB, 0x191D2534, 0x0DEAF407);
	r6 = D(r6, s1_2_2, 0xFF030302, 0x0C010FFA, 0xFDF7160D, 0xFFF8FEFA);
	r7 = D(r7, s1_2_2, 0xE8F30A01, 0x0F08110A, 0xFD010503, 0xF8190F06);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.263e-02, -1.527e-02, 2.156e-02, -1.905e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(6.325e-02, -2.569e-02, -9.396e-03, -1.905e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-2.092e-02, -2.821e-03, 1.060e-02, -2.283e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.519e-02, -1.580e-02, -5.774e-02, -1.477e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.322e-03, 1.378e-02, -1.587e-02, -6.552e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.623e-02, -4.724e-02, -1.187e-02, -3.845e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-3.833e-02, -3.058e-02, -1.140e-03, -1.337e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-2.077e-02, -5.913e-02, -7.250e-03, -2.464e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-DS-conv8
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv7
//!BIND LUMA
//!SAVE conv8
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv7_pt;
			r = conv7_gather(p, 0);
			g = conv7_gather(p, 1);
			b = conv7_gather(p, 2);
			a = conv7_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv7_pt;
			r = conv7_gather(p, 0);
			g = conv7_gather(p, 1);
			b = conv7_gather(p, 2);
			a = conv7_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x05FAF9FC, 0x0BFCF8FF, 0x0502FA01, 0x01FD06FF);
	r1 = D(r1, s0_0_0, 0xF2040403, 0xFCFBFF04, 0x0E01FCFA, 0x0202F5FF);
	r2 = D(r2, s0_0_0, 0xF8F8EEFC, 0x0000FB01, 0x00FAFA02, 0x1FECC585);
	r3 = D(r3, s0_0_0, 0xFDFDFE09, 0x0300F5FF, 0x06FD0004, 0x09FFFA00);
	r4 = D(r4, s0_0_0, 0x03FDFAFF, 0x03FEFC04, 0x05FDFE01, 0xFCFFFAFF);
	r5 = D(r5, s0_0_0, 0xFF0105FD, 0xFF020302, 0x05FA0300, 0xF40D0107);
	r6 = D(r6, s0_0_0, 0xFF040602, 0x03FDFF01, 0x03FDFEFF, 0x03F8FFFD);
	r7 = D(r7, s0_0_0, 0x00010001, 0x04030804, 0xFAF7FFFE, 0xFDFE0604);
	r0 = D(r0, s0_0_1, 0x01F6F7F6, 0xFAF7F900, 0xF8FEF7FE, 0x08F3FE02);
	r1 = D(r1, s0_0_1, 0x02FEF504, 0xFD0BFDFF, 0x0AE5FBFC, 0x03FE0100);
	r2 = D(r2, s0_0_1, 0x07141C0D, 0xFD03FA01, 0x00FAF4FA, 0x1212CAF0);
	r3 = D(r3, s0_0_1, 0x0804E9E8, 0xF70FF6F8, 0xFE05F2F7, 0xE603F1F0);
	r4 = D(r4, s0_0_1, 0xFD07FFFB, 0x00FEFF00, 0x07FD0000, 0x0504FE01);
	r5 = D(r5, s0_0_1, 0xFAFAF201, 0x09FCFBF6, 0xF7F80503, 0x130BF9F3);
	r6 = D(r6, s0_0_1, 0x04FE0701, 0x0300FF01, 0x00FDFDFF, 0x01FEFF01);
	r7 = D(r7, s0_0_1, 0xFE02F7FE, 0x03FFDF02, 0xE40FEDF4, 0x16F5D4FF);
	r0 = D(r0, s0_0_2, 0xFDFFFF02, 0x02FBFEFE, 0xFE0000FF, 0x0400F9FC);
	r1 = D(r1, s0_0_2, 0x02FD01FE, 0x04FDFDFA, 0x072DF1FA, 0xFE02FF02);
	r2 = D(r2, s0_0_2, 0xF902F305, 0xFE010000, 0x0DFBF8FC, 0x21FA070F);
	r3 = D(r3, s0_0_2, 0xF8050A02, 0xFD0800F9, 0x06FE00FF, 0x0D020B08);
	r4 = D(r4, s0_0_2, 0x01FFFDFD, 0x00FCFC00, 0x02FF01FF, 0x02020001);
	r5 = D(r5, s0_0_2, 0x11FDF3F3, 0x050502FC, 0xFDFEFE01, 0x04FDFDFA);
	r6 = D(r6, s0_0_2, 0x09FEFA02, 0x02FE0100, 0x00000100, 0x03F9FAFD);
	r7 = D(r7, s0_0_2, 0x05FC00FF, 0x0207FAFB, 0xFF00F50A, 0x03FCFBF7);
	r0 = D(r0, s0_1_0, 0xF8FE03FC, 0xFF070B01, 0xFD000FFD, 0xF5000003);
	r1 = D(r1, s0_1_0, 0xFE0704F9, 0xFAFA05FF, 0x07020E05, 0x0BF7EBF1);
	r2 = D(r2, s0_1_0, 0xF70EEB07, 0x0701FC07, 0x07FF05FF, 0xACFBB9DE);
	r3 = D(r3, s0_1_0, 0xF705FB08, 0xF509FE08, 0xF9FF06FC, 0xF824FFF5);
	r4 = D(r4, s0_1_0, 0xFCFC06FB, 0x10080AFC, 0x10FCFCFF, 0x03F6FDFD);
	r5 = D(r5, s0_1_0, 0x01020307, 0x00FEF904, 0x0A0E0801, 0xEE0608EC);
	r6 = D(r6, s0_1_0, 0xF90202F9, 0x04010404, 0x03050AFF, 0xFE0704FE);
	r7 = D(r7, s0_1_0, 0x00000300, 0x010007FD, 0x1227F0D8, 0x0303FF01);
	r0 = D(r0, s0_1_1, 0x0300EFF6, 0x0B1C09FE, 0xD90E05E9, 0x1001D7EF);
	r1 = D(r1, s0_1_1, 0xF50AECF4, 0x0021FA08, 0xE91CE3FD, 0xFFFAF4F6);
	r2 = D(r2, s0_1_1, 0x1911F9F6, 0xF30605E6, 0x110D09F9, 0x1A01E2F2);
	r3 = D(r3, s0_1_1, 0xC206F1F3, 0x0320F3F7, 0x060ED8F6, 0xEBFFB1DD);
	r4 = D(r4, s0_1_1, 0x0D0CFDF9, 0x1C16DFF6, 0x13F1CCEE, 0xF1F7FDF4);
	r5 = D(r5, s0_1_1, 0xD5130FE2, 0xF203EAF7, 0x2116DAF8, 0xFCEEEF01);
	r6 = D(r6, s0_1_1, 0x0FF5F722, 0x10F9D9F3, 0x1504F4F9, 0x0AFCF8FA);
	r7 = D(r7, s0_1_1, 0x1304E4F1, 0xF702E100, 0x0002B3D5, 0xE40DFBF6);
	r0 = D(r0, s0_1_2, 0x10F8FEFC, 0x1B0AFFF7, 0xEFF9F7FA, 0xF2030CFF);
	r1 = D(r1, s0_1_2, 0xFEFFF8F6, 0x0DFCF6FF, 0xF510C3E8, 0x02F9FB0D);
	r2 = D(r2, s0_1_2, 0x0B07EEF0, 0x0700FB01, 0x24FDF1F3, 0xFCF60AFF);
	r3 = D(r3, s0_1_2, 0x070B0402, 0x05000601, 0x06FDFBFC, 0xF4F0F0E6);
	r4 = D(r4, s0_1_2, 0x03010000, 0x0909F5FE, 0x01FFF8FE, 0xFFF5FCFA);
	r5 = D(r5, s0_1_2, 0x09F5F000, 0xF00906FC, 0x0F0AFE06, 0x0B03FAFF);
	r6 = D(r6, s0_1_2, 0xF5010202, 0x00FFFDF7, 0xFE070002, 0xFFF6F701);
	r7 = D(r7, s0_1_2, 0xFB00FF01, 0x0D07F9FA, 0x32FFEAE1, 0x1804D5FB);
	r0 = D(r0, s0_2_0, 0x000003FD, 0x010101FF, 0xF8FE0400, 0xFDFE04FC);
	r1 = D(r1, s0_2_0, 0xF7FE04FA, 0xFFF70100, 0x08F9F302, 0x06FAFF01);
	r2 = D(r2, s0_2_0, 0xFC07F807, 0xFF00FE00, 0x03FD0000, 0xDBD60AED);
	r3 = D(r3, s0_2_0, 0x0003FC05, 0x0007FC00, 0xFEFF0401, 0xFCEEEAF9);
	r4 = D(r4, s0_2_0, 0x00FC02FE, 0x030503FD, 0x0407FEFC, 0xFFFF0300);
	r5 = D(r5, s0_2_0, 0x08FF0106, 0x05FC0302, 0xFFF9FCF9, 0xFBF705FD);
	r6 = D(r6, s0_2_0, 0xFC040302, 0xFFFE01FE, 0x0001FE02, 0x01FFFF03);
	r7 = D(r7, s0_2_0, 0x010007FF, 0xFD03FD01, 0x13E31EF8, 0xFBFF04FF);
	r0 = D(r0, s0_2_1, 0xF8EEF8F8, 0x09FCFC00, 0xFDF60803, 0x11ED0203);
	r1 = D(r1, s0_2_1, 0xFEF9FFFC, 0x02120302, 0x00F30004, 0xF9F60AFC);
	r2 = D(r2, s0_2_1, 0x020BF800, 0x0A00FE00, 0x0902F902, 0x3703E8FF);
	r3 = D(r3, s0_2_1, 0xFAFB09F8, 0xFC0701FB, 0xF60202F9, 0x0BFEE5F2);
	r4 = D(r4, s0_2_1, 0xFE0505FD, 0xF6F406FE, 0xE70308FE, 0xFF04FE00);
	r5 = D(r5, s0_2_1, 0xF0F405FB, 0xF4F203F8, 0xFEE6F9FC, 0x09030300);
	r6 = D(r6, s0_2_1, 0xF504FD00, 0xFA0A03FE, 0xF7F407FB, 0xF5F706F8);
	r7 = D(r7, s0_2_1, 0xEBFBF4F7, 0x00050703, 0xE3F11AE9, 0x07FC01FE);
	r0 = D(r0, s0_2_2, 0xFFFFF601, 0xFEFE04FF, 0x0CFD03FC, 0x0EFAF5F4);
	r1 = D(r1, s0_2_2, 0x060104FD, 0xF3FEFE01, 0x0708F505, 0x0FFC00F0);
	r2 = D(r2, s0_2_2, 0xFEE91302, 0xF6010401, 0xF3010000, 0x19FB0108);
	r3 = D(r3, s0_2_2, 0x08030500, 0x02000100, 0x02030305, 0xBC09F0EA);
	r4 = D(r4, s0_2_2, 0xFE020600, 0x0FFA0EFC, 0x15FC02FA, 0x10FFFDFB);
	r5 = D(r5, s0_2_2, 0xF20105FA, 0x070403FF, 0xFCFE02FC, 0xFF00FEFE);
	r6 = D(r6, s0_2_2, 0x09FEFDFE, 0x070104FE, 0x080306FF, 0x05FDF3FC);
	r7 = D(r7, s0_2_2, 0xFF02F902, 0xFB02F5FE, 0xDEFEFBF1, 0xFCFC06FB);
	r0 = D(r0, s1_0_0, 0x03000204, 0x07FF0503, 0x0704FDFE, 0xF80305F9);
	r1 = D(r1, s1_0_0, 0x0403F905, 0x03FD0303, 0x0902F701, 0xFFFCFFFF);
	r2 = D(r2, s1_0_0, 0x0405F302, 0xFC02FC02, 0x0500FE01, 0x11FA08E1);
	r3 = D(r3, s1_0_0, 0x000500FC, 0xFE010001, 0x03FE02FF, 0x0108FBFD);
	r4 = D(r4, s1_0_0, 0x01FE01FF, 0x0501FFFF, 0xFE0100FD, 0xFDFF00FE);
	r5 = D(r5, s1_0_0, 0x03030001, 0xFF02FCFD, 0x07040400, 0xFDFDF6F9);
	r6 = D(r6, s1_0_0, 0x04FF02FD, 0xFFFF03FF, 0x04FF03FF, 0x00010704);
	r7 = D(r7, s1_0_0, 0x000300FD, 0xFD01FF00, 0x0F0815F7, 0xFD0303FD);
	r0 = D(r0, s1_0_1, 0xFBFB13F9, 0x070700FE, 0x0007F3F7, 0x060A0403);
	r1 = D(r1, s1_0_1, 0x020205FD, 0xFA09FBFD, 0xFEF10BF7, 0x030410FF);
	r2 = D(r2, s1_0_1, 0xFA1B0704, 0xF8FAF9EA, 0x07020BFF, 0xF61EED08);
	r3 = D(r3, s1_0_1, 0xFCFEF7F1, 0xF902FA01, 0x0007E101, 0xF6F60BF4);
	r4 = D(r4, s1_0_1, 0xFFFF0004, 0x03060AFE, 0x00FD0002, 0xFC0204FC);
	r5 = D(r5, s1_0_1, 0xFA03F201, 0x0102FAFA, 0xFE010000, 0xFE0820FF);
	r6 = D(r6, s1_0_1, 0x0905111A, 0xFFFFFA02, 0x0202FE02, 0x01FC0205);
	r7 = D(r7, s1_0_1, 0x0003FA02, 0x0300FEFC, 0x0212F8FA, 0x0C010600);
	r0 = D(r0, s1_0_2, 0x04020102, 0x0302F701, 0xFDFDF8FC, 0x00010701);
	r1 = D(r1, s1_0_2, 0x0005FF02, 0x00000BFB, 0xFA2ACBE6, 0xFEFE0400);
	r2 = D(r2, s1_0_2, 0x02050CF7, 0xFE040E05, 0xFF01F700, 0xFA0BFF04);
	r3 = D(r3, s1_0_2, 0xFFFFF506, 0xFFFC07FC, 0xFE0009FF, 0x0F10FC11);
	r4 = D(r4, s1_0_2, 0x00FD04FF, 0x00FFFE00, 0xFEFFFAFF, 0x01FD0FFE);
	r5 = D(r5, s1_0_2, 0x01F90CF8, 0xFE04FC01, 0x0303FC01, 0x01040700);
	r6 = D(r6, s1_0_2, 0x02F9F6FA, 0x00FCFC02, 0x0001FC01, 0xFF0011FC);
	r7 = D(r7, s1_0_2, 0xFFFE0AFF, 0xFC02F1FD, 0x0106F20C, 0xFD000402);
	r0 = D(r0, s1_1_0, 0xFA04F806, 0x0801FDFD, 0x050A01FB, 0x0A05F405);
	r1 = D(r1, s1_1_0, 0x050DFBF9, 0xF1070701, 0xFEFF06FE, 0x0910E401);
	r2 = D(r2, s1_1_0, 0x1402FB19, 0x0DFDFCE9, 0x030203FB, 0xC6E1B7FD);
	r3 = D(r3, s1_1_0, 0x0200F201, 0xEE03F503, 0x03FE09FA, 0x0511C311);
	r4 = D(r4, s1_1_0, 0xFC0A0100, 0x0507F401, 0x000012FF, 0xFA020303);
	r5 = D(r5, s1_1_0, 0xFCFDF2FC, 0x10F600F8, 0xFE09F1FA, 0x0FEA0600);
	r6 = D(r6, s1_1_0, 0xF2FD0519, 0xF9FE03FC, 0x050203FF, 0xFC00F8FD);
	r7 = D(r7, s1_1_0, 0xFFFA09F9, 0x02FF0401, 0x10FDDF11, 0x05FC08FD);
	r0 = D(r0, s1_1_1, 0x0907F504, 0x1EFF0204, 0x4623F4FD, 0xF4F2F4FA);
	r1 = D(r1, s1_1_1, 0x101FFA05, 0x0AFFD4FB, 0xDBDED811, 0x1617E902);
	r2 = D(r2, s1_1_1, 0x22F1120B, 0x22090656, 0x0E09F1FF, 0x00B30FF1);
	r3 = D(r3, s1_1_1, 0x0604E3EE, 0x08FC23F9, 0x01001F07, 0xF918E5E3);
	r4 = D(r4, s1_1_1, 0xFC14FCFF, 0x0C0E1503, 0x100BE104, 0x0818FA05);
	r5 = D(r5, s1_1_1, 0x0AFC1DF2, 0xF4030101, 0x12030DFF, 0xF20D2403);
	r6 = D(r6, s1_1_1, 0xDEF2048B, 0x0B07FD05, 0xFB03FC00, 0x0407EE05);
	r7 = D(r7, s1_1_1, 0xFC0AF508, 0xE1FBFB03, 0xFC1228F0, 0xFF03FF01);
	r0 = D(r0, s1_1_2, 0xFC00F7FC, 0x12EF04FE, 0x0A1EF202, 0xFCFA0000);
	r1 = D(r1, s1_1_2, 0xFB0F0603, 0x02F9EAF9, 0xFD0CDBD3, 0x00080F02);
	r2 = D(r2, s1_1_2, 0x13FA1708, 0x020AF7EE, 0x04040EFC, 0xF9041205);
	r3 = D(r3, s1_1_2, 0xF4F7FE03, 0x0001F602, 0xFEF4F9FC, 0x1B03FEF3);
	r4 = D(r4, s1_1_2, 0x02080303, 0x08FC05FD, 0xFBFB12FC, 0xFC0F0005);
	r5 = D(r5, s1_1_2, 0x01091301, 0xF8040901, 0x03100502, 0xFEFCFCFF);
	r6 = D(r6, s1_1_2, 0xFEF80B13, 0xF9FB16FC, 0x0203F804, 0x01FDFB00);
	r7 = D(r7, s1_1_2, 0x01FCF702, 0x080104F9, 0x15022AFF, 0x01F90600);
	r0 = D(r0, s1_2_0, 0x0205FCFE, 0x05FD0AFE, 0xFE02F904, 0xF8001200);
	r1 = D(r1, s1_2_0, 0xFD050904, 0x04FFF600, 0xF6FD0BF7, 0x24F2FAFD);
	r2 = D(r2, s1_2_0, 0xF3F5090D, 0xFA000602, 0x01FE0BFD, 0xFF021C13);
	r3 = D(r3, s1_2_0, 0xFFFC0EFC, 0x06F70EFB, 0xF50301FD, 0x19F01FF7);
	r4 = D(r4, s1_2_0, 0x0302FAFF, 0x0DF818FE, 0x01041FFF, 0xFFFCF100);
	r5 = D(r5, s1_2_0, 0x09FC11FE, 0xE9070AFC, 0x0805F5FE, 0xFC011BFD);
	r6 = D(r6, s1_2_0, 0x0301FCFC, 0xFE0001FF, 0xFCFD0000, 0xFE010700);
	r7 = D(r7, s1_2_0, 0xF8FEFCFD, 0xFFFFFF00, 0x0001C7F9, 0xF8FE0400);
	r0 = D(r0, s1_2_1, 0x07EC1108, 0xF3FEF001, 0x0B041701, 0x0D01FC04);
	r1 = D(r1, s1_2_1, 0xFC010B01, 0xF8F30BFE, 0x22060C11, 0x0CFC03F9);
	r2 = D(r2, s1_2_1, 0xF6FEF512, 0xE1FFEBEC, 0x0500ED02, 0x00D5F8F5);
	r3 = D(r3, s1_2_1, 0xEEFBFAFD, 0xE902F2FD, 0xFAF2F201, 0x3213EE0E);
	r4 = D(r4, s1_2_1, 0xFFF10605, 0x1000F500, 0x1DFEF5FA, 0x21060CFF);
	r5 = D(r5, s1_2_1, 0xDF052300, 0x07FFFD03, 0x1114FFFC, 0x02FFFB00);
	r6 = D(r6, s1_2_1, 0x28081A15, 0x0B0120FB, 0x12FFFFFE, 0x0CFF0700);
	r7 = D(r7, s1_2_1, 0xFEF40806, 0xF9FDFFFC, 0x1EDC8101, 0x04F71402);
	r0 = D(r0, s1_2_2, 0xF7FC03FD, 0xFDFF06FE, 0x06F6F9FD, 0xFCF800FB);
	r1 = D(r1, s1_2_2, 0x01F8F4FD, 0xF20407FC, 0xD5BA17FB, 0x02FAFFFF);
	r2 = D(r2, s1_2_2, 0x0013E200, 0xFFFF0B04, 0xFEFF01FF, 0x041104FC);
	r3 = D(r3, s1_2_2, 0x01FDF701, 0xFE04FC01, 0xFD0808FE, 0xED07F007);
	r4 = D(r4, s1_2_2, 0xFBFF0100, 0x05FE0501, 0xFA040401, 0x07FCFEFF);
	r5 = D(r5, s1_2_2, 0x02F4F803, 0x02F7F601, 0xFA0806F7, 0xFA01FF00);
	r6 = D(r6, s1_2_2, 0x040DF6FA, 0x0003F102, 0x04FE0000, 0x00F70805);
	r7 = D(r7, s1_2_2, 0xFCFF01FE, 0xFCF5F0FF, 0xFA0DFAFC, 0xFA0609FB);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x01FD0A05, 0x01FE0204, 0xF400FF03, 0xFF080BFD);
	r1 = D(r1, s0_0_0, 0xF8F90501, 0x0300F806, 0xF4F2EDFC, 0x020BFB09);
	r2 = D(r2, s0_0_0, 0xF70F0EF1, 0xFC0202FE, 0x02FDFB03, 0x05231D08);
	r3 = D(r3, s0_0_0, 0x0105FB06, 0xFF030003, 0x0E03FBFD, 0x0BFF020E);
	r4 = D(r4, s0_0_0, 0xFF0302FD, 0xFB020400, 0xF90403FD, 0xFE0103FD);
	r5 = D(r5, s0_0_0, 0x0000FE01, 0x0300FDFB, 0xFD00F605, 0xF90703F5);
	r6 = D(r6, s0_0_0, 0x0705FD01, 0x04FEFD03, 0x030001FE, 0x05FCFF02);
	r7 = D(r7, s0_0_0, 0x0502FD03, 0xFEFFFEFC, 0xFFFCFE10, 0x02FF01FF);
	r0 = D(r0, s0_0_1, 0x0803010C, 0xFA000202, 0x0708E205, 0xFAFBFA09);
	r1 = D(r1, s0_0_1, 0x0D01FA00, 0x000006F2, 0x0C120DEE, 0x0205020F);
	r2 = D(r2, s0_0_1, 0x092E0BF1, 0x080800F9, 0xEC060A08, 0xFAF1D419);
	r3 = D(r3, s0_0_1, 0x000603FA, 0x04FC0AF7, 0x0001FFF8, 0x0A08F519);
	r4 = D(r4, s0_0_1, 0xFDFF0CF4, 0xFE050005, 0x0203F908, 0x0B07FD02);
	r5 = D(r5, s0_0_1, 0x0F00FA0D, 0xFA04FBFC, 0xFC0005FF, 0xF3040507);
	r6 = D(r6, s0_0_1, 0xFB04F908, 0x040101FD, 0xFBFFFDFC, 0x00FE0DFA);
	r7 = D(r7, s0_0_1, 0x00FEFEFC, 0xFC05FAF3, 0xEF000708, 0xFE0101FB);
	r0 = D(r0, s0_0_2, 0x00FDFF00, 0xFEFF02F3, 0xFD030804, 0xFF020403);
	r1 = D(r1, s0_0_2, 0xFDFDFEFF, 0x0104050E, 0x0D0DFDE0, 0x000004F8);
	r2 = D(r2, s0_0_2, 0xF21EFBF9, 0xFF020010, 0x0903F807, 0xF705F4FC);
	r3 = D(r3, s0_0_2, 0x03FEFF07, 0x02010006, 0xFD00030C, 0xF1E702FF);
	r4 = D(r4, s0_0_2, 0x00010102, 0x0201FBFE, 0xFFFFFEFF, 0x0001000E);
	r5 = D(r5, s0_0_2, 0x050B0903, 0xFC00FFFD, 0x01FE0600, 0xF9FDFAF7);
	r6 = D(r6, s0_0_2, 0xFD05FFF0, 0xFD00FC04, 0x010101FF, 0xFD05FE04);
	r7 = D(r7, s0_0_2, 0xFC010008, 0xFF000304, 0xFFF0FA0E, 0x02FD03FE);
	r0 = D(r0, s0_1_0, 0x0DF9FB09, 0xFA05FB03, 0x0103F600, 0x08F90002);
	r1 = D(r1, s0_1_0, 0xF50402FB, 0xF7FEF706, 0x000E0301, 0xEAFD04FC);
	r2 = D(r2, s0_1_0, 0x1E1E0009, 0x090707FA, 0x0803FB01, 0x12FA3C2D);
	r3 = D(r3, s0_1_0, 0x0A04FD02, 0xFAFDFB00, 0xF008F904, 0xF6F2DD09);
	r4 = D(r4, s0_1_0, 0x0101F803, 0x07FEF706, 0x1803FD04, 0xFFFAF801);
	r5 = D(r5, s0_1_0, 0xF203FA0A, 0xFF0BF9FB, 0xFC090605, 0x0D000CFB);
	r6 = D(r6, s0_1_0, 0xEE06FC04, 0x0E0604FD, 0x020303FE, 0xFA0504FF);
	r7 = D(r7, s0_1_0, 0x000AFAF6, 0xFE0402FF, 0x2D04EBEB, 0x0906FDFD);
	r0 = D(r0, s0_1_1, 0xCEFE23EE, 0x0B03F9EA, 0x03FE1602, 0x1FFF130B);
	r1 = D(r1, s0_1_1, 0xE9F80606, 0xE3031FE4, 0xFC0013F9, 0xE8FCFEF4);
	r2 = D(r2, s0_1_1, 0x15010EE1, 0xE60C0D0A, 0x13FDEDE7, 0xEE14081D);
	r3 = D(r3, s0_1_1, 0xF5080A2B, 0xF3061509, 0x1FFE19F8, 0x0606B993);
	r4 = D(r4, s0_1_1, 0xFEFE15E9, 0x04F903E8, 0xDAF921F2, 0xF5FF1FFF);
	r5 = D(r5, s0_1_1, 0x051117E0, 0x09FF1107, 0x0508F409, 0x05FBF9F6);
	r6 = D(r6, s0_1_1, 0x16F3F8FA, 0xFBF90D0C, 0xF9FFFBF9, 0x0FF80CEF);
	r7 = D(r7, s0_1_1, 0xF3FC0CF0, 0x02FDF41D, 0x0906AEE8, 0x14FA0110);
	r0 = D(r0, s0_1_2, 0x0505FDF7, 0xFE04F904, 0xE1FAEEEE, 0xF9FB0914);
	r1 = D(r1, s0_1_2, 0xEBFBFBFD, 0xFF080111, 0xE22810B9, 0xFCFDF012);
	r2 = D(r2, s0_1_2, 0x1A03E519, 0xFF07F3F7, 0x0601FB0B, 0xFBFD0B05);
	r3 = D(r3, s0_1_2, 0x0600FD04, 0xFAFFF5E8, 0xFB0404F5, 0xEB1D1DE6);
	r4 = D(r4, s0_1_2, 0xF4020600, 0xF8010002, 0x0A05070D, 0xF90003F2);
	r5 = D(r5, s0_1_2, 0xEFF90204, 0xFC010204, 0xFD01F4FF, 0x050201FE);
	r6 = D(r6, s0_1_2, 0xFD07170B, 0xFC010904, 0x01FF0EFF, 0xF70411F7);
	r7 = D(r7, s0_1_2, 0xFD010602, 0xF10D1712, 0x0BEF06FA, 0xF6040C1D);
	r0 = D(r0, s0_2_0, 0x0908FB00, 0xFC00FDFD, 0xF2FCFB00, 0xFAFEF605);
	r1 = D(r1, s0_2_0, 0xFCFBFBF9, 0xF9FEFB0B, 0xFF08F9FE, 0x0403F50D);
	r2 = D(r2, s0_2_0, 0xFCF40403, 0xFA04FFFF, 0x040401FF, 0xCAE30E0C);
	r3 = D(r3, s0_2_0, 0xF80200FC, 0xFA0002F6, 0x0702FCFE, 0xFBFEFCFC);
	r4 = D(r4, s0_2_0, 0x00FEF8FE, 0xFA05FFF6, 0x0201F5F4, 0xF900FD04);
	r5 = D(r5, s0_2_0, 0x0E0701FA, 0x0C07FBFD, 0xF800F603, 0xFE01FAFA);
	r6 = D(r6, s0_2_0, 0x00040102, 0x03FEFD01, 0xFB000101, 0x04040000);
	r7 = D(r7, s0_2_0, 0x0C04FE03, 0x0703FF02, 0x1405F52E, 0x01FE0101);
	r0 = D(r0, s0_2_1, 0x17FA000C, 0x0E010409, 0xEAFCEEFF, 0x0F070E03);
	r1 = D(r1, s0_2_1, 0xF8FEF2FF, 0xFCFF040F, 0xE9E600E5, 0xFF05E9FE);
	r2 = D(r2, s0_2_1, 0x022EF507, 0x12070601, 0x1202FA08, 0xDB20F61A);
	r3 = D(r3, s0_2_1, 0xFE03F800, 0xF802FB05, 0xFE000217, 0xF8EE0C37);
	r4 = D(r4, s0_2_1, 0xFCFE030A, 0xF305F806, 0xF905F716, 0xDCFEF9F2);
	r5 = D(r5, s0_2_1, 0xF7FDFB07, 0xF0010110, 0x11FD05F5, 0x07010504);
	r6 = D(r6, s0_2_1, 0xE70500FC, 0xE502F4EC, 0xFC04FC03, 0xF800F90A);
	r7 = D(r7, s0_2_1, 0x1A00090E, 0xEB02F7F3, 0xFF0108F8, 0xFE030209);
	r0 = D(r0, s0_2_2, 0xFA020BFB, 0xF902FDF6, 0x04FF0F08, 0x010307F5);
	r1 = D(r1, s0_2_2, 0x070006FF, 0xF005FAE7, 0x132913F4, 0x09FF04FA);
	r2 = D(r2, s0_2_2, 0xCF12F0B4, 0xFC03FCF6, 0xF602FDFA, 0x02050605);
	r3 = D(r3, s0_2_2, 0x06FFFF0A, 0x00FE0100, 0x04FFF7F9, 0x04FFFFD0);
	r4 = D(r4, s0_2_2, 0x050001F7, 0xFF01F9FD, 0x10FDF1F1, 0x02FD050A);
	r5 = D(r5, s0_2_2, 0x09020409, 0x0901FB00, 0x0304FD05, 0x020300FB);
	r6 = D(r6, s0_2_2, 0xFE040808, 0x15FEFC03, 0xFDFF0003, 0x05FB0C06);
	r7 = D(r7, s0_2_2, 0xF401F9FB, 0xFD010910, 0x0CFAE0C8, 0x060203EB);
	r0 = D(r0, s1_0_0, 0x09FFFF0C, 0x0B07FD02, 0x08FFFDFD, 0x110303FD);
	r1 = D(r1, s1_0_0, 0x0102FFF7, 0x00040003, 0x040A0E02, 0x01F904F5);
	r2 = D(r2, s1_0_0, 0x10030009, 0x04FB01F6, 0x010200FC, 0x21DCEAD7);
	r3 = D(r3, s1_0_0, 0xF5FEFEFB, 0x020AFB06, 0x05020502, 0x2A04F905);
	r4 = D(r4, s1_0_0, 0xFA0B04FF, 0xF300FE09, 0xF6040302, 0x00020102);
	r5 = D(r5, s1_0_0, 0x0102FF03, 0x01050808, 0xF6FF0109, 0xEFE30419);
	r6 = D(r6, s1_0_0, 0x020DFA0D, 0x020102FF, 0x070502FD, 0x0C040002);
	r7 = D(r7, s1_0_0, 0x08010408, 0xFC0801FA, 0x1309FC15, 0x0AF806FC);
	r0 = D(r0, s1_0_1, 0x04FCF80F, 0xEA00F201, 0xF4FA00EA, 0xFE07F003);
	r1 = D(r1, s1_0_1, 0x14FD081A, 0xFC05FEFD, 0xF40D07FC, 0x0306FC03);
	r2 = D(r2, s1_0_1, 0x070202F9, 0x02F30D08, 0xED010414, 0xE31BEDD3);
	r3 = D(r3, s1_0_1, 0x18F9051D, 0xF4000100, 0xFA0DF2F3, 0xFDF7F5F8);
	r4 = D(r4, s1_0_1, 0xFD08F210, 0x0000F505, 0xFCFF06FE, 0x08FD01FA);
	r5 = D(r5, s1_0_1, 0x140600FB, 0x040BF312, 0xFDFF03F9, 0x03FB07ED);
	r6 = D(r6, s1_0_1, 0x0310F1FB, 0x03070A01, 0x07FDFF06, 0x020501FA);
	r7 = D(r7, s1_0_1, 0x0806F005, 0x0D0B0015, 0xE400F205, 0x0D0C0911);
	r0 = D(r0, s1_0_2, 0x0401FAFF, 0xFFFF0CF4, 0x040006F0, 0x040710F5);
	r1 = D(r1, s1_0_2, 0x0303FE00, 0xF803FAFA, 0x04F4D1E4, 0x04010503);
	r2 = D(r2, s1_0_2, 0x0201020E, 0xFA08F004, 0xF9FFF201, 0xFF13E8F4);
	r3 = D(r3, s1_0_2, 0x05FE15F7, 0xFE06FFFD, 0xFDFA0502, 0xFA0EDC26);
	r4 = D(r4, s1_0_2, 0x0008FDFE, 0x040105FC, 0x0200FD07, 0xFF00F00A);
	r5 = D(r5, s1_0_2, 0x07FDF804, 0x00010FF8, 0x05FA0BF8, 0xFB060FFF);
	r6 = D(r6, s1_0_2, 0x0A0112FE, 0x01FF0104, 0x00FF03FE, 0x02FBFF07);
	r7 = D(r7, s1_0_2, 0xFEFD04FF, 0xFB03F6E9, 0x0803F7F4, 0x00030DE4);
	r0 = D(r0, s1_1_0, 0x020D06FD, 0xFB0700FE, 0xF70AF811, 0x13FC0CFE);
	r1 = D(r1, s1_1_0, 0xE3FDF40F, 0x0402FA00, 0x090A0CFC, 0xFAF8F4F8);
	r2 = D(r2, s1_1_0, 0xE6FFFF10, 0x0BEA06F3, 0xFB02FDFF, 0xFCCDDAE2);
	r3 = D(r3, s1_1_0, 0x1102FFF2, 0x0808FEFD, 0xEA06FE09, 0x0F13F406);
	r4 = D(r4, s1_1_0, 0x0204FD16, 0xFD07F5F4, 0x13FD0412, 0xFB00FF0C);
	r5 = D(r5, s1_1_0, 0x11FE0103, 0xECFE0BFC, 0x00F9FBFD, 0xEAF11202);
	r6 = D(r6, s1_1_0, 0xFA1CF612, 0xF9070209, 0xFB0402FE, 0x010206F8);
	r7 = D(r7, s1_1_0, 0xF90A0605, 0xFBFF06FD, 0x03BBF9EC, 0x030DFC0B);
	r0 = D(r0, s1_1_1, 0x0809FCE9, 0x0CFDFEFF, 0xD9BAC5E7, 0x3AF4C2FD);
	r1 = D(r1, s1_1_1, 0xF5FD08CF, 0x0BD0F90E, 0xF018F907, 0xD7F5DCB3);
	r2 = D(r2, s1_1_1, 0x2281AABD, 0x14EAF924, 0x170603F3, 0xCF070905);
	r3 = D(r3, s1_1_1, 0x3ED6F6FE, 0x17FD160C, 0x1E0D01E1, 0x0CCA13DD);
	r4 = D(r4, s1_1_1, 0x020B11F4, 0xF80207F8, 0xDAFEEFDC, 0xFCFAF2F0);
	r5 = D(r5, s1_1_1, 0xDE81F501, 0x1F05F3FF, 0x11E8D7FA, 0xF705130D);
	r6 = D(r6, s1_1_1, 0xEC080CD7, 0x18EBF70C, 0x3BFDFDF5, 0x1102FDF3);
	r7 = D(r7, s1_1_1, 0xF319FBE0, 0x21FFFA20, 0x04AEC810, 0x21D713E1);
	r0 = D(r0, s1_1_2, 0xFA06FD00, 0xFC03F702, 0xFF0103FB, 0xFAFF08F8);
	r1 = D(r1, s1_1_2, 0xEF0B1305, 0x04F70DF6, 0xFFAD0104, 0xFD060EF2);
	r2 = D(r2, s1_1_2, 0x0EEDDF06, 0xFAF813F3, 0xF8FF0302, 0xF2EDF000);
	r3 = D(r3, s1_1_2, 0xEEFA1303, 0x01FF0600, 0x07FAFE02, 0x1DF0EBE7);
	r4 = D(r4, s1_1_2, 0x010B00FE, 0xF90BFBFE, 0x0A021EFA, 0xF8FF0400);
	r5 = D(r5, s1_1_2, 0x00083B00, 0xFDFF080A, 0xFA07FCF3, 0x04FDFC04);
	r6 = D(r6, s1_1_2, 0x0A0BEA0D, 0xF50A17FA, 0xF9FDFAF5, 0x0C03FDF7);
	r7 = D(r7, s1_1_2, 0x08F60406, 0x1007FD02, 0x0005F304, 0xF60A160B);
	r0 = D(r0, s1_2_0, 0x01F8FF04, 0x01030104, 0x04000201, 0xFD00FD07);
	r1 = D(r1, s1_2_0, 0x09020B05, 0x0004FF05, 0xF7040108, 0xF5F9F203);
	r2 = D(r2, s1_2_0, 0xF3F0001E, 0x0900FBFE, 0xFE0100FF, 0xFA09E818);
	r3 = D(r3, s1_2_0, 0x0709FC01, 0xFF10FF06, 0xFCFA0104, 0xF8E5FBF2);
	r4 = D(r4, s1_2_0, 0xFA040301, 0xF8F90106, 0x030309F7, 0xFD0003FD);
	r5 = D(r5, s1_2_0, 0xFF010002, 0xF202FA08, 0x07FFF9F7, 0x0E050504);
	r6 = D(r6, s1_2_0, 0xF6040300, 0x01FF0003, 0x02FC0201, 0x0800FFFC);
	r7 = D(r7, s1_2_0, 0xF4FC0204, 0x0102FBFD, 0xEFFA05FB, 0xFB030706);
	r0 = D(r0, s1_2_1, 0x11FF05FB, 0xF8FFFD05, 0x0B01FD06, 0xF8F9FCE5);
	r1 = D(r1, s1_2_1, 0x0702FD01, 0xFAFDF4FD, 0xE7FCFC20, 0x01040C08);
	r2 = D(r2, s1_2_1, 0xF2EEF20B, 0xF0F4FF01, 0xFD00FC00, 0xBD021709);
	r3 = D(r3, s1_2_1, 0x01FAFE0C, 0xFEFF0105, 0x0C09FDFA, 0xD3F2EFFD);
	r4 = D(r4, s1_2_1, 0xF9030006, 0xF8F60207, 0x0D06F603, 0x1202FD01);
	r5 = D(r5, s1_2_1, 0x140C0B0A, 0x16070802, 0xF407FCFB, 0x0202FDFE);
	r6 = D(r6, s1_2_1, 0x130D02FD, 0xFD050FFB, 0x07020402, 0x0D0301FC);
	r7 = D(r7, s1_2_1, 0x220B03F1, 0xF5FFFFFB, 0xEBFD0B08, 0xFA05FAFD);
	r0 = D(r0, s1_2_2, 0x06FB06FB, 0xFE030600, 0xFE00FA03, 0x10091AF7);
	r1 = D(r1, s1_2_2, 0x0001FD04, 0xFB000801, 0xDAF7BEEE, 0xFB000406);
	r2 = D(r2, s1_2_2, 0x18EAFB03, 0x03FC01FF, 0x03FE0402, 0xF60BE2FF);
	r3 = D(r3, s1_2_2, 0x0106FFFE, 0xFD0602FF, 0xFDFD06FF, 0x1903FF04);
	r4 = D(r4, s1_2_2, 0xFC06FE01, 0x02FD06FF, 0x00020C01, 0xF900F604);
	r5 = D(r5, s1_2_2, 0x04FBFAFF, 0xF9FFFF03, 0xF1FDFF03, 0x0200FF02);
	r6 = D(r6, s1_2_2, 0xFF0C02FD, 0x08040504, 0x0903FEFE, 0x050303FC);
	r7 = D(r7, s1_2_2, 0x02FA0200, 0x030608FF, 0x04FE0E01, 0x0D0204FD);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x00FCF8FA, 0x030201FA, 0x0308FDEF, 0xFB0006FC);
	r1 = D(r1, s0_0_0, 0x01FF02FA, 0x0203FE05, 0xF7010B06, 0x0303FC05);
	r2 = D(r2, s0_0_0, 0xFBE91A03, 0xFFFD0D00, 0x01FD0105, 0xD6FED0CC);
	r3 = D(r3, s0_0_0, 0x050302FD, 0xFF04FCFF, 0xFCFC0104, 0xF81208FD);
	r4 = D(r4, s0_0_0, 0x00FD0608, 0xFF0201FF, 0x00040100, 0xFEFE0205);
	r5 = D(r5, s0_0_0, 0xFEFE0205, 0xFDFA0106, 0x010403F6, 0x02F80703);
	r6 = D(r6, s0_0_0, 0x0002F8FF, 0x01FFFE00, 0xFFFE03FE, 0x01FF00F8);
	r7 = D(r7, s0_0_0, 0xFEFEFBFD, 0xFD0402FF, 0xEE090500, 0xFEFD0202);
	r0 = D(r0, s0_0_1, 0xFCFC0A06, 0x03FCFAFA, 0xFC060C0A, 0x06F90B01);
	r1 = D(r1, s0_0_1, 0xFD0A0306, 0xFCEF0514, 0xEFFAFDFB, 0xFE1104FE);
	r2 = D(r2, s0_0_1, 0x00F72501, 0xFDFB0D0F, 0xFD040110, 0x08EF0AF5);
	r3 = D(r3, s0_0_1, 0xF000F618, 0xFDFA0A01, 0xFDF4F9FF, 0x0BF2FA0D);
	r4 = D(r4, s0_0_1, 0x01F4FC15, 0x02FEFD08, 0x00050906, 0xFC05010A);
	r5 = D(r5, s0_0_1, 0xFFF908F3, 0xFEF50105, 0x020B05F8, 0xF3051102);
	r6 = D(r6, s0_0_1, 0x0104FDED, 0xFC000501, 0x01FE04FE, 0xFEF9FD03);
	r7 = D(r7, s0_0_1, 0x00F20204, 0x00F20406, 0x11F4FD03, 0xFEF00103);
	r0 = D(r0, s0_0_2, 0x00FAFC01, 0x02F50108, 0xFFFD050F, 0xFC05FAFE);
	r1 = D(r1, s0_0_2, 0xFEF80004, 0xFE0C00FD, 0xF7E815F1, 0x0305FE03);
	r2 = D(r2, s0_0_2, 0x090E1EDE, 0x000511F9, 0xFF0B000E, 0xF4110310);
	r3 = D(r3, s0_0_2, 0x000E0401, 0xFCFE0503, 0xFE090304, 0xFE03FCF5);
	r4 = D(r4, s0_0_2, 0x01FE0906, 0xFF020209, 0x000A00FE, 0x020804FA);
	r5 = D(r5, s0_0_2, 0xFC040B04, 0xFE040708, 0xFE0404FD, 0x03F9FFFC);
	r6 = D(r6, s0_0_2, 0xFFFCF60A, 0x020802FE, 0x00FB0005, 0x01060203);
	r7 = D(r7, s0_0_2, 0x0104FF05, 0x02FB0404, 0xFD07FCF7, 0xFFFC03FE);
	r0 = D(r0, s0_1_0, 0x04F90202, 0x01000305, 0xF9050308, 0x00F40501);
	r1 = D(r1, s0_1_0, 0xF6FE0105, 0x07FB020A, 0x01FEFC12, 0x0AF0E7F0);
	r2 = D(r2, s0_1_0, 0xE8FE0616, 0xFC000BFE, 0x030003FD, 0x9503CDEA);
	r3 = D(r3, s0_1_0, 0x09010106, 0x080400FE, 0xFBFF0605, 0x150503E6);
	r4 = D(r4, s0_1_0, 0x04FD0205, 0x03FF00F9, 0xFC0102FB, 0x02FC040A);
	r5 = D(r5, s0_1_0, 0x0304FF12, 0xF9FC0811, 0xF4FC0D09, 0xE50006F7);
	r6 = D(r6, s0_1_0, 0x0CFDFC02, 0xFAFC0504, 0xFAFF0302, 0xFBFF0201);
	r7 = D(r7, s0_1_0, 0xF6000B07, 0xFE0101FD, 0xF20100EF, 0xFEF70207);
	r0 = D(r0, s0_1_1, 0xE0EBF1F7, 0x05FA03FA, 0xDFEA03E8, 0xD0F3F311);
	r1 = D(r1, s0_1_1, 0xEFF1F4E5, 0xF5FC09F0, 0xE9F40723, 0xFEDDF10B);
	r2 = D(r2, s0_1_1, 0xD60A291A, 0xFCFE0E0A, 0x0CE6FEF4, 0x00F7F6FF);
	r3 = D(r3, s0_1_1, 0xCBF2050E, 0xF1F60806, 0xF0FBF5CF, 0xE8DBD000);
	r4 = D(r4, s0_1_1, 0x05FD03EA, 0x01DEF8F8, 0xFEDAD5E1, 0xF6FE05F5);
	r5 = D(r5, s0_1_1, 0xF50408EC, 0xE2FCFCFD, 0xF9FBFD16, 0x0DF0F6EA);
	r6 = D(r6, s0_1_1, 0x0D07F4EF, 0x00F5EFE0, 0xFCFD020E, 0x02F7F6F0);
	r7 = D(r7, s0_1_1, 0xECF9D9E5, 0x04F7EBF6, 0xD781D515, 0xE7FAFFD6);
	r0 = D(r0, s0_1_2, 0xFAF203FD, 0x0DE10700, 0xF9DF07FE, 0x04EC03F9);
	r1 = D(r1, s0_1_2, 0x08FDFFF8, 0xEC130706, 0xC309BDD6, 0xF602020B);
	r2 = D(r2, s0_1_2, 0xDC0617F2, 0xFE080C15, 0x0AE006F5, 0xF605F306);
	r3 = D(r3, s0_1_2, 0x06FE00F8, 0xFCFA01FB, 0x03080103, 0xF48116F8);
	r4 = D(r4, s0_1_2, 0xFF07FC12, 0x060404FA, 0x000B0004, 0xF8FA0612);
	r5 = D(r5, s0_1_2, 0xF6F50AF6, 0x0700FEF6, 0xFAFE0A0E, 0x0108FD05);
	r6 = D(r6, s0_1_2, 0x07F9F6E2, 0x01EEF401, 0xFFF402F4, 0xF5FB0208);
	r7 = D(r7, s0_1_2, 0xFF0C0308, 0xF4EE0713, 0x1527130F, 0xFAE402F3);
	r0 = D(r0, s0_2_0, 0xFD050305, 0xFE0002FF, 0x0CFCFCFF, 0x0900FE0B);
	r1 = D(r1, s0_2_0, 0x04FD00FA, 0x07FC0002, 0x00FFFE01, 0xFC050201);
	r2 = D(r2, s0_2_0, 0xF1F401FC, 0x00FE09FE, 0xFE03FFFD, 0x1B040EF8);
	r3 = D(r3, s0_2_0, 0x0103FF01, 0x020307FB, 0x00FE0001, 0xE90703F9);
	r4 = D(r4, s0_2_0, 0x00000600, 0xFC0402FF, 0x020102FE, 0x0801FE05);
	r5 = D(r5, s0_2_0, 0xF4FE06FC, 0xFEFF0503, 0x0AFC0200, 0x09060003);
	r6 = D(r6, s0_2_0, 0x0400F701, 0x00FEFEFE, 0x00FC0300, 0xFEFD0001);
	r7 = D(r7, s0_2_0, 0xFAFE02FD, 0xFF010001, 0xF3FA060A, 0xFD0001FF);
	r0 = D(r0, s0_2_1, 0x03F001EF, 0xF3060103, 0x0A08FC04, 0xF1F10AE5);
	r1 = D(r1, s0_2_1, 0x08F70202, 0xFFF6FDFA, 0x03F50CEC, 0x0BE30800);
	r2 = D(r2, s0_2_1, 0xE8F10F0B, 0xFB000F01, 0x0006FF04, 0xF80F08F9);
	r3 = D(r3, s0_2_1, 0x01050409, 0x00FB0107, 0x02F70401, 0xFDF602EB);
	r4 = D(r4, s0_2_1, 0x03F5FBFB, 0x01FE0505, 0x00E40805, 0x17F7F502);
	r5 = D(r5, s0_2_1, 0x01F50106, 0x04F700F9, 0x15F102F5, 0x0602FF02);
	r6 = D(r6, s0_2_1, 0x0C03F200, 0x06FA05FF, 0xFEFD0407, 0x00FD02FF);
	r7 = D(r7, s0_2_1, 0x00F602F4, 0x00FC04F7, 0xFE0304F3, 0x09F804FD);
	r0 = D(r0, s0_2_2, 0xFC040608, 0xF8000202, 0x0804FDFA, 0xF00404FD);
	r1 = D(r1, s0_2_2, 0xFC0601FF, 0xFF150205, 0xD9FF1D01, 0xFC050207);
	r2 = D(r2, s0_2_2, 0xF8FF1815, 0xFEFF0AFE, 0x02FD0203, 0xFF0A0401);
	r3 = D(r3, s0_2_2, 0x04FB02FC, 0x02FEFFFF, 0x0007FF06, 0x10C4F907);
	r4 = D(r4, s0_2_2, 0xFE060308, 0xF5FC0301, 0xFAFB0300, 0x12F6FDF9);
	r5 = D(r5, s0_2_2, 0x0AF90203, 0x03FDFFFF, 0x06FE0101, 0xFC0206FF);
	r6 = D(r6, s0_2_2, 0x05FEF904, 0xF7F50303, 0x01FF05FD, 0x01F5FFFE);
	r7 = D(r7, s0_2_2, 0x00090206, 0xFCF90404, 0xF6C90A11, 0xFD0A0008);
	r0 = D(r0, s1_0_0, 0xFAF6ED02, 0x0200FF06, 0x03FD09FF, 0xFDF9FA02);
	r1 = D(r1, s1_0_0, 0x050108FF, 0xFE02F906, 0xFFFC0324, 0xFDFD0C05);
	r2 = D(r2, s1_0_0, 0xFC150BF4, 0x010200F6, 0xF906FE06, 0x2F2CEAEA);
	r3 = D(r3, s1_0_0, 0x0500F7FE, 0xFFFCF2FD, 0xFD0109FE, 0x0401FC12);
	r4 = D(r4, s1_0_0, 0xFD04FCFB, 0x0003F905, 0xFCFC0100, 0xFB0002FC);
	r5 = D(r5, s1_0_0, 0x02FBFB0A, 0x040003F7, 0xFFFF0702, 0x0BFB0000);
	r6 = D(r6, s1_0_0, 0xFCFD000B, 0xFF00FE00, 0xFDFD00FB, 0x02FAFDFD);
	r7 = D(r7, s1_0_0, 0xFFFE04FB, 0x00F90305, 0x04F5E2FF, 0xFBFF00FC);
	r0 = D(r0, s1_0_1, 0x0402E80F, 0x01FDF0F7, 0x05FCF7F7, 0x09F6F003);
	r1 = D(r1, s1_0_1, 0xF9FF0804, 0xFEEF0FFD, 0x191CF4FE, 0xFD02FDFB);
	r2 = D(r2, s1_0_1, 0x05E714FF, 0x09FF0300, 0xF500F816, 0xFDC01129);
	r3 = D(r3, s1_0_1, 0x00000508, 0xFEFEFDF2, 0x09EC1506, 0x0205F2F4);
	r4 = D(r4, s1_0_1, 0x03FD01FB, 0x01000701, 0x00FEFE14, 0xFCFE0F02);
	r5 = D(r5, s1_0_1, 0x0CF403FD, 0xFD0403F8, 0x020005FE, 0x0CF5F5FF);
	r6 = D(r6, s1_0_1, 0xF6030002, 0x01FC0409, 0xFCFEFD00, 0xFDF3FF05);
	r7 = D(r7, s1_0_1, 0x04F40D05, 0xF7070404, 0x00F2EF01, 0x06F5F106);
	r0 = D(r0, s1_0_2, 0xFD020602, 0xFF0100FD, 0x0104FC0B, 0x0604F9FF);
	r1 = D(r1, s1_0_2, 0xFC0A0606, 0x0407F203, 0xFBE51C22, 0xFC08FF05);
	r2 = D(r2, s1_0_2, 0x01100606, 0xFEFFFE01, 0x0907FD00, 0x070D020A);
	r3 = D(r3, s1_0_2, 0x00F7FB04, 0x00FBFE01, 0x0504FA08, 0x06FF0EFC);
	r4 = D(r4, s1_0_2, 0x0003F804, 0x080203FE, 0x04FAFF07, 0xFBFFFDFB);
	r5 = D(r5, s1_0_2, 0x0EFAFA06, 0x06FBFBFF, 0x02F909FD, 0x05FD0A01);
	r6 = D(r6, s1_0_2, 0x01FE0300, 0x03FCFE0B, 0xFDFD0300, 0xFFFCF605);
	r7 = D(r7, s1_0_2, 0x0107FD01, 0x00FF0705, 0x0BDE0FF0, 0x0DF2FF10);
	r0 = D(r0, s1_1_0, 0x020400F6, 0x01060102, 0x210206FA, 0xF5F3F814);
	r1 = D(r1, s1_1_0, 0x01FEFAF6, 0x0DFE0AF6, 0x07F50505, 0x24E4CCF1);
	r2 = D(r2, s1_1_0, 0x060FF402, 0xF5FBFD06, 0x040108FC, 0x36F8F4FB);
	r3 = D(r3, s1_1_0, 0x0200FD04, 0xFDFDF601, 0x03FC06F7, 0x07152102);
	r4 = D(r4, s1_1_0, 0x00FBFEFA, 0x0CFEFCFE, 0x02F0F606, 0x0405FAFB);
	r5 = D(r5, s1_1_0, 0x06050200, 0xF2FF05FD, 0xF5FEF4FF, 0x11F2FDF1);
	r6 = D(r6, s1_1_0, 0x120802F9, 0x03F0050B, 0xFCFCFD00, 0xFCF6FE07);
	r7 = D(r7, s1_1_0, 0xF4FC0F00, 0x03F40004, 0x05FAE722, 0xFFF606FE);
	r0 = D(r0, s1_1_1, 0xFCF4050A, 0xEC03E917, 0x15F5ECEE, 0x0DFA001A);
	r1 = D(r1, s1_1_1, 0xFEFBF0FB, 0xEDF0EE15, 0x28FDFC00, 0x1CF00DF9);
	r2 = D(r2, s1_1_1, 0xD81F1328, 0xFE0412FA, 0xF2FCE11D, 0xF0FCF223);
	r3 = D(r3, s1_1_1, 0x00020EEE, 0x06F7F7FB, 0xD7EE030D, 0x1A05B30B);
	r4 = D(r4, s1_1_1, 0x04FF02FF, 0xEB00E816, 0x15D00017, 0x16FCE3F6);
	r5 = D(r5, s1_1_1, 0x1AE0F9F5, 0x020410F2, 0x02FBF609, 0xE9FF0CFF);
	r6 = D(r6, s1_1_1, 0x0300E902, 0x0CFBC9F1, 0xFDFD00FB, 0x0BF2F3FC);
	r7 = D(r7, s1_1_1, 0xFFEB1612, 0x1300D7D9, 0x12F201EB, 0x11F7ED1E);
	r0 = D(r0, s1_1_2, 0x07FBF607, 0xF802FCF1, 0x08FF0CF1, 0xFCF309FF);
	r1 = D(r1, s1_1_2, 0x0C000CFE, 0x0903D0FB, 0xB81BF521, 0x15F905FF);
	r2 = D(r2, s1_1_2, 0x0F11C601, 0x0305E9FD, 0xECFF0903, 0x06F9F7F3);
	r3 = D(r3, s1_1_2, 0x05EF1503, 0x02F60600, 0x0805F402, 0x280DF404);
	r4 = D(r4, s1_1_2, 0x0000FA02, 0x010402F7, 0x00FFFE06, 0x02F6FEFD);
	r5 = D(r5, s1_1_2, 0xEEFBF10B, 0xFCFC0207, 0x05F802FC, 0x0503F402);
	r6 = D(r6, s1_1_2, 0xFCFA1802, 0x03ED0A16, 0xFEFD0DFE, 0x0BF9F708);
	r7 = D(r7, s1_1_2, 0x0505F400, 0xFE030F10, 0xF82E12DE, 0xF7FD01F0);
	r0 = D(r0, s1_2_0, 0x01F60403, 0x00FEFDFC, 0xFB04F70B, 0x05FF01FC);
	r1 = D(r1, s1_2_0, 0x00010306, 0x0A050401, 0x0A08FCF5, 0x0CF415F4);
	r2 = D(r2, s1_2_0, 0xFC1A02FD, 0x07FFFFFE, 0x01F700FC, 0x163617E6);
	r3 = D(r3, s1_2_0, 0x0308FBFB, 0xFF04FDFC, 0x04FD0000, 0x0ECF04E9);
	r4 = D(r4, s1_2_0, 0x02010206, 0x02F703FD, 0xFAEF0509, 0xFA05FD00);
	r5 = D(r5, s1_2_0, 0x0CF502FB, 0x03FBFEFC, 0x08F9F8F9, 0xFFFC05F9);
	r6 = D(r6, s1_2_0, 0xFA01FDFF, 0x00FB0402, 0xFEFE0000, 0xFFFAFEFE);
	r7 = D(r7, s1_2_0, 0x07FBFDFF, 0xFEFBFFFE, 0x0AF51011, 0x0AFA0103);
	r0 = D(r0, s1_2_1, 0xF2F7FD04, 0x07FE01FD, 0x00FC0100, 0xF3E4FB06);
	r1 = D(r1, s1_2_1, 0x08FEF8FF, 0xF7F1F8F8, 0x19311EF5, 0x09F9FBFC);
	r2 = D(r2, s1_2_1, 0x140013F0, 0xFEFC0001, 0x02F607FF, 0x0EE2E909);
	r3 = D(r3, s1_2_1, 0x010B0501, 0xFFFAFA02, 0x02ECFC00, 0x0F0316F7);
	r4 = D(r4, s1_2_1, 0x01FFF5F9, 0x06F801F8, 0x08F2F8F2, 0xFC00F506);
	r5 = D(r5, s1_2_1, 0xFEFE0500, 0xFC07FF03, 0xF601FD04, 0x04040600);
	r6 = D(r6, s1_2_1, 0x0403FDFC, 0xF7F0FE01, 0x05FC02FA, 0x0800F8FE);
	r7 = D(r7, s1_2_1, 0xF3E8FAFC, 0x04FA02FD, 0x19F3E9F4, 0xFFF201F3);
	r0 = D(r0, s1_2_2, 0x0A05FCFD, 0x010101FC, 0x01050000, 0x07F2EE05);
	r1 = D(r1, s1_2_2, 0x0202FF00, 0x04070600, 0xE6D8140A, 0x020501FF);
	r2 = D(r2, s1_2_2, 0x041408FE, 0xFEFEFD01, 0x010100FF, 0x0900F9FC);
	r3 = D(r3, s1_2_2, 0xFFED0A05, 0xFEFEF602, 0x050602FE, 0xFF021510);
	r4 = D(r4, s1_2_2, 0x0401F600, 0x00F906FD, 0xFEF60F07, 0xFA020200);
	r5 = D(r5, s1_2_2, 0x08FF0F03, 0x02FB0800, 0xFB0504FE, 0x0000F901);
	r6 = D(r6, s1_2_2, 0x000002FE, 0x03F6F702, 0x01FB00FE, 0xF6FE0201);
	r7 = D(r7, s1_2_2, 0x0503F8FF, 0x01000A04, 0x02FC1A0A, 0x0001F4FF);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFFFC01FE, 0xFDF80204, 0xF7FF0901, 0x0504FF07);
	r1 = D(r1, s0_0_0, 0xFF030701, 0xFEFF0304, 0x0102FE02, 0xFF050305);
	r2 = D(r2, s0_0_0, 0x02F60808, 0x0504FEFE, 0x05FFFF01, 0xCC180015);
	r3 = D(r3, s0_0_0, 0x030802FC, 0xFFFF04FC, 0xFD020308, 0xFFFC0C02);
	r4 = D(r4, s0_0_0, 0xFF01FF02, 0xFF010000, 0x0609FDFB, 0x0101FE00);
	r5 = D(r5, s0_0_0, 0xFCF5FD02, 0x01040101, 0xFDFF05FE, 0xF708EF0A);
	r6 = D(r6, s0_0_0, 0xF7FE0301, 0x0205FFFE, 0xFEFD00FE, 0x03FF01FE);
	r7 = D(r7, s0_0_0, 0xFB0400FF, 0x0000FE03, 0xFBFA0A07, 0x02FFFEFE);
	r0 = D(r0, s0_0_1, 0xFF021205, 0xFD05FCFF, 0x00060402, 0xFCF90C04);
	r1 = D(r1, s0_0_1, 0x02FF0903, 0x0402FCFC, 0x070FEDF1, 0xFE02FD03);
	r2 = D(r2, s0_0_1, 0x0202050F, 0x02030609, 0xF4F80206, 0x23F205F9);
	r3 = D(r3, s0_0_1, 0xF80609FE, 0xF805FFF8, 0x01000312, 0xF10219F9);
	r4 = D(r4, s0_0_1, 0xFF000402, 0xFEFB07FC, 0x00FFFB00, 0x0500FE09);
	r5 = D(r5, s0_0_1, 0x0302FDF9, 0xFC00FEFF, 0x00FCFEFC, 0x060202CA);
	r6 = D(r6, s0_0_1, 0xFA00F9F9, 0x03000104, 0xFFFF04FD, 0xFE000304);
	r7 = D(r7, s0_0_1, 0x03FC040B, 0xF60500F7, 0xF3FF1CFA, 0xF7FD05FB);
	r0 = D(r0, s0_0_2, 0xFD00F804, 0xF7000204, 0xF5010208, 0xFF020405);
	r1 = D(r1, s0_0_2, 0xFEFFF705, 0x00FE04FB, 0xFE04D024, 0x02000003);
	r2 = D(r2, s0_0_2, 0x00F704F9, 0x0002F9FE, 0xFDFBFA05, 0x01FE0318);
	r3 = D(r3, s0_0_2, 0x00FE020E, 0x0502F9FF, 0x0303FFFA, 0x17FF1011);
	r4 = D(r4, s0_0_2, 0x01000102, 0xFF010205, 0x08FFFEFF, 0x0204F201);
	r5 = D(r5, s0_0_2, 0xFC02FEEC, 0x00FF0406, 0xFD000609, 0x000103FD);
	r6 = D(r6, s0_0_2, 0x02010800, 0x0500FBFB, 0xFEFD0602, 0x000101FC);
	r7 = D(r7, s0_0_2, 0x0002FFFF, 0x03FE0C19, 0x06F5021A, 0xF8010907);
	r0 = D(r0, s0_1_0, 0xF30004F7, 0xFBE2FFFC, 0xFB07070B, 0xFCFF01F8);
	r1 = D(r1, s0_1_0, 0xF4080009, 0xFD1703FD, 0xF1FB010B, 0xE0F50204);
	r2 = D(r2, s0_1_0, 0xE027F601, 0x01F6FD04, 0xFB160301, 0x813D000D);
	r3 = D(r3, s0_1_0, 0xFD1604FC, 0xF80702F9, 0xF21B0302, 0xD528FEEC);
	r4 = D(r4, s0_1_0, 0xF70203FF, 0xF10704FD, 0xF3F00606, 0xFBFA01FE);
	r5 = D(r5, s0_1_0, 0xFD0DFEF5, 0x030C000F, 0xF209FE02, 0x0B2007E8);
	r6 = D(r6, s0_1_0, 0xFF0A04FC, 0xFFF9FF00, 0xFC0400FF, 0xF900FFFE);
	r7 = D(r7, s0_1_0, 0xF70B0212, 0x0103FF04, 0xE81C0FF3, 0xFCF7000E);
	r0 = D(r0, s0_1_1, 0xF8FF00F5, 0xF7030CF8, 0xF40F1BF8, 0xF51004D9);
	r1 = D(r1, s0_1_1, 0xE80710D8, 0xE70CF818, 0x08391801, 0xEAF30D00);
	r2 = D(r2, s0_1_1, 0xD805E81F, 0xE5FD08F8, 0xE1160EF0, 0xE7DF14DC);
	r3 = D(r3, s0_1_1, 0x001506F3, 0x0304FFF1, 0xE7F60507, 0xCD1EE200);
	r4 = D(r4, s0_1_1, 0xF407ED09, 0xE70400F0, 0xD2FCF9FA, 0xF1EEFFFB);
	r5 = D(r5, s0_1_1, 0xF307F621, 0xEE0AFF04, 0xEA030C11, 0xFF0C0B09);
	r6 = D(r6, s0_1_1, 0x1B03FC08, 0xEDFB09FA, 0xFB0904FF, 0xF3F10AFD);
	r7 = D(r7, s0_1_1, 0xE7FE0813, 0xEA1612EC, 0xD31F1106, 0xBE2100E1);
	r0 = D(r0, s0_1_2, 0x01FE0408, 0x0400FCF8, 0x0D041AF7, 0xFDF4FF07);
	r1 = D(r1, s0_1_2, 0xFD0101F7, 0x07031801, 0x8109E3EB, 0xF0FCF808);
	r2 = D(r2, s0_1_2, 0xE00B010C, 0x05020AFF, 0x0404F4F4, 0xFA0102F5);
	r3 = D(r3, s0_1_2, 0xFEFFFDEA, 0x0601FB03, 0x0500100B, 0xCD0CD8EA);
	r4 = D(r4, s0_1_2, 0x02FF0AFA, 0x0102F5FB, 0xFE03F2F8, 0x00FCF6F9);
	r5 = D(r5, s0_1_2, 0xFC0A1B0C, 0x0401F7F3, 0x02F8E2FC, 0x010104FD);
	r6 = D(r6, s0_1_2, 0xF900FB05, 0xECFF070C, 0xFDFD07F7, 0x03FF0E02);
	r7 = D(r7, s0_1_2, 0x02010AF6, 0x09FA1B11, 0xFB0CE9E9, 0x05FBFCFF);
	r0 = D(r0, s0_2_0, 0x0211FF05, 0x040E0002, 0x080403F6, 0xE8090105);
	r1 = D(r1, s0_2_0, 0x020206EC, 0xFCFF02F8, 0x05EF0016, 0x07100510);
	r2 = D(r2, s0_2_0, 0xF215F7FD, 0x02040001, 0x05FE0004, 0xF04A10F8);
	r3 = D(r3, s0_2_0, 0xFCF9FF10, 0x02FD0003, 0xFA0601F9, 0x0B310414);
	r4 = D(r4, s0_2_0, 0xFAE102F4, 0x050E0003, 0xF51801F3, 0xFF0C0001);
	r5 = D(r5, s0_2_0, 0x0100000A, 0xF90EFB02, 0xFC120201, 0xFB070212);
	r6 = D(r6, s0_2_0, 0xFE0800FE, 0xFE0603FF, 0x020400FD, 0x031A0105);
	r7 = D(r7, s0_2_0, 0xF72400F5, 0x00E1000E, 0xD71EFC0B, 0xF9FD00F1);
	r0 = D(r0, s0_2_1, 0xF4F80A12, 0x0A0501FA, 0xF80C000A, 0xFFFC010A);
	r1 = D(r1, s0_2_1, 0x020FFFFA, 0xFE04F614, 0xE634FFF2, 0xFE0C11EE);
	r2 = D(r2, s0_2_1, 0xEF2DF81A, 0x09F2F901, 0x060200FC, 0x0703EFF5);
	r3 = D(r3, s0_2_1, 0x0613FE0D, 0x0B0401FF, 0x0DF8FB0F, 0x0E061EFE);
	r4 = D(r4, s0_2_1, 0x03FFFE06, 0x0A030BF6, 0x050E0BED, 0xF81A06FA);
	r5 = D(r5, s0_2_1, 0x05180608, 0xF908FC0D, 0x04120202, 0xFEFB00EF);
	r6 = D(r6, s0_2_1, 0xF51F07FA, 0xF925FB09, 0x010AFF08, 0xF80B04F8);
	r7 = D(r7, s0_2_1, 0x02F00212, 0xEC1904FD, 0x080221F8, 0x0502F91E);
	r0 = D(r0, s0_2_2, 0x06050B04, 0x03060801, 0x0504FB07, 0x05FC1C01);
	r1 = D(r1, s0_2_2, 0x080306FA, 0x03FC1501, 0xDA05AD16, 0x0600FD06);
	r2 = D(r2, s0_2_2, 0xF0F40C0B, 0xFD0403FE, 0x06000407, 0x01F9FD11);
	r3 = D(r3, s0_2_2, 0xFDFCF9EE, 0xFE0304FA, 0x03040A07, 0x080305EA);
	r4 = D(r4, s0_2_2, 0x02000C02, 0x02000002, 0x0600FF00, 0x0202F9FD);
	r5 = D(r5, s0_2_2, 0x02FA01F0, 0x06FEF8F6, 0x040FFBFC, 0x06FEFF01);
	r6 = D(r6, s0_2_2, 0x0303F600, 0x0DFB0CF0, 0xFFFA00FC, 0xFD01FBFA);
	r7 = D(r7, s0_2_2, 0x03030F0B, 0x06FA0103, 0x16FC0013, 0x02FF120E);
	r0 = D(r0, s1_0_0, 0x1401F302, 0x02F8FD07, 0xF3000D13, 0xFBF5F603);
	r1 = D(r1, s1_0_0, 0xF1070507, 0x02FF0401, 0x07F11209, 0xFAFB0C01);
	r2 = D(r2, s1_0_0, 0x030D03FC, 0x05FF0402, 0x0EFFF101, 0xD1F3E2EE);
	r3 = D(r3, s1_0_0, 0xFFFF0507, 0xFBFFFA05, 0x02F7FD03, 0xFD05DE08);
	r4 = D(r4, s1_0_0, 0x09FB0400, 0x0404FD03, 0x01FD0D01, 0xFF0610FA);
	r5 = D(r5, s1_0_0, 0x03000AF6, 0x01F90406, 0x1302ECFE, 0xE4E8FA0E);
	r6 = D(r6, s1_0_0, 0xF80003F8, 0x04010903, 0x03FE06FF, 0x09FBFA06);
	r7 = D(r7, s1_0_0, 0xF9FA0805, 0x01FA0408, 0xFB08EA17, 0xFCFF070A);
	r0 = D(r0, s1_0_1, 0xF503F6F7, 0xFC0B1001, 0x02FC0AFD, 0x0605E903);
	r1 = D(r1, s1_0_1, 0xDEED0006, 0x03F8FF00, 0x1801011A, 0x08FD0501);
	r2 = D(r2, s1_0_1, 0xEFFA080C, 0x07F7FDFD, 0x01FD010D, 0x15110125);
	r3 = D(r3, s1_0_1, 0xF5FFF8F3, 0x06F9EB00, 0xF80DE004, 0xF9021811);
	r4 = D(r4, s1_0_1, 0xF4080401, 0xF900FD02, 0x05FC0201, 0xFFFC01FF);
	r5 = D(r5, s1_0_1, 0xFFFD0201, 0xFD0AF1FC, 0x000BFE01, 0x05F6F1FD);
	r6 = D(r6, s1_0_1, 0xFB020000, 0xFCF20302, 0x0108FEFE, 0xF1F804FF);
	r7 = D(r7, s1_0_1, 0xFFFBFBFF, 0x0B020309, 0xF7160314, 0x0BF5DB03);
	r0 = D(r0, s1_0_2, 0xFE020204, 0xFCF40E00, 0x07030FFF, 0xF8F5FB00);
	r1 = D(r1, s1_0_2, 0xF7040C03, 0x0601F4F8, 0xF80CC821, 0xFFFC0501);
	r2 = D(r2, s1_0_2, 0x0702E708, 0x04060500, 0xFC0507FF, 0x0A0CF203);
	r3 = D(r3, s1_0_2, 0x02100CFD, 0xFFFB04FE, 0xFFFDEEFF, 0x0807DB08);
	r4 = D(r4, s1_0_2, 0xFCFD0100, 0xFFF80200, 0x02FAF6FF, 0x030BFDFE);
	r5 = D(r5, s1_0_2, 0xF0E7EAFA, 0xFF04F4FC, 0xFDFEFDFF, 0x09FF0300);
	r6 = D(r6, s1_0_2, 0xFDF8FBFD, 0x03FEF900, 0xFC04FE00, 0x03FEFDFF);
	r7 = D(r7, s1_0_2, 0x03FDFE00, 0x01F8F903, 0xF9040708, 0xF600D904);
	r0 = D(r0, s1_1_0, 0xDEFA080D, 0xFC0300FB, 0x0BF1D100, 0x0E06FE0D);
	r1 = D(r1, s1_1_0, 0x04F3E5FF, 0x00050004, 0xEDFE13F3, 0x1904FA1A);
	r2 = D(r2, s1_1_0, 0x0908170C, 0x040500F6, 0xFBFCFF07, 0x9E170DF5);
	r3 = D(r3, s1_1_0, 0xF502F821, 0xFB06FD0B, 0x0A03FE0F, 0x81E4362F);
	r4 = D(r4, s1_1_0, 0xFEFFFF06, 0xFCF7ED05, 0x09F3FA08, 0x05F7F8FA);
	r5 = D(r5, s1_1_0, 0x01050BDD, 0x0FFC01FF, 0x07FC0216, 0xFD01F700);
	r6 = D(r6, s1_1_0, 0xFFFC020B, 0x03000404, 0x01FE01F9, 0xF2000903);
	r7 = D(r7, s1_1_0, 0xF1F80009, 0x05020400, 0xC2091B08, 0x0DFA0200);
	r0 = D(r0, s1_1_1, 0x18F7E009, 0xE5F105FD, 0xF1E9F01C, 0xCDF000F0);
	r1 = D(r1, s1_1_1, 0x0308F301, 0xF5F10014, 0xCC0B0827, 0x0602EA09);
	r2 = D(r2, s1_1_1, 0xF3E32019, 0xF9DE0217, 0xE4F60CEF, 0xE915D9F5);
	r3 = D(r3, s1_1_1, 0xFBFFFBEF, 0xFEFFFC0A, 0xFE1FFE1A, 0xF0BE08FF);
	r4 = D(r4, s1_1_1, 0x0B0EFA00, 0xFE03FAFF, 0x1C10E50D, 0x1FF60012);
	r5 = D(r5, s1_1_1, 0xFFD8D514, 0xED28FCF3, 0x00D80A09, 0x0109F500);
	r6 = D(r6, s1_1_1, 0x102DFAEB, 0x12F7EC09, 0x090AFBF5, 0x0113FC13);
	r7 = D(r7, s1_1_1, 0x072FC613, 0xE60DF209, 0xDFCB13F9, 0xDEF800FB);
	r0 = D(r0, s1_1_2, 0xFA03FCFD, 0xF9050101, 0x2CFAE800, 0x0D100106);
	r1 = D(r1, s1_1_2, 0x0FFAEE01, 0xF903FAFC, 0xE4F29620, 0x0D02DD02);
	r2 = D(r2, s1_1_2, 0x05F312F7, 0xF70AFDFA, 0x0EF90205, 0xFF12BBFB);
	r3 = D(r3, s1_1_2, 0x0B0F0301, 0x0B040701, 0xFEFB01FF, 0xBAD204F2);
	r4 = D(r4, s1_1_2, 0x0300FDFE, 0x0AFDF500, 0xFCFFE7FF, 0x0000FA01);
	r5 = D(r5, s1_1_2, 0x110EE5FE, 0x0215FA00, 0x0D0EF800, 0xFC020401);
	r6 = D(r6, s1_1_2, 0x0DF50402, 0x0006E302, 0x090EFC00, 0x01FFF202);
	r7 = D(r7, s1_1_2, 0xFE05F600, 0xF6FCE707, 0x0FEE1C06, 0x1009FC04);
	r0 = D(r0, s1_2_0, 0x0D020402, 0x01FDFEFB, 0x08030B01, 0xFBFD03FC);
	r1 = D(r1, s1_2_0, 0xF6030700, 0x03020308, 0x0401EDFA, 0x14030102);
	r2 = D(r2, s1_2_0, 0xFF010212, 0xFBFFFFF1, 0xFD020300, 0x1410F411);
	r3 = D(r3, s1_2_0, 0x00FE0207, 0x06FBF605, 0xFDFFFF07, 0x0C04ACEA);
	r4 = D(r4, s1_2_0, 0x0504FE03, 0x0200FC01, 0x06FDF906, 0xFD03FC06);
	r5 = D(r5, s1_2_0, 0xFFFD0406, 0xFBFE01FC, 0x000208F6, 0x00FE05FB);
	r6 = D(r6, s1_2_0, 0x0401000C, 0xFEFDFF00, 0xFF01FEF9, 0x0101FEFF);
	r7 = D(r7, s1_2_0, 0xFAFFFE09, 0x02000208, 0x02EDF203, 0x05020202);
	r0 = D(r0, s1_2_1, 0xE6FEFF04, 0xFFFA0106, 0x010201FA, 0xFF00F90C);
	r1 = D(r1, s1_2_1, 0xF3F803F8, 0xFCFAFC0F, 0x02010932, 0xECFB0104);
	r2 = D(r2, s1_2_1, 0x0CE1A41C, 0xFDFAFF08, 0x02FF0001, 0x140AFAFD);
	r3 = D(r3, s1_2_1, 0x05FCFCF6, 0x02FAFDFF, 0x0706FD05, 0x0B0FBF13);
	r4 = D(r4, s1_2_1, 0xFE0AFDFB, 0x10FBFB05, 0x02F6F4FF, 0x060A00F6);
	r5 = D(r5, s1_2_1, 0x01FAFEFD, 0xF11302FA, 0xF202FA08, 0x01FFFE04);
	r6 = D(r6, s1_2_1, 0x070302F9, 0x09FEFB04, 0x05FFFFF6, 0xF9F80101);
	r7 = D(r7, s1_2_1, 0xEC07FF0E, 0xFBFEFB14, 0x10FBDC10, 0xFBFD0112);
	r0 = D(r0, s1_2_2, 0x08FE0001, 0x0903FC01, 0xF6FF06FF, 0xFDF9FFFD);
	r1 = D(r1, s1_2_2, 0xFAFF07FF, 0x0304FA01, 0x2112C315, 0x03F70301);
	r2 = D(r2, s1_2_2, 0x190CE2FD, 0x0707FFFD, 0x03FFFFFF, 0x10F70BFD);
	r3 = D(r3, s1_2_2, 0xFC040403, 0xFD0102FF, 0x09FCFC01, 0xE5F6FC0E);
	r4 = D(r4, s1_2_2, 0x03FDFEFF, 0x0603FD02, 0x10FC0101, 0xFAFA0103);
	r5 = D(r5, s1_2_2, 0x0100FA05, 0x07010004, 0x0AFDFB00, 0x05FCFFFE);
	r6 = D(r6, s1_2_2, 0xF7F60100, 0xFCFDFC03, 0xFD07FFFF, 0x04040100);
	r7 = D(r7, s1_2_2, 0x07FA0100, 0x0CFFFA06, 0x1500C20A, 0x05FBFC02);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.398e-02, -1.026e-02, -9.657e-03, -1.413e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-7.344e-03, -6.948e-03, -2.424e-02, -1.106e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-7.043e-01, -1.874e-02, -1.757e-02, -4.524e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(3.827e-03, -5.114e-03, -1.193e-02, -1.587e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-9.674e-03, -6.132e-03, -1.450e-02, -1.102e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-7.597e-03, -7.602e-03, -3.692e-03, -6.302e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(1.619e-02, -7.768e-03, -3.222e-03, -1.254e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.650e-02, -1.161e-02, -2.508e-02, -1.280e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-DS-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv8
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
shared V4 G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv8_pt;
			V4 sr0 = V4(conv8_gather(p, 0));
			V4 sg0 = V4(conv8_gather(p, 1));
			V4 sb0 = V4(conv8_gather(p, 2));
			V4 sa0 = V4(conv8_gather(p, 3));
			G[0][ay][ax] = V4(sr0.w, sg0.w, sb0.w, sa0.w);
			G[1][ay][ax] = V4(sr0.z, sg0.z, sb0.z, sa0.z);
			G[2][ay][ax] = V4(sr0.x, sg0.x, sb0.x, sa0.x);
			G[3][ay][ax] = V4(sr0.y, sg0.y, sb0.y, sa0.y);
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv8_pt;
			V4 sr1 = V4(conv8_gather(p, 0));
			V4 sg1 = V4(conv8_gather(p, 1));
			V4 sb1 = V4(conv8_gather(p, 2));
			V4 sa1 = V4(conv8_gather(p, 3));
			G[4][ay][ax] = V4(sr1.w, sg1.w, sb1.w, sa1.w);
			G[5][ay][ax] = V4(sr1.z, sg1.z, sb1.z, sa1.z);
			G[6][ay][ax] = V4(sr1.x, sg1.x, sb1.x, sa1.x);
			G[7][ay][ax] = V4(sr1.y, sg1.y, sb1.y, sa1.y);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(2.609e-02, 4.044e-03, 1.039e-02, -3.949e-03, 1.412e-02, 6.435e-03, 1.283e-03, 1.990e-03, -2.069e-02, -1.173e-02, 7.558e-04, -9.585e-04, -3.577e-02, -3.861e-03, 1.210e-02, 1.125e-03) * s0_0_0;
	r0 += M4(-6.769e-02, -2.146e-02, -1.384e-03, -1.296e-02, 1.605e-02, 1.910e-02, -2.129e-03, -1.271e-03, -1.141e-02, -1.516e-02, 1.625e-03, 1.035e-03, -1.714e-02, 1.205e-01, -2.294e-02, 1.056e-02) * s0_0_1;
	r0 += M4(-7.058e-03, 4.493e-02, -2.095e-03, 2.265e-04, 8.736e-04, 7.965e-03, 3.578e-04, 1.835e-05, -8.654e-03, -1.581e-02, 1.063e-05, 1.938e-03, -3.818e-03, -2.413e-02, -3.301e-03, -2.753e-03) * s0_0_2;
	r0 += M4(-9.314e-03, -1.888e-03, 2.008e-02, -1.224e-02, -2.797e-03, 6.668e-03, 2.970e-02, -1.651e-03, 1.010e-01, 1.500e-02, -4.437e-02, -1.302e-02, -5.040e-03, 5.620e-03, -3.380e-02, 1.236e-02) * s0_1_0;
	r0 += M4(1.713e-01, 2.715e-02, -2.437e-01, 1.562e-01, 5.670e-03, -1.248e-02, 8.716e-02, 1.125e-01, 1.069e-01, 1.880e-01, -6.727e-02, -8.679e-02, 2.108e-02, -5.043e-02, 1.900e-01, -7.792e-02) * s0_1_1;
	r0 += M4(4.213e-02, -2.000e-01, 6.720e-02, -1.924e-02, 3.794e-03, 1.427e-02, -5.217e-03, 7.125e-03, 4.260e-03, 1.765e-02, -4.979e-03, -2.141e-02, -1.395e-03, 3.247e-02, -1.296e-02, -4.355e-02) * s0_1_2;
	r0 += M4(-5.308e-03, -3.947e-04, -9.804e-03, -4.420e-03, 5.884e-04, 2.538e-03, -5.710e-02, 5.557e-04, -9.834e-03, -2.770e-03, -2.042e-02, -4.958e-03, 2.874e-04, -3.410e-04, -1.488e-03, 2.364e-03) * s0_2_0;
	r0 += M4(-1.407e-02, -8.868e-03, 5.310e-02, -7.993e-03, 8.882e-03, 3.357e-03, -1.136e-01, -1.538e-01, -2.838e-03, -1.590e-02, -4.416e-02, -5.106e-02, 1.137e-03, -1.696e-03, -1.155e-02, -1.043e-02) * s0_2_1;
	r0 += M4(-7.659e-04, 1.752e-02, -2.063e-02, 1.738e-02, -2.739e-03, 2.582e-03, 7.187e-03, -1.147e-02, -2.030e-03, -1.884e-03, 3.505e-03, -7.461e-03, -4.786e-03, -1.422e-03, -2.301e-03, 4.788e-03) * s0_2_2;
	r0 += M4(7.819e-03, 3.074e-03, 1.671e-03, 7.404e-04, 1.369e-02, -3.350e-03, 8.152e-03, -2.421e-04, -1.306e-01, 1.179e-01, -7.323e-02, 6.751e-02, 5.843e-03, 3.282e-03, -1.500e-03, 2.661e-03) * s1_0_0;
	r0 += M4(-8.631e-03, 7.949e-03, 1.437e-02, 1.447e-02, -5.864e-02, 7.690e-02, -6.049e-03, 4.346e-03, 1.457e-02, 1.431e-02, 3.668e-03, -8.501e-03, 2.611e-02, -1.563e-03, 5.726e-03, 4.717e-03) * s1_0_1;
	r0 += M4(-2.648e-02, -3.582e-02, 1.023e-02, 1.413e-02, 3.766e-03, -1.206e-02, -1.398e-03, -7.278e-03, -2.139e-04, 1.295e-03, -7.986e-04, 4.392e-04, 5.370e-02, 8.628e-02, -1.212e-02, -1.223e-02) * s1_0_2;
	r0 += M4(-5.606e-02, 1.297e-03, -1.183e-03, 4.742e-03, 2.218e-02, -4.578e-03, 1.805e-02, -1.035e-02, -1.448e-01, 1.529e-01, -1.520e-01, 1.374e-01, -1.310e-03, 7.002e-03, -4.791e-03, -1.009e-02) * s1_1_0;
	r0 += M4(1.067e-01, -6.768e-02, -1.451e-01, -8.563e-02, -1.131e-01, 1.411e-01, -1.519e-01, 2.088e-01, 2.489e-05, -6.473e-03, 6.566e-03, 2.464e-02, 1.416e-01, 3.370e-02, -1.902e-01, -4.481e-02) * s1_1_1;
	r0 += M4(1.860e-02, 1.111e-01, 9.976e-03, -4.562e-02, 1.008e-02, -3.010e-02, 1.012e-02, -2.287e-02, 1.405e-03, 2.446e-04, 2.036e-03, 1.561e-04, 3.358e-02, 1.430e-01, -9.195e-02, -2.368e-01) * s1_1_2;
	r0 += M4(7.737e-03, 1.943e-03, 1.852e-02, 2.434e-03, 3.387e-03, 5.162e-04, 1.484e-02, 8.110e-05, -9.049e-02, 6.715e-02, -1.380e-01, 1.305e-01, 3.234e-04, 7.107e-04, -5.203e-05, 9.681e-04) * s1_2_0;
	r0 += M4(-2.574e-03, 7.000e-03, 8.713e-02, 8.626e-02, -8.953e-03, -1.356e-03, -3.840e-02, 1.330e-02, 2.895e-03, 2.903e-03, 2.645e-03, 1.901e-03, -2.036e-03, -1.263e-03, -1.664e-03, -1.219e-03) * s1_2_1;
	r0 += M4(-3.334e-03, -2.729e-03, -5.716e-03, 2.655e-02, -1.022e-03, -1.773e-03, 4.344e-03, -1.264e-02, -1.206e-03, 8.666e-04, -1.155e-03, 1.392e-03, -6.669e-03, -7.132e-03, 2.068e-02, 1.556e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 += M4(1.005e-01, -3.758e-03, 1.378e-02, 9.132e-03, 1.273e-02, 4.146e-04, 6.220e-04, 2.663e-06, -1.324e-03, -2.983e-03, 5.415e-03, 4.180e-03, 2.037e-03, -1.772e-04, 2.549e-03, -1.273e-03) * s0_0_0;
	r0 += M4(7.518e-02, 1.705e-01, 2.032e-02, 4.601e-02, 3.369e-02, 3.455e-02, 1.080e-04, 1.119e-07, -1.468e-02, -1.179e-02, -4.620e-03, -4.473e-03, -2.917e-03, 3.883e-03, -7.106e-03, 6.191e-03) * s0_0_1;
	r0 += M4(-8.453e-03, -4.264e-03, -6.065e-03, -1.163e-02, 5.976e-05, 1.174e-02, 4.177e-06, 1.417e-06, -4.501e-03, -4.822e-03, -2.656e-04, 2.697e-04, 1.012e-01, -1.021e-01, 5.359e-02, -4.508e-02) * s0_0_2;
	r0 += M4(9.885e-03, -9.705e-03, 1.101e-01, -1.484e-02, 3.406e-02, -1.939e-08, 3.524e-02, 5.253e-06, -6.552e-02, 2.734e-02, 2.485e-02, -8.520e-03, 8.632e-04, 4.150e-04, 2.511e-03, 6.249e-04) * s0_1_0;
	r0 += M4(9.442e-02, 9.694e-02, 1.429e-01, 2.166e-01, 9.968e-02, 9.937e-02, 9.896e-02, 9.972e-02, -1.013e-01, -2.430e-01, 5.899e-02, 8.475e-02, 2.901e-03, -1.826e-03, -2.151e-03, -1.726e-03) * s0_1_1;
	r0 += M4(-1.547e-02, 5.202e-03, -1.678e-02, 1.833e-02, -3.525e-05, 3.414e-02, 1.766e-04, 3.357e-02, 1.127e-02, 3.917e-02, -1.327e-02, -6.699e-03, 1.744e-01, -1.658e-01, 1.567e-01, -1.490e-01) * s0_1_2;
	r0 += M4(-7.192e-03, -4.222e-04, -1.872e-02, -1.558e-02, 3.721e-04, 1.655e-06, 1.212e-02, 1.903e-04, -7.767e-03, -7.069e-03, 5.921e-02, -1.634e-04, 2.795e-03, -8.862e-04, 1.090e-03, 6.067e-05) * s0_2_0;
	r0 += M4(-9.115e-03, -1.098e-02, 5.366e-03, 1.729e-02, -5.196e-05, 1.337e-04, 3.455e-02, 3.472e-02, -1.915e-02, -2.135e-02, 5.170e-02, 1.333e-01, -2.334e-03, 4.136e-03, -4.425e-04, 4.644e-03) * s0_2_1;
	r0 += M4(-4.867e-03, -1.197e-02, -4.586e-03, -1.138e-02, -3.484e-06, 3.039e-06, 4.310e-06, 1.108e-02, -8.947e-03, -1.520e-02, 1.266e-02, 8.640e-03, 1.176e-01, -9.953e-02, 1.801e-01, -1.710e-01) * s0_2_2;
	r0 += M4(-1.187e-02, 5.134e-04, -4.669e-03, -9.800e-05, 1.734e-03, -2.938e-03, -4.769e-04, 6.611e-05, 7.774e-03, -1.678e-03, -5.610e-03, -3.013e-04, -3.026e-03, 1.982e-03, -5.174e-03, -3.335e-03) * s1_0_0;
	r0 += M4(-3.242e-03, -1.046e-02, -7.961e-05, -2.481e-03, 5.310e-02, 1.291e-02, 1.294e-03, -3.465e-03, 2.490e-02, 1.071e-02, -9.275e-03, 1.660e-03, 1.263e-02, 2.955e-03, 9.202e-05, 1.411e-03) * s1_0_1;
	r0 += M4(-4.142e-03, -5.912e-03, -2.118e-03, -3.630e-03, -1.836e-02, 2.888e-02, -6.598e-03, 7.794e-03, 1.223e-03, -8.197e-03, 2.419e-03, 2.378e-03, 3.976e-03, 9.195e-03, -1.111e-03, -5.195e-03) * s1_0_2;
	r0 += M4(-1.850e-02, 4.092e-03, -1.938e-02, 1.332e-03, 2.546e-02, -3.139e-03, 7.103e-03, -3.242e-03, 1.298e-02, -1.362e-02, 4.309e-03, -3.837e-03, -1.624e-01, -8.653e-02, 1.419e-01, 7.958e-02) * s1_1_0;
	r0 += M4(1.705e-01, -8.082e-02, 6.469e-02, -3.293e-02, 2.332e-02, 9.805e-02, 1.189e-01, 5.700e-02, -2.788e-01, 1.436e-01, 1.857e-02, 5.922e-02, -5.764e-02, -1.239e-01, 5.999e-02, 1.196e-01) * s1_1_1;
	r0 += M4(-8.818e-03, -5.749e-02, -6.952e-03, -2.920e-02, -3.783e-02, -1.180e-01, -4.772e-02, -1.880e-02, 2.583e-02, 8.472e-02, 4.464e-03, -2.046e-02, -2.782e-03, -2.227e-02, -7.804e-03, 3.743e-03) * s1_1_2;
	r0 += M4(-5.098e-03, 1.241e-03, -8.479e-03, 4.811e-03, 6.506e-03, -5.161e-03, 1.970e-02, -5.905e-03, 5.635e-03, -8.788e-04, -4.103e-03, -5.960e-03, 1.076e-02, 1.148e-02, -4.530e-03, -7.840e-03) * s1_2_0;
	r0 += M4(5.847e-03, -2.396e-03, 1.023e-01, -5.411e-02, -2.826e-02, -5.060e-03, -7.884e-02, 4.379e-02, 6.456e-03, 3.229e-03, -4.838e-02, 1.481e-02, 2.303e-03, 3.215e-03, 1.934e-03, 4.300e-03) * s1_2_1;
	r0 += M4(-3.926e-03, 3.604e-05, -9.111e-03, -2.428e-02, 4.472e-03, -4.116e-03, -1.778e-03, -6.958e-02, 2.371e-03, 9.982e-04, 1.184e-02, 1.933e-02, 3.401e-03, 2.836e-03, -1.448e-03, -1.083e-03) * s1_2_2;
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 += M4(5.232e-03, 1.642e-03, 6.441e-03, -6.657e-04, 1.056e-03, -4.017e-03, -6.048e-03, -3.147e-03, -1.845e-02, -5.802e-03, -7.433e-03, 8.080e-04, -2.864e-02, 3.041e-03, -3.898e-03, -7.431e-03) * s0_0_0;
	r0 += M4(-6.827e-02, -1.081e-02, -1.156e-02, 2.415e-03, 1.073e-01, 4.723e-02, 2.375e-04, -3.002e-03, 1.282e-01, 2.068e-02, -1.283e-02, -1.319e-02, -7.056e-02, -1.034e-01, -6.598e-04, -6.381e-03) * s0_0_1;
	r0 += M4(7.333e-03, -3.976e-02, 3.376e-03, -3.040e-03, 1.607e-02, 7.105e-02, 3.926e-04, -2.308e-03, -2.596e-02, 3.081e-03, 1.230e-03, -4.318e-03, -4.090e-03, -1.333e-02, -5.954e-04, 3.286e-03) * s0_0_2;
	r0 += M4(2.595e-02, 2.679e-03, 1.856e-02, 5.540e-03, 3.022e-02, -4.102e-03, 7.952e-03, -5.378e-04, -1.498e-02, -4.925e-03, 3.748e-02, 5.754e-03, 5.537e-02, 2.547e-04, -7.024e-03, 6.836e-03) * s0_1_0;
	r0 += M4(-9.740e-02, -2.614e-02, -1.767e-01, -5.589e-02, -2.148e-01, -2.749e-02, 7.975e-02, 3.839e-02, 1.562e-01, 4.171e-02, -2.560e-01, -1.614e-02, 9.278e-02, 1.354e-01, -4.075e-02, -3.161e-02) * s0_1_1;
	r0 += M4(8.883e-03, -2.732e-02, 1.293e-02, -7.301e-02, 1.312e-02, -1.165e-01, -5.780e-03, 3.021e-02, -2.334e-02, 1.886e-02, 3.571e-02, -5.280e-03, 2.963e-03, 1.068e-02, -1.169e-03, -3.067e-02) * s0_1_2;
	r0 += M4(3.460e-04, 2.951e-04, 1.911e-02, 3.432e-04, -1.472e-03, -3.390e-04, -2.248e-03, 1.418e-03, 2.593e-04, 1.847e-03, -1.303e-03, -1.866e-03, -1.812e-03, -3.960e-04, 1.443e-02, 6.510e-04) * s0_2_0;
	r0 += M4(9.939e-03, 1.187e-02, 1.792e-02, 2.983e-02, 9.666e-03, 3.829e-03, 3.345e-02, 1.049e-02, -4.295e-03, -2.226e-03, -1.188e-02, -9.309e-03, -1.041e-03, -5.243e-03, 5.066e-02, 4.012e-02) * s0_2_1;
	r0 += M4(3.717e-03, 7.351e-03, 1.155e-02, 1.782e-02, 1.670e-03, 1.171e-02, -1.351e-02, 1.009e-03, 2.724e-03, -2.886e-03, -7.328e-04, -1.946e-03, 2.372e-03, 3.642e-03, 6.694e-07, 2.179e-02) * s0_2_2;
	r0 += M4(8.563e-03, 2.132e-03, 2.320e-03, 2.223e-03, -9.057e-03, 9.691e-03, -3.387e-03, 2.014e-03, 1.450e-02, 2.921e-03, -3.559e-03, 2.566e-03, 4.236e-04, -6.199e-05, -9.732e-05, 4.461e-05) * s1_0_0;
	r0 += M4(-6.724e-04, -3.378e-02, 5.480e-03, 1.646e-03, 2.170e-03, -4.668e-02, -2.166e-03, 1.071e-02, -5.351e-02, -2.796e-03, -1.224e-02, -1.808e-02, -6.088e-03, 1.918e-03, -4.053e-04, -7.243e-05) * s1_0_1;
	r0 += M4(-9.208e-05, 7.077e-03, -3.859e-03, 2.427e-03, 4.914e-03, 5.284e-02, 3.860e-03, 4.680e-03, -1.130e-02, -4.168e-02, 1.863e-03, -6.315e-04, -9.393e-03, -1.514e-02, 1.215e-03, -5.441e-04) * s1_0_2;
	r0 += M4(-3.455e-02, -2.998e-03, -1.253e-02, 9.378e-03, -6.586e-03, 1.231e-02, -7.689e-03, 1.401e-02, -6.331e-03, -1.643e-04, 1.521e-02, 2.096e-03, -5.682e-03, 1.790e-04, 1.883e-03, -2.284e-05) * s1_1_0;
	r0 += M4(-9.399e-02, 1.899e-01, 6.846e-02, -5.512e-02, 8.895e-02, -9.546e-02, 7.476e-02, -1.498e-01, -4.968e-02, -3.841e-02, 1.667e-01, 1.029e-01, -8.765e-02, -1.984e-02, -1.119e-02, 1.032e-02) * s1_1_1;
	r0 += M4(2.692e-03, -2.082e-02, -2.418e-03, -1.443e-02, -2.425e-03, 1.131e-01, -1.782e-03, 1.165e-01, 8.942e-03, -5.455e-03, -2.711e-03, 6.194e-02, 9.810e-02, -1.490e-02, -1.004e-02, -4.125e-02) * s1_1_2;
	r0 += M4(-1.125e-02, -3.151e-03, 6.863e-02, -1.984e-02, -5.410e-03, 1.709e-03, -5.327e-03, 9.549e-03, -6.051e-04, -4.549e-04, -6.001e-03, -2.185e-03, -7.604e-03, 7.409e-03, -9.080e-03, 7.512e-04) * s1_2_0;
	r0 += M4(6.738e-03, -8.076e-03, -1.620e-02, -4.169e-02, 2.948e-03, 2.847e-04, 3.577e-02, -1.251e-02, 2.308e-03, 1.331e-03, -1.483e-02, -8.906e-03, 7.057e-02, -1.130e-02, 2.442e-03, -3.486e-02) * s1_2_1;
	r0 += M4(6.732e-04, -4.063e-03, -2.135e-03, -1.311e-02, 2.037e-03, -2.410e-03, 2.933e-03, 3.626e-02, -1.536e-03, -2.530e-04, -5.795e-03, -1.548e-02, -3.552e-02, -2.150e-02, -6.609e-03, 1.561e-01) * s1_2_2;
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 += M4(-9.738e-03, -1.086e-06, -5.000e-05, 2.195e-06, 4.948e-03, -5.753e-03, 6.772e-03, -1.992e-03, -1.263e-02, -1.314e-02, 5.451e-03, 4.806e-03, -5.011e-02, 3.110e-03, -7.033e-03, 1.284e-03) * s0_0_0;
	r0 += M4(-2.872e-02, -2.814e-02, -4.316e-05, -1.000e-06, -8.814e-02, 5.554e-02, -1.258e-02, 2.790e-03, 8.766e-02, 7.153e-02, 1.048e-02, 1.618e-02, 9.544e-02, -1.002e-01, 3.626e-02, 1.692e-02) * s0_0_1;
	r0 += M4(-9.013e-06, -1.041e-02, 7.993e-06, -2.520e-06, -4.960e-04, -1.384e-02, -1.150e-03, 2.271e-04, 2.712e-03, 2.863e-02, 1.132e-03, 2.342e-03, -7.488e-03, 3.894e-02, -6.920e-03, -1.623e-03) * s0_0_2;
	r0 += M4(-2.863e-02, -7.109e-07, -2.862e-02, -2.494e-07, -4.430e-02, -1.994e-02, 2.127e-03, 4.871e-02, -7.596e-02, 8.100e-03, -9.687e-02, -1.719e-02, 8.770e-02, -3.153e-03, 4.481e-02, 1.473e-02) * s0_1_0;
	r0 += M4(-8.284e-02, -8.300e-02, -8.374e-02, -8.276e-02, 5.533e-02, 9.138e-02, 7.495e-02, -2.823e-01, 6.576e-04, -1.687e-01, 1.120e-01, -3.771e-02, -1.821e-01, 9.639e-02, -3.363e-02, -1.793e-01) * s0_1_1;
	r0 += M4(1.175e-05, -2.841e-02, -8.468e-05, -2.874e-02, -2.149e-03, -4.375e-04, -5.255e-03, 4.236e-02, 9.788e-03, 6.948e-02, 7.243e-03, 7.792e-02, 5.717e-03, -2.461e-02, -1.846e-03, 6.679e-02) * s0_1_2;
	r0 += M4(1.006e-05, 2.599e-06, -1.011e-02, 1.084e-06, 1.029e-03, -1.310e-03, 2.842e-03, 2.065e-03, 1.855e-03, -6.635e-05, -1.333e-02, 4.316e-03, -3.202e-03, -1.816e-03, 2.096e-02, -6.132e-03) * s0_2_0;
	r0 += M4(-9.092e-06, 1.784e-08, -2.850e-02, -2.777e-02, -3.260e-03, 2.057e-03, 5.962e-03, 2.115e-02, 7.029e-03, 2.026e-03, -3.815e-02, -5.412e-02, -6.350e-03, 5.065e-03, -2.261e-03, 6.812e-02) * s0_2_1;
	r0 += M4(-1.618e-05, -3.993e-06, -8.209e-05, -1.010e-02, -1.025e-03, -3.825e-03, -5.208e-03, -7.988e-03, 4.032e-03, 1.130e-03, 1.047e-02, 1.404e-02, -3.432e-03, -3.687e-03, -8.234e-03, -4.226e-02) * s0_2_2;
	r0 += M4(2.740e-03, -3.529e-03, 5.819e-03, -2.438e-03, 2.496e-02, -4.740e-03, 1.089e-03, -1.460e-03, -7.978e-03, -6.384e-04, 1.550e-03, 1.631e-03, 6.787e-03, 2.309e-03, -1.709e-04, -3.155e-03) * s1_0_0;
	r0 += M4(-4.266e-02, 1.554e-02, 1.044e-02, -6.074e-03, 2.788e-02, -9.009e-02, 1.638e-03, 2.571e-03, -1.798e-02, -2.479e-02, -9.298e-04, 1.249e-03, -2.599e-03, 7.620e-03, 6.590e-05, -6.006e-03) * s1_0_1;
	r0 += M4(-1.831e-02, 3.106e-02, 2.040e-04, 3.971e-03, -9.450e-04, 9.478e-03, -2.886e-04, 7.237e-03, -6.896e-04, -6.263e-03, -6.917e-03, -5.206e-03, 1.869e-05, -5.716e-03, 2.412e-03, -3.138e-03) * s1_0_2;
	r0 += M4(3.088e-03, -4.575e-04, 1.919e-02, -9.786e-03, 6.641e-02, 5.300e-03, 8.862e-02, -1.101e-03, -2.499e-02, -6.258e-03, 3.014e-02, 4.154e-03, 6.743e-02, 1.140e-02, -1.034e-02, -1.959e-02) * s1_1_0;
	r0 += M4(-4.185e-02, 2.054e-02, -3.083e-01, 1.229e-01, 5.066e-02, -1.450e-01, 7.667e-02, -2.416e-01, -1.554e-01, -8.306e-02, 1.626e-01, 1.023e-01, 1.294e-01, -2.481e-01, -7.544e-02, 1.616e-01) * s1_1_1;
	r0 += M4(-1.803e-02, 4.828e-02, -2.382e-02, 1.578e-01, -5.518e-04, 9.879e-03, -2.785e-03, 5.307e-03, -7.357e-02, -1.569e-01, 7.956e-02, 1.682e-01, -6.873e-03, 1.696e-03, 2.811e-03, 1.324e-03) * s1_1_2;
	r0 += M4(1.619e-03, -6.512e-04, 4.532e-03, 2.188e-04, -8.976e-04, -2.572e-03, 4.766e-03, 3.256e-04, 4.497e-03, 1.325e-03, -6.706e-03, -3.277e-03, -5.782e-03, 2.430e-03, -1.874e-02, -9.753e-03) * s1_2_0;
	r0 += M4(9.103e-04, -2.046e-03, 1.392e-02, 4.871e-04, -2.018e-03, 9.804e-03, 3.649e-03, 5.525e-03, -4.564e-04, 6.240e-03, -3.729e-03, -3.210e-03, 1.379e-03, 1.362e-02, 1.631e-02, 2.436e-02) * s1_2_1;
	r0 += M4(-1.648e-03, -1.327e-02, -7.430e-03, -2.288e-02, 5.563e-04, 2.905e-03, 1.283e-03, 8.938e-03, 7.920e-03, 4.223e-03, 1.778e-04, -7.855e-03, -2.155e-03, 2.131e-04, -4.109e-03, -1.135e-02) * s1_2_2;
	r0 += V4(-2.681e-09, -6.332e-09, -1.991e-09, -5.683e-09);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
